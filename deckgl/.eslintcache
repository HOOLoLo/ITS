[{"D:\\Desktop\\ITS\\deckgl\\src\\index.js":"1","D:\\Desktop\\ITS\\deckgl\\src\\components\\streamgraph\\main.js":"2","D:\\Desktop\\ITS\\deckgl\\src\\components\\airQuality.js":"3","D:\\Desktop\\ITS\\deckgl\\src\\components\\Barchart\\main.js":"4","D:\\Desktop\\ITS\\deckgl\\src\\components\\panel\\control.js":"5","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\city.js":"6","D:\\Desktop\\ITS\\deckgl\\src\\components\\routeMap.js":"7","D:\\Desktop\\ITS\\deckgl\\src\\components\\lineChart\\main.js":"8","D:\\Desktop\\ITS\\deckgl\\src\\components\\covid-19.jsx":"9","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\AxisBottom.js":"10","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\ColorLegend.js":"11","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\AxisLeft.js":"12","D:\\Desktop\\ITS\\deckgl\\src\\components\\streamgraph\\useData.js":"13","D:\\Desktop\\ITS\\deckgl\\src\\components\\streamgraph\\Marks.js":"14","D:\\Desktop\\ITS\\deckgl\\src\\components\\sliderTraffic.js":"15","D:\\Desktop\\ITS\\deckgl\\src\\components\\Barchart\\useData.js":"16","D:\\Desktop\\ITS\\deckgl\\src\\components\\Barchart\\Marks.js":"17","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\Marks.js":"18","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\useData.js":"19","D:\\Desktop\\ITS\\deckgl\\src\\components\\lineChart\\ColorLegend.js":"20","D:\\Desktop\\ITS\\deckgl\\src\\components\\sliderCovid.js":"21","D:\\Desktop\\ITS\\deckgl\\src\\components\\test\\selectionlayer.js":"22","D:\\Desktop\\ITS\\deckgl\\src\\components\\charts\\charts.js":"23","D:\\Desktop\\ITS\\deckgl\\src\\components\\charts\\panel.js":"24","D:\\Desktop\\ITS\\deckgl\\src\\components\\sliderexample.js":"25","D:\\Desktop\\ITS\\deckgl\\src\\components\\WorkFlow\\main.js":"26","D:\\Desktop\\ITS\\deckgl\\src\\components\\front_glass\\welcome.js":"27","D:\\Desktop\\ITS\\deckgl\\src\\components\\WorkFlow\\news.js":"28","D:\\Desktop\\ITS\\deckgl\\src\\components\\front_glass\\wallpaper.js":"29"},{"size":2340,"mtime":1618495001090,"results":"30","hashOfConfig":"31"},{"size":4385,"mtime":1615793962886,"results":"32","hashOfConfig":"31"},{"size":8946,"mtime":1611580440598,"results":"33","hashOfConfig":"31"},{"size":4307,"mtime":1586432128068,"results":"34","hashOfConfig":"31"},{"size":16096,"mtime":1597133222230,"results":"35","hashOfConfig":"31"},{"size":10350,"mtime":1584965707297,"results":"36","hashOfConfig":"31"},{"size":159641,"mtime":1617369612623,"results":"37","hashOfConfig":"31"},{"size":13451,"mtime":1595852213232,"results":"38","hashOfConfig":"31"},{"size":10382,"mtime":1583943086712,"results":"39","hashOfConfig":"31"},{"size":513,"mtime":1584608922957,"results":"40","hashOfConfig":"31"},{"size":851,"mtime":1584612286465,"results":"41","hashOfConfig":"31"},{"size":500,"mtime":1584541841263,"results":"42","hashOfConfig":"31"},{"size":1563,"mtime":1585191126647,"results":"43","hashOfConfig":"31"},{"size":2301,"mtime":1585028217192,"results":"44","hashOfConfig":"31"},{"size":4339,"mtime":1614085216911,"results":"45","hashOfConfig":"31"},{"size":1563,"mtime":1585659734221,"results":"46","hashOfConfig":"31"},{"size":17346,"mtime":1585557930015,"results":"47","hashOfConfig":"31"},{"size":2864,"mtime":1585052846906,"results":"48","hashOfConfig":"31"},{"size":2940,"mtime":1584615639033,"results":"49","hashOfConfig":"31"},{"size":862,"mtime":1585191904671,"results":"50","hashOfConfig":"31"},{"size":5123,"mtime":1614049921405,"results":"51","hashOfConfig":"31"},{"size":2682,"mtime":1611555737675,"results":"52","hashOfConfig":"31"},{"size":955,"mtime":1614143549213,"results":"53","hashOfConfig":"31"},{"size":770,"mtime":1614134843676,"results":"54","hashOfConfig":"31"},{"size":810,"mtime":1615794288855,"results":"55","hashOfConfig":"31"},{"size":483,"mtime":1618407787817,"results":"56","hashOfConfig":"31"},{"size":1855,"mtime":1619238744471,"results":"57","hashOfConfig":"31"},{"size":1707,"mtime":1618409357460,"results":"58","hashOfConfig":"31"},{"size":1659,"mtime":1618495282430,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},"1pl7wrx",{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"63"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":64,"fixableErrorCount":0,"fixableWarningCount":1,"source":"81","usedDeprecatedRules":"63"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"63"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"63"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"63"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"63"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"63"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"63"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"63"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"63"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"63"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"63"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"63"},"D:\\Desktop\\ITS\\deckgl\\src\\index.js",["141","142","143","144"],"import React,{Fragment}from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router, Route,  Switch,Link } from 'react-router-dom'\r\n\r\nimport {City} from './components/city/city';\r\nimport RouteMap from \"./components/routeMap\";\r\nimport Covid from \"./components/covid-19\";\r\nimport AirQuality from \"./components/airQuality\";\r\nimport {StreamG} from \"./components/streamgraph/main\";\r\nimport {BarG} from \"./components/Barchart/main\";\r\nimport {Panel} from \"./components/panel/control\";\r\nimport LineChart from \"./components/lineChart/main\";\r\nimport './index.css';\r\nimport Ad from \"./components/sliderexample\"\r\nimport News from \"./components/WorkFlow/news\"\r\nimport Welcome from \"./components/front_glass/welcome\"\r\nimport Wallpaper from \"./components/front_glass/wallpaper.js\"\r\n\r\nconst map = document.getElementById(\"map\");\r\nfunction Getpage(){\r\n    return (\r\n        <Router>\r\n            <Route>\r\n                <Route exact path=\"/\">\r\n                    <RouteMap />\r\n                </Route>\r\n                <Route path=\"/covid\">\r\n                    <Covid />\r\n                </Route>\r\n                <Route path=\"/airquality\">\r\n                    <AirQuality />\r\n                </Route>\r\n                <Route path=\"/bubble\">\r\n                    <City />\r\n                </Route>\r\n                <Route path=\"/stream\">\r\n                    <StreamG />\r\n                </Route>\r\n                <Route path=\"/bar\">\r\n                    <BarG />\r\n                </Route>\r\n                <Route path=\"/control\">\r\n                    <Panel/>\r\n                </Route>\r\n                <Route path={\"/slider\"}>\r\n                    <Ad/>\r\n                </Route>\r\n                <Route path={\"/news\"}>\r\n                    <News/>\r\n                </Route>\r\n                <Route path={\"/news\"}>\r\n                    <News/>\r\n                </Route>\r\n                <Route path={\"/welcome\"}>\r\n                    <Welcome/>\r\n                </Route>\r\n                <Route path={\"/wallpaper\"}>\r\n                    <Wallpaper/>\r\n                </Route>\r\n            </Route>\r\n\r\n        </Router>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n// getData();\r\n\r\n// ReactDOM.render(\r\n//         <Map />,\r\n//     map\r\n// );\r\n\r\nReactDOM.render(\r\n    <Getpage />,\r\n    map\r\n)\r\n\r\n// ReactDOM.render(\r\n//     <Getpage/>\r\n//     ,map\r\n// )\r\n",["145","146"],"D:\\Desktop\\ITS\\deckgl\\src\\components\\streamgraph\\main.js",["147","148","149","150","151","152"],"import './stream.css'\r\nimport * as d3 from 'd3'\r\nimport React, { useState, useCallback, useEffect,Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {useData} from './useData'\r\nimport {AxisBottom} from \"../city/AxisBottom\";\r\nimport {AxisLeft} from \"../city/AxisLeft\";\r\nimport {Marks} from \"./Marks\"\r\nimport {ColorLegend} from \"../city/ColorLegend\";\r\n\r\nconst width = 960;\r\nconst height = 500;\r\nconst margin = { top: 20, right: 200, bottom: 65, left: 150 };\r\nvar innerWidth = width - margin.right - margin.left;\r\nvar innerHeight = height - margin.top - margin.bottom;\r\nconst xAxisLabel = 'Time';\r\nconst yAxisLabel='Light';\r\nconst siFormat = d3.format('.2s');\r\nconst xAxisLabelOffset = 50;\r\nconst yAxisLabelOffset = 70;\r\nconst xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');\r\n\r\n//画河流图需要data和keys\r\n/*\r\n*data format data is a list\r\n* [{\r\n*   xvalue:x\r\n*   key1: k1\r\n*   key2: k2\r\n*   ...\r\n* }\r\n* ,\r\n* {\r\n*   ...\r\n* }\r\n* ...\r\n* ]\r\n*\r\n* keys 就是data中所有的key的集合\r\n*\r\n* */\r\n\r\nexport function StreamG(){\r\n\r\n\r\n    const [data,keys]=useData();\r\n    const [start,setStart]=useState(19)\r\n\r\n\r\n\r\n\r\n\r\n    var xValue = function (d) { return new Date(d.date).getHours(); };\r\n    var xScale = d3.scaleLinear();\r\n    var yScale = d3.scaleLinear();\r\n\r\n\r\n    // var xAxisMajor = d3.axisBottom().scale(xScale);\r\n    // var xAxisMinor = d3.axisBottom().scale(xScale).ticks(50);\r\n//设置标志列表\r\n    const circleRadius = 7;\r\n    const colorLegendLabel='city'\r\n    const colorScale = d3.scaleOrdinal()\r\n    let range=[];\r\n    if(keys){\r\n        keys.forEach((d,i)=>{\r\n                range.push(d3.interpolateSpectral(i/8))\r\n            }\r\n        )\r\n        colorScale.domain(keys)\r\n            .range(range)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return <div className={'stream'} >\r\n        <svg height={height} width={width} >\r\n            <g transform={`translate(${margin.left},${margin.top})`}>\r\n                <g transform={`translate(${innerWidth + 60}, 60)`}>\r\n                    <text x={35} y={-25} className=\"axis-label\" textAnchor=\"middle\" style={{'fill':'#FFFFFF'}}>\r\n                        {colorLegendLabel}\r\n                    </text>\r\n                    <ColorLegend\r\n                        tickSpacing={22}\r\n                        tickSize={10}\r\n                        tickTextOffset={12}\r\n                        tickSize={circleRadius}\r\n                        colorScale={colorScale}\r\n                        // onHover={setHoveredValue}\r\n                        // hoveredValue={hoveredValue}\r\n                        // fadeOpacity={fadeOpacity}\r\n                    />\r\n                </g>\r\n                <Marks data={data}\r\n                       start={start}\r\n                       keys={keys}\r\n                       xScale={xScale}\r\n                       xValue={xValue}\r\n                       yScale={yScale}\r\n                       margin={margin}\r\n                       innerHeight={innerHeight}\r\n                       innerWidth={innerWidth}\r\n                       callback={()=>{\r\n                           if(start+24<139){\r\n                               console.log(data.length,start+24)\r\n                               setStart(start+24)\r\n                           }\r\n                           else{\r\n                               setStart(19)\r\n                           }\r\n                       }}\r\n                >\r\n\r\n                </Marks>\r\n                <AxisBottom\r\n                    xScale={xScale}\r\n                    innerHeight={innerHeight}\r\n                    tickFormat={xAxisTickFormat}\r\n                    tickOffset={2}\r\n                />\r\n                <text\r\n                    className=\"axis-label\"\r\n                    textAnchor=\"middle\"\r\n                    transform={`translate(${-yAxisLabelOffset},${innerHeight /\r\n                    2}) rotate(-90)`}\r\n                >\r\n                    {yAxisLabel}\r\n                </text>\r\n                {/*<AxisLeft yScale={yScale} innerWidth={innerWidth} tickOffset={5} />*/}\r\n                <text\r\n                    className=\"axis-label\"\r\n                    x={innerWidth / 2}\r\n                    y={innerHeight + xAxisLabelOffset}\r\n                    textAnchor=\"middle\"\r\n                >\r\n                    {xAxisLabel}\r\n                </text>\r\n            </g>\r\n        </svg>\r\n    </div>\r\n\r\n\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\airQuality.js",["153","154","155","156"],"import React, {Component, Fragment} from 'react';\r\nimport {render} from 'react-dom';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\r\n// import {HexagonLayer} from '@deck.gl/aggregation-layers';\r\nimport DeckGL from '@deck.gl/react';\r\nimport { Select,SIZE } from \"baseui/select\";\r\nimport{ColumnLayer} from \"@deck.gl/layers\";\r\n\r\nimport * as d3 from 'd3'\r\nimport {Provider as StyletronProvider} from \"styletron-react\";\r\nimport {BaseProvider, LightTheme, styled} from \"baseui\";\r\nimport SliderTraffic from \"./sliderTraffic\";\r\n\r\nimport {Client as Styletron} from 'styletron-engine-atomic';\r\nconst SelectContainer=styled('div',{\r\n    position: 'absolute',\r\n    // display: 'flex',\r\n    // justifyContent: 'center',\r\n    // alignItems: 'center',\r\n    zIndex: 1,\r\n    top: '50px',\r\n    right:'10px',\r\n    width:'20%',\r\n    height:'10%'\r\n});\r\nconst engine = new Styletron();\r\n\r\n// Set your mapbox token here\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w'; // eslint-disable-line\r\n\r\n// Source data CSV\r\n\r\nconst ambientLight = new AmbientLight({\r\n    color: [255, 255, 255],\r\n    intensity: 1.0\r\n});\r\n\r\nconst pointLight1 = new PointLight({\r\n    color: [255, 255, 255],\r\n    intensity: 1.0,\r\n    position: [0, 0, 80000]\r\n});\r\n\r\nconst pointLight2 = new PointLight({\r\n    color: [255, 255, 255],\r\n    intensity: 1.0,\r\n    position: [180, 0, 80000]\r\n});\r\n\r\nconst lightingEffect = new LightingEffect({ambientLight, pointLight1, pointLight2});\r\n\r\nlet qualityMap=new Map()\r\n\r\nfunction download(content, fileName, contentType) {\r\n    var a = document.createElement(\"a\");\r\n    var file = new Blob([content], {type: contentType});\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = fileName;\r\n    a.click();\r\n}\r\n\r\n// let maxpm10=0;\r\nfunction getData(){\r\n    return new Promise(resolve => {\r\n        d3.json(\"./air.json\").then(data=>{\r\n            console.log(data)\r\n            data.results.forEach(d=>{\r\n                // console.log('d',d);\r\n                if(d.coordinates){\r\n                    d.measurements.forEach(l=>{\r\n                        // if(l.value>maxpm10){\r\n                        //     maxpm10=l.value;\r\n                        // }\r\n                        // console.log(l)\r\n                        if(qualityMap.has(l.parameter)){\r\n                            qualityMap.get(l.parameter).push(\r\n                                {centroid: [d.coordinates.longitude,d.coordinates.latitude], value: l.value},\r\n                            )\r\n                        }\r\n                        else{\r\n                            qualityMap.set(l.parameter,[{centroid: [d.coordinates.longitude,d.coordinates.latitude], value: l.value}])\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            // console.log('maxpm',maxpm10)\r\n            // qualityMap.get('pm10').forEach(d=>{\r\n            //     d.value=(d.value/maxpm10)*1000;\r\n            // })\r\n            resolve('0');\r\n        })\r\n    })\r\n}\r\n\r\n\r\n// let p=getData()\r\n// p.then(results=>{\r\n//     console.log('qulity',qualityMap)\r\n// })\r\n\r\n\r\nconst material = {\r\n    ambient: 0.64,\r\n    diffuse: 0.6,\r\n    shininess: 32,\r\n    specularColor: [51, 51, 51]\r\n};\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n    longitude:  120.207057,\r\n    latitude: 30.225901,\r\n\r\n    zoom: 3,\r\n    pitch: 45,\r\n    bearing: 0\r\n\r\n};\r\n\r\nconst colorRange = [\r\n    [1, 152, 189],\r\n    [73, 227, 206],\r\n    [216, 254, 181],\r\n    [254, 237, 177],\r\n    [254, 173, 84],\r\n    [209, 55, 78]\r\n];\r\n\r\n\r\n/* eslint-disable react/no-deprecated */\r\nexport default class AirQuality extends Component {\r\n    static get defaultColorRange() {\r\n        return colorRange;\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data:[]\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let p=getData();\r\n        p.then(results=>{\r\n            this.setState({\r\n                data:[]\r\n            });\r\n            console.log('qualityMap:',qualityMap)\r\n        })\r\n        // this._animate();\r\n    }\r\n\r\n    _renderLayers() {\r\n\r\n\r\n        return [\r\n        //     new HexagonLayer({\r\n        //         id: 'heatmap',\r\n        //         colorRange,\r\n        //         coverage,\r\n        //         data,\r\n        //         elevationRange: [0, 3000],\r\n        //         elevationScale: data && data.length ? 50 : 0,\r\n        //         extruded: true,\r\n        //         getPosition: d => d,\r\n        //         onHover: this.props.onHover,\r\n        //         pickable: Boolean(this.props.onHover),\r\n        //         radius,\r\n        //         upperPercentile,\r\n        //         material,\r\n        //\r\n        //         transitions: {\r\n        //             elevationScale: 3000\r\n        //         }\r\n        //     })\r\n\r\n            new ColumnLayer({\r\n\r\n                    id: 'column-layer',\r\n                    data:this.state.data,\r\n                    diskResolution: 12,\r\n                    radius: 5000,\r\n                    extruded: true,\r\n                    pickable: true,\r\n                    elevationScale: 5000,\r\n                    getPosition: d => d.centroid,\r\n                    getFillColor: d => {\r\n                        let k=(Math.log(d.value)/Math.log(4)).toFixed(0);\r\n                        if(k<=5){\r\n                            return colorRange[k]\r\n                        }\r\n                        else{\r\n                            return colorRange[5]\r\n                        }\r\n                    },\r\n                    getLineColor: [0, 0, 0],\r\n                getElevation:d=>d.value,\r\n                transitions:{\r\n                    getElevation:{\r\n                        duration: 3000,\r\n                        // type: 'spring',\r\n                        // stiffness: 0.01,\r\n                        // damping: 0.15,\r\n                        // easing: d3.easeCubicInOut,\r\n                        enter: d => {\r\n                            console.log(d);\r\n                            let tmp=[];\r\n                            for(let i=0;i<300;i++){\r\n                                tmp.push(d[0]*i/300)\r\n                            }\r\n                            console.log(tmp)\r\n                            return tmp;\r\n                        },\r\n                    }\r\n                },\r\n\r\n                updateTriggers:{\r\n                    getElevation: [this.state.data],\r\n                }\r\n\r\n                // onHover: ({object, x, y}) => {\r\n                //     const tooltip = `height: ${object.value * 5000}m`;\r\n                //\r\n                // }\r\n            })\r\n         ];\r\n\r\n    }\r\n\r\n    render() {\r\n        const {mapStyle = 'mapbox://styles/mapbox/dark-v9'} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <DeckGL\r\n                    layers={this._renderLayers()}\r\n                     effects={[lightingEffect]}\r\n                    initialViewState={INITIAL_VIEW_STATE}\r\n                    controller={true}\r\n                >\r\n                    <StaticMap\r\n                        reuseMaps\r\n                        mapStyle={mapStyle}\r\n                        preventStyleDiffing={true}\r\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    />\r\n                </DeckGL>\r\n                <StyletronProvider value={engine}>\r\n                    <BaseProvider theme={LightTheme}>\r\n                        <SelectContainer>\r\n                            <Select\r\n                                options={[\r\n                                    {label:\"pm10\",id:'pm10'},\r\n                                    {label:\"pm25\",id:'pm25'},\r\n                                    { label: \"co\", id: \"co\" },\r\n                                    { label: \"no2\", id: \"no2\" },\r\n                                    { label: \"so2\", id: \"so2\" },\r\n                                    { label: \"o3\", id: \"o3\" },\r\n                                    { label: \"bc\", id: \"bc\" },\r\n                                ]}\r\n                                value={this.state.label}\r\n                                placeholder=\"选择污染类型\"\r\n                                // onChange={params => setValue(params.value)}\r\n                                size={SIZE.mini}\r\n                                clearable={true}\r\n                                onChange={parems=> {\r\n                                    this.setState({\r\n                                        data:qualityMap.get(parems.option.id),\r\n                                        label:{label:parems.option.label,id:parems.option.id}\r\n                                    })\r\n\r\n                                }}\r\n                            />\r\n                        </SelectContainer>\r\n                    </BaseProvider>\r\n                </StyletronProvider>\r\n            </Fragment>\r\n\r\n\r\n\r\n    );\r\n    }\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\Barchart\\main.js",["157","158","159","160","161","162"],"import * as d3 from 'd3'\r\nimport React, { useState, useCallback, useEffect,Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {useData} from './useData'\r\nimport {AxisBottom} from \"../city/AxisBottom\";\r\nimport {AxisLeft} from \"../city/AxisLeft\";\r\nimport {Marks} from \"./Marks\"\r\nimport {ColorLegend} from \"../city/ColorLegend\";\r\nconst width = 960;\r\nconst height = 500;\r\nconst margin = { top: 20, right: 200, bottom: 65, left: 150 };\r\nvar innerWidth = width - margin.right - margin.left;\r\nvar innerHeight = height - margin.top - margin.bottom;\r\nconst xAxisLabel = 'Time';\r\nconst yAxisLabel='Light';\r\nconst siFormat = d3.format('.2s');\r\nconst xAxisLabelOffset = 50;\r\nconst yAxisLabelOffset = 70;\r\nconst xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');\r\n//画河流图需要data和keys\r\n/*\r\n*data format data is a list\r\n* [{\r\n*   xvalue:x\r\n*   key1: k1\r\n*   key2: k2\r\n*   ...\r\n* }\r\n* ,\r\n* {\r\n*   ...\r\n* }\r\n* ...\r\n* ]\r\n*\r\n* keys 就是data中所有的key的集合\r\n*\r\n* */\r\n\r\nexport function BarG(){\r\n\r\n\r\n    const [data,keys]=useData();\r\n    const [start,setStart]=useState(19)\r\n\r\n\r\n\r\n\r\n\r\n    var xValue = function (d) { return new Date(d.date).getHours(); };\r\n    var xScale = d3.scaleLinear();\r\n    var yScale = d3.scaleLinear();\r\n\r\n\r\n\r\n\r\n    // var xAxisMajor = d3.axisBottom().scale(xScale);\r\n    // var xAxisMinor = d3.axisBottom().scale(xScale).ticks(50);\r\n\r\n    const circleRadius = 7;\r\n    const colorLegendLabel='city'\r\n    const colorScale = d3.scaleOrdinal()\r\n    let range=[];\r\n    if(keys){\r\n        keys.forEach((d,i)=>{\r\n                range.push(d3.interpolateSpectral(i/8))\r\n            }\r\n        )\r\n        colorScale.domain(keys)\r\n            .range(range)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return <div className={'bar'}>\r\n        <svg height={height} width={width}>\r\n            <g transform={`translate(${margin.left},${margin.top})`}>\r\n                <g transform={`translate(${innerWidth + 60}, 60)`}>\r\n                    <text x={35} y={-25} className=\"axis-label\" textAnchor=\"middle\">\r\n                        {colorLegendLabel}\r\n                    </text>\r\n                    <ColorLegend\r\n                        tickSpacing={22}\r\n                        tickSize={10}\r\n                        tickTextOffset={12}\r\n                        tickSize={circleRadius}\r\n                        colorScale={colorScale}\r\n                        // onHover={setHoveredValue}\r\n                        // hoveredValue={hoveredValue}\r\n                        // fadeOpacity={fadeOpacity}\r\n                    />\r\n                </g>\r\n                <Marks data={data}\r\n                       start={start}\r\n                       keys={keys}\r\n                       xScale={xScale}\r\n                       xValue={xValue}\r\n                       yScale={yScale}\r\n                       margin={margin}\r\n                       innerHeight={innerHeight}\r\n                       innerWidth={innerWidth}\r\n                       callback={()=>{\r\n                           if(start+24<139){\r\n                               console.log(data.length,start+24)\r\n                               setStart(start+24)\r\n                           }\r\n                           else{\r\n                               setStart(19)\r\n                           }\r\n                       }}\r\n                >\r\n\r\n                </Marks>\r\n                <AxisBottom\r\n                    xScale={xScale}\r\n                    innerHeight={innerHeight}\r\n                    tickFormat={xAxisTickFormat}\r\n                    tickOffset={2}\r\n                />\r\n                <text\r\n                    className=\"axis-label\"\r\n                    textAnchor=\"middle\"\r\n                    transform={`translate(${-yAxisLabelOffset},${innerHeight /\r\n                    2}) rotate(-90)`}\r\n                >\r\n                    {yAxisLabel}\r\n                </text>\r\n                {/*<AxisLeft yScale={yScale} innerWidth={innerWidth} tickOffset={5} />*/}\r\n                <text\r\n                    className=\"axis-label\"\r\n                    x={innerWidth / 2}\r\n                    y={innerHeight + xAxisLabelOffset}\r\n                    textAnchor=\"middle\"\r\n                >\r\n                    {xAxisLabel}\r\n                </text>\r\n            </g>\r\n        </svg>\r\n    </div>\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\panel\\control.js",["163","164","165","166","167","168","169","170","171","172","173","174","175","176","177"],"import React ,{Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Select,SIZE } from \"baseui/select\";\r\nimport {BaseProvider, LightTheme, styled} from \"baseui\";\r\nimport {Client as Styletron} from 'styletron-engine-atomic';\r\nimport {Provider as StyletronProvider} from 'styletron-react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport * as d3 from 'd3'\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {text} from \"d3-request\";\r\nimport $ from \"jquery\"\r\n// let keys=[];\r\nlet ip={}\r\nlet content={}\r\n// const { exec } = require('child_process');\r\n// // 输出当前目录（不一定是代码所在的目录）下的文件和文件夹\r\n// exec('ls -l', (err, stdout, stderr) => {\r\n//     if(err) {\r\n//         console.log(err);\r\n//         return;\r\n//     }\r\n//     console.log(`stdout: ${stdout}`);\r\n//     console.log(`stderr: ${stderr}`);\r\n// })\r\n\r\n//读取ip地址\r\nfunction readipData(){\r\n\r\n    return new Promise(resolve => {\r\n        // d3.csv('https://raw.githubusercontent.com/HOOLoLo/ITS/master/deckgl/public/panel.csv').then(d=>{\r\n        d3.csv('panel.csv').then(d=>{\r\n                d.map(x=>{\r\n                ip[x['no']]=x['ip']\r\n            })\r\n            let name=Object.keys(ip);\r\n            console.log(name)\r\n            resolve(name)\r\n            // console.log(ip)\r\n        })\r\n    })\r\n\r\n}\r\n\r\nfunction setK() {\r\n    return new Promise(resolve => {\r\n        d3.csv('content.csv').then(d=>{\r\n            d.map(x=>{\r\n                content[x['name']]=x['path']\r\n            })\r\n            console.log(content)\r\n            let k=Object.keys(content);\r\n            console.log('k',k)\r\n            resolve(k)\r\n        })\r\n    })\r\n}\r\n\r\n// setK().then()\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet p=setK();\r\nlet p2=readipData()\r\nexport function Panel() {\r\n    const [value, setValue] = React.useState('MIC');\r\n    const [ipValue,setIP]=React.useState('1号机(MIC)');\r\n\r\n    const[keys,setKeys]=React.useState(['wait']);\r\n    const[ipName,setName]=React.useState(['wait']);\r\n\r\n    p.then((result)=>{\r\n        setKeys(result)\r\n    });\r\n\r\n    p2.then((result)=>{\r\n        setName(result)\r\n    })\r\n\r\n\r\n    // setKeys(setK());\r\n\r\n\r\n    const classes = useStyles();\r\n    function handleChange(event) {\r\n        console.log()\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    function handleIPChoese(event) {\r\n        setIP(event.target.value);\r\n    }\r\n\r\n\r\n    function send(event) {\r\n\r\n        console.log(event.currentTarget)\r\n        const http=new XMLHttpRequest();\r\n        const url=ip[event.currentTarget.value]+'/url/'+value;\r\n        console.log(url)\r\n        http.open('GET',url)\r\n        http.send()\r\n    }\r\n\r\n    function sendVolume(event){\r\n        const http=new XMLHttpRequest();\r\n        console.log(event.currentTarget.value)\r\n        const url=ip[ipValue]+'/volume/'+event.currentTarget.value;\r\n        http.open('GET',url)\r\n        http.send()\r\n    }\r\n    function sendScroll(event) {\r\n        const http=new XMLHttpRequest();\r\n        console.log(event.currentTarget.value)\r\n        const url=ip[ipValue]+'/scroll/'+event.currentTarget.value;\r\n        http.open('GET',url)\r\n        http.send()\r\n\r\n    }\r\n    function sendOpenChrome(event) {\r\n        const http=new XMLHttpRequest();\r\n        const url=ip[ipValue]+'/openChrome';\r\n        http.open('GET',url);\r\n        http.send()\r\n    }\r\n\r\n    function shutdown() {\r\n        let message=window.confirm('确定关闭'+ipValue+'吗？')\r\n        if (message===true){\r\n            const http=new XMLHttpRequest();\r\n            const url=ip[ipValue]+'/shutdown';\r\n            http.open('GET',url);\r\n            http.send()\r\n        }\r\n        else return\r\n    }\r\n\r\n    function openAllChrome(){\r\n        for(let prop in ip){\r\n            if(ip[prop]){\r\n                console.log(ip[prop])\r\n                const http=new XMLHttpRequest();\r\n                const url=ip[prop]+'/openChrome';\r\n                http.open('GET',url);\r\n                http.send()\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateService() {\r\n        let message=window.confirm('确定更新'+ipValue+'服务吗？')\r\n        if(message===true){\r\n            const http=new XMLHttpRequest();\r\n            const url=ip[ipValue]+'/update';\r\n            // $.post(url,\"copy file////Mypassport/Storage/content.csv . /Y\",text)\r\n            http.open('GET',url);\r\n            http.send()\r\n        }\r\n        else return\r\n    }\r\n\r\n    function updateMain(){\r\n        let message=window.confirm('确定更新'+ipValue+'服务吗？')\r\n        if(message===true){\r\n            const http=new XMLHttpRequest();\r\n            const url='http://192.168.0.161:5556'+'/updateMain';\r\n            // $.post(url,\"copy file////Mypassport/Storage/content.csv . /Y\",text)\r\n            http.open('GET',url);\r\n            http.send()\r\n        }\r\n        else return\r\n    }\r\n\r\n    function openPotPlayer(){\r\n        for(let prop in ip){\r\n            if(ip[prop]){\r\n                console.log(ip[prop])\r\n                const http=new XMLHttpRequest();\r\n                const url=ip[prop]+'/openPotPlayer/'+document.getElementById('videoname').value;\r\n                http.open('GET',url);\r\n                http.send()\r\n            }\r\n        }\r\n    }\r\n    function closePotPlayer() {\r\n        for(let prop in ip){\r\n            if(ip[prop]){\r\n                console.log(ip[prop])\r\n                const http=new XMLHttpRequest();\r\n                const url=ip[prop]+'/closePotPlayer';\r\n                http.open('GET',url);\r\n                http.send()\r\n            }\r\n        }\r\n    }\r\n    //全景视频使用\r\n    function dragLeft(){\r\n        const http=new XMLHttpRequest();\r\n        const url=ip[ipValue]+'/dragLeft/'+document.getElementById('leftPix').value;\r\n        http.open('GET',url);\r\n        http.send()\r\n    }\r\n\r\n    function dragRight() {\r\n        const http=new XMLHttpRequest();\r\n        const url=ip[ipValue]+'/dragLeft/'+document.getElementById('rightPix').value;\r\n        http.open('GET',url);\r\n        http.send();\r\n    }\r\n    function sendCommand(){\r\n            const url=ip[ipValue]+'/cmd';\r\n            $.post(url,{cmd:document.getElementById('command').value})\r\n\r\n    }\r\n    // if(!keys){\r\n    //     console.log('keys')\r\n    //     return <div>wait</div>\r\n    // }\r\n\r\n    // function startBackMusic() {\r\n    //     const http=new XMLHttpRequest();\r\n    //     const url=ip[ipValue]+'/openMusic';\r\n    //     http.open('GET',url);\r\n    //     http.send()\r\n    // }\r\n    // function stopBackMusic() {\r\n    //     const http=new XMLHttpRequest();\r\n    //     const url=ip[ipValue]+'/stopMusic';\r\n    //     http.open('GET',url);\r\n    //     http.send()\r\n    // }\r\n\r\n\r\n    function adjustAllvideo(){\r\n        let list=[10,10,10,10,10,10,10]\r\n        ip.map((i,v)=>{\r\n            const http=new XMLHttpRequest();\r\n            //用正负来区分左右把不要单独了\r\n            const url=ip[i]+'/dragLeft/'+list[i];\r\n            http.open('GET',url);\r\n            http.send()\r\n        })\r\n    }\r\n    function flip(){\r\n        const http=new XMLHttpRequest();\r\n        const url=ip[ipValue]+'/flip';\r\n        http.open('GET',url);\r\n        http.send()\r\n    }\r\n\r\n    function sendDownload(){\r\n        const http=new XMLHttpRequest();\r\n        const url=ip[ipValue]+'/download/'+document.getElementById('downloadfile').value;\r\n        http.open('GET',url);\r\n        http.send()\r\n    }\r\n    function closePreview() {\r\n        const http=new XMLHttpRequest();\r\n        const url=ip[ipValue]+'/closepreview';\r\n        http.open('GET',url);\r\n        http.send()\r\n    }\r\n\r\n    function openEdge(){\r\n        const http=new XMLHttpRequest();\r\n        const url=ip[ipValue]+'/openEdge';\r\n        http.open('GET',url);\r\n        http.send()\r\n    }\r\n    return (\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Content</FormLabel>\r\n\r\n                <div className={classes.root}>\r\n                    <Button variant=\"contained\" color=\"primary\"  onClick={openAllChrome} >\r\n                        打开所有浏览器\r\n                    </Button>\r\n                </div>\r\n\r\n                <RadioGroup aria-label=\"content\" name=\"content\" value={value} onChange={handleChange}>\r\n                    {/*{*/}\r\n                    {/*    ()=>{*/}\r\n                    {/*        if(keys!==[]){*/}\r\n                    {/*            console.log(keys);*/}\r\n                    {/*   */}\r\n                    {/*        }*/}\r\n                    {/*    }*/}\r\n                    {/*}*/}\r\n                    {\r\n                        keys.map((value,index)=>{\r\n                            console.log('d',value);\r\n                            return(\r\n                                <div>\r\n                                    {index===0&&<Chip color=\"primary\" size=\"small\"  label={'拼接屏内容'}/>}\r\n                                    {index===5&&<Chip color=\"primary\" size=\"small\"  label={'融合内容'}/>}\r\n                                    {index===14&&<Chip color=\"primary\" size=\"small\"  label={'玻璃内容'}/>}\r\n                                    {index===18&&<Chip color=\"primary\" size=\"small\"  label={'窗户'}/>}\r\n                                    <FormControlLabel key={index} value={value} control={<Radio />} label={value}  />\r\n                                </div>\r\n\r\n                            )\r\n                        })\r\n                    }\r\n\r\n\r\n                    {/*<FormControlLabel value={keys[0]} control={<Radio />} label={d}  />*/}\r\n                    {/*<FormControlLabel value={d} control={<Radio />} label={d}  />*/}\r\n                    {/*<FormControlLabel value={d} control={<Radio />} label={d}  />*/}\r\n                    {/*<FormControlLabel value={d} control={<Radio />} label={d}  />*/}\r\n                    {/*<FormControlLabel value={d} control={<Radio />} label={d}  />*/}\r\n                </RadioGroup>\r\n                <div className={classes.root}>\r\n                    {\r\n                        ipName.map(((value, index) => {\r\n                            return(\r\n                                <Button key={index} variant=\"contained\" color=\"primary\" value={value} onClick={send} >\r\n                                    {value}\r\n                                </Button>\r\n                            )\r\n                        }))\r\n                    }\r\n                    {/*<Button variant=\"contained\" color=\"primary\" value={1} onClick={send} >*/}\r\n                    {/*    1号机(MIC)*/}\r\n                    {/*</Button>*/}\r\n                    {/*<Button variant=\"contained\" color=\"primary\" value={2} onClick={send}>*/}\r\n                    {/*    2号机(ML)*/}\r\n                    {/*</Button>*/}\r\n                    {/*<Button variant=\"contained\" color=\"primary\" value={3} onClick={send}>*/}\r\n                    {/*    3号机(DTW)*/}\r\n                    {/*</Button>*/}\r\n                    {/*<Button variant=\"contained\" color=\"primary\" value={4} onClick={send}>*/}\r\n                    {/*    4号机(news)*/}\r\n                    {/*</Button>*/}\r\n                    {/*<Button variant=\"contained\" color=\"primary\" value={5} onClick={send}>*/}\r\n                    {/*    5号机(conclusion)*/}\r\n                    {/*</Button>*/}\r\n                    {/*<Button variant=\"contained\" color=\"primary\" value={6} onClick={send}>*/}\r\n                    {/*    6号机(融合)*/}\r\n                    {/*</Button>*/}\r\n                    {/*<Button variant=\"contained\" color=\"primary\" value={7} onClick={send}>*/}\r\n                    {/*    7号机(玻璃)*/}\r\n                    {/*</Button>*/}\r\n                    {/*<Button variant=\"contained\" color=\"primary\" value={8} onClick={send}>*/}\r\n                    {/*    8号机(窗户)*/}\r\n                    {/*</Button>*/}\r\n                </div>\r\n                <RadioGroup aria-label=\"ipLabel\" name=\"ipLabel\" value={ipValue} onChange={handleIPChoese}>\r\n                {\r\n                    ipName.map((value,index)=>{\r\n                        console.log('d',value);\r\n                        return(\r\n                                <FormControlLabel key={index} value={value} control={<Radio />} label={value}  />\r\n\r\n                        )\r\n                    })\r\n                }\r\n                </RadioGroup>\r\n                <div className={classes.root}>\r\n                    <Button variant=\"contained\" color=\"secondary\"  value={'up'} onClick={sendVolume}> 增大音量</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\"  value={'down'} onClick={sendVolume} > 减小音量</Button>\r\n                </div>\r\n                <div className={classes.root}>\r\n                    <Button variant=\"contained\" color=\"secondary\"  value={'front'} onClick={sendScroll}> 向前滑动</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\"  value={'back'} onClick={sendScroll} > 向后滑动</Button>\r\n                </div>\r\n                <div className={classes.root}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={sendOpenChrome}> 打开浏览器</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\"  onClick={shutdown}> 关机</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={openEdge}>打开Edge浏览器</Button>\r\n                </div>\r\n                <div className={classes.root}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={updateService}> 更新服务</Button>\r\n                </div>\r\n                <div className={classes.root}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={updateMain}> 从git上更新主服务</Button>\r\n                </div>\r\n                <div className={classes.root}>\r\n                    <TextField id=\"videoname\" label=\"输入视频名称\" variant=\"outlined\" defaultValue=\"vr.webm\"/>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={openPotPlayer}> 打开全景视频</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={closePotPlayer}> 关闭全景视频</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={closePreview}> 关闭预览</Button>\r\n\r\n                </div>\r\n                <div className={classes.root}>\r\n                    <TextField id=\"leftPix\" label=\"输入距离\" variant=\"outlined\" defaultValue={'50'}/>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={dragLeft}> 向左调整</Button>\r\n                    <TextField id=\"rightPix\" label=\"输入距离\" variant=\"outlined\" defaultValue={'50'}/>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={dragRight}> 向右调整</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={flip}> 视频左右翻转</Button>\r\n                </div>\r\n                <div className={classes.root}>\r\n                    <TextField id=\"command\" label=\"输入指令\" variant=\"outlined\" defaultValue={\"copy file////Mypassport/Storage/360video . /Y\"}/>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={sendCommand}> 发送指令</Button>\r\n                </div>\r\n                <div className={classes.root}>\r\n                    <TextField id=\"downloadfile\" label=\"文件名\" variant=\"outlined\" defaultValue={\"vr.webm\"}/>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={sendDownload}> 下载文件</Button>\r\n                </div>\r\n            </FormControl>\r\n        );\r\n\r\n\r\n\r\n}\r\n\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\city.js",["178","179","180","181","182","183","184","185","186","187","188","189"],"import React, { useState, useCallback, useEffect,Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { csv, scaleLinear, scaleOrdinal, max, format, extent } from 'd3';\r\nimport { useData } from './useData';\r\nimport { AxisBottom } from './AxisBottom';\r\nimport { AxisLeft } from './AxisLeft';\r\nimport { Marks } from './Marks';\r\nimport { ColorLegend } from './ColorLegend';\r\nimport * as d3 from 'd3'\r\nimport './city.css'\r\nconst width = 960;\r\nconst height = 500;\r\nconst margin = { top: 20, right: 200, bottom: 65, left: 90 };\r\nconst xAxisLabelOffset = 50;\r\nconst yAxisLabelOffset = 45;\r\nconst innerHeight = height - margin.top - margin.bottom;\r\nconst innerWidth = width - margin.left - margin.right;\r\nconst xAxisLabel = 'Satisfaction';\r\nconst yAxisLabel = 'Worthwhile';\r\nconst colorLegendLabel = 'Area';\r\nconst siFormat = format('.2s');\r\nconst xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');\r\nlet tmp=[];\r\nfunction getData() {\r\n\r\n    return new Promise(resolve => {\r\n        d3.csv('./happy.csv').then(d=>{\r\n            d.map((l,index)=>{\r\n                let pro=Object.getOwnPropertyNames(l);\r\n                // console.log(l['Area']);\r\n                pro.map((n,index)=>{\r\n                    if(index>1){\r\n                        if(tmp[n]===undefined){\r\n                            tmp[n]={}\r\n                        }\r\n                        if(tmp[n][l['Area']]===undefined){\r\n                            tmp[n][l['Area']]={};\r\n                        }\r\n                        tmp[n][l['Area']].happy=l[n];\r\n                    }\r\n                })\r\n                // l.map((t,i)=>{\r\n                //     if(i>1){\r\n                //         if(data[i]===undefined){\r\n                //             data[i]=[]\r\n                //         }\r\n                //         // data[i].happy=\r\n                //         console.log(Object.getOwnPropertyNames(t))\r\n                //     }\r\n                //\r\n                // })\r\n            })\r\n\r\n\r\n            d3.csv('./worthwhile.csv').then(d=>{\r\n                d.map((l,index)=>{\r\n                    let pro=Object.getOwnPropertyNames(l);\r\n                    pro.map((n,index)=>{\r\n                        if(index>1){\r\n                            if(tmp[n]===undefined){\r\n                                tmp[n]={}\r\n                            }\r\n                            if(tmp[n][l['Area']]===undefined){\r\n                                tmp[n][l['Area']]={};\r\n                            }\r\n                            tmp[n][l['Area']].worth=l[n];\r\n                        }\r\n                    })\r\n                })\r\n                console.log('data:',tmp)\r\n                resolve();\r\n            });\r\n\r\n        });\r\n    })\r\n\r\n\r\n}\r\n\r\nexport function City() {\r\n\r\n    // const [data, setData] = useState(null);\r\n    const data=useData();\r\n    // console.log('dataini:',data);\r\n    const [year,setYear]=useState(2011);\r\n    // useEffect(function init(){\r\n    //     console.log('start');\r\n    //     console.log('data2:',data);\r\n    //     if(data['2011/12']){\r\n    //         console.log('in');\r\n    //         let svg=d3.select('svg');\r\n    //         // console.log(svg);\r\n    //         let k=dataAt('2011/12');\r\n    //         console.log('k',k)\r\n    //         //这里并不能马上赋值成功，hook调用时异步的\r\n    //         // setCurrentData(k);\r\n    //         // console.log('currentData',currentData);\r\n    //         svg.selectAll('circle')\r\n    //             .data(k,d=>['city'])\r\n    //             .join('circle')\r\n    //             .attr(\"stroke\", \"black\")\r\n    //             .attr(\"r\", d =>{\r\n    //                 if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\r\n    //                 else return 5\r\n    //             })\r\n    //             .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\r\n    //                 console.log(d.data['happy'])\r\n    //                 return xScale(d.data['happy'])\r\n    //             }})\r\n    //             .attr(\"cy\", d => {if(d.data['worth']){\r\n    //                 return yScale(d.data['worth'])\r\n    //             }\r\n    //             })\r\n    //             .attr(\"fill\", d => 'blue');\r\n    //         setYear(2012)\r\n    //         console.log(year)\r\n    //     }\r\n    // },[data]);\r\n    // useEffect(function update() {\r\n    //\r\n    //         if(year){\r\n    //             let currentData=dataAt(year+'/'+(year-2000+1));\r\n    //             let svg=d3.select('svg');\r\n    //             let c=svg.selectAll(\"circle\")\r\n    //                 .data(currentData,d=>d['city'])\r\n    //                 .join('circle')\r\n    //                 .attr(\"stroke\", \"black\")\r\n    //                 .attr(\"r\", d =>{\r\n    //                     if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\r\n    //                     else return 5\r\n    //                 })\r\n    //                 .transition()\r\n    //                 // .on('end',function repeat(){\r\n    //                 //     console.log('end')\r\n    //                 // })\r\n    //                 .duration(1000)\r\n    //                 .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\r\n    //                     // console.log(d.data['happy'])\r\n    //                     return xScale(d.data['happy'])\r\n    //                 }})\r\n    //                 .attr(\"cy\", d => {if(d.data['worth']){\r\n    //                     return yScale(d.data['worth'])\r\n    //                 }\r\n    //                 })\r\n    //                 .attr(\"fill\", d => 'blue')\r\n    //                 .end();\r\n    //             c.then(result=>{\r\n    //                 if(year<2016){\r\n    //                     setYear(year+1)\r\n    //                     // updateCircle()\r\n    //                 }\r\n    //                 else {\r\n    //                     setYear(2011)\r\n    //                     // console.log('year:',year)\r\n    //                     // year=2011;\r\n    //                     // updateCircle()\r\n    //                 }\r\n    //                 console.log('done')\r\n    //             })\r\n    //         }\r\n    // },[year])\r\n    // function dataAt(year){\r\n    //     console.log('data:',data)\r\n    //     let results=[];\r\n    //     let pro=Object.getOwnPropertyNames(data[year]);\r\n    //     pro.forEach(d=>{\r\n    //         results.push({\r\n    //             city:d,\r\n    //             data:data[year][d],\r\n    //         })\r\n    //     })\r\n    //     return results\r\n    // }\r\n    // const [hoveredValue, setHoveredValue] = useState(null);\r\n    // if (!data) {\r\n    //     return <pre>Loading...</pre>;\r\n    // }\r\n    const xValue = d => d.data['happy'];\r\n    const yValue = d => d.data['worth'];\r\n    const colorValue = d => d.species;\r\n    const circleRadius = 7;\r\n\r\n\r\n    const xScale = scaleLinear()\r\n        // .domain(extent(data, xValue))\r\n        .domain([6.8,8.5])\r\n        .range([0, innerWidth])\r\n\r\n    const yScale = scaleLinear()\r\n        // .domain(extent(data, yValue))\r\n        .domain([8.5,6.8])\r\n        .range([0, innerHeight]);\r\n\r\n    const colorScale = scaleOrdinal()\r\n        .domain(['InnerLondon','OuterLondon'])\r\n        .range(['#E6842A', '#137B80']);\r\n\r\n    return (\r\n        <Fragment>\r\n            <b >time:<span id=\"Time\"></span>\r\n            </b>\r\n            <svg width={width} height={height}>\r\n                <g transform={`translate(${margin.left},${margin.top})`}>\r\n                    <AxisBottom\r\n                        xScale={xScale}\r\n                        innerHeight={innerHeight}\r\n                        tickFormat={xAxisTickFormat}\r\n                        tickOffset={5}\r\n                    />\r\n                    <text\r\n                        className=\"axis-label\"\r\n                        textAnchor=\"middle\"\r\n                        transform={`translate(${-yAxisLabelOffset},${innerHeight /\r\n                        2}) rotate(-90)`}\r\n                    >\r\n                        {yAxisLabel}\r\n                    </text>\r\n                    <AxisLeft yScale={yScale} innerWidth={innerWidth} tickOffset={5} />\r\n                    <text\r\n                        className=\"axis-label\"\r\n                        x={innerWidth / 2}\r\n                        y={innerHeight + xAxisLabelOffset}\r\n                        textAnchor=\"middle\"\r\n                    >\r\n                        {xAxisLabel}\r\n                    </text>\r\n                    <g transform={`translate(${innerWidth + 60}, 60)`}>\r\n                        <text x={35} y={-25} className=\"axis-label\" textAnchor=\"middle\">\r\n                            {colorLegendLabel}\r\n                        </text>\r\n                        <ColorLegend\r\n                            tickSpacing={22}\r\n                            tickSize={10}\r\n                            tickTextOffset={12}\r\n                            tickSize={circleRadius}\r\n                            colorScale={colorScale}\r\n                            // onHover={setHoveredValue}\r\n                            // hoveredValue={hoveredValue}\r\n                            // fadeOpacity={fadeOpacity}\r\n                        />\r\n                    </g>\r\n                    <g >\r\n                        <Marks\r\n                            data={data}//参数变了，组件就会自动刷新\r\n                            xScale={xScale}\r\n                            xValue={xValue}\r\n                            yScale={yScale}\r\n                            yValue={yValue}\r\n                            colorScale={colorScale}\r\n                            colorValue={colorValue}\r\n                            tooltipFormat={xAxisTickFormat}\r\n                            circleRadius={circleRadius}\r\n                            year={year}\r\n                            margin={margin}\r\n                            callback={()=>{\r\n                                if(year<2016){\r\n                                    setYear(year+1)\r\n                                }\r\n                                else{\r\n                                    setYear(2011)\r\n                                }\r\n                                document.getElementById('Time').innerHTML=year+'/'+(year-2000+1)\r\n\r\n                            }}\r\n                        />\r\n                    </g>\r\n                </g>\r\n            </svg>\r\n\r\n        </Fragment>\r\n\r\n    );\r\n};\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\routeMap.js",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253"],"// /// app.js\r\nimport React,{Fragment} from 'react';\r\nimport DeckGL from '@deck.gl/react';\r\nimport {TripsLayer} from '@deck.gl/geo-layers';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport * as d3 from 'd3'\r\nimport F2 from '@antv/f2';\r\nimport {WebMercatorViewport} from '@deck.gl/core';\r\nimport { Radar } from '@antv/g2plot';\r\nimport _ from 'lodash';\r\n//\r\n// // Set your mapbox access token here\r\n// const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\r\n//\r\n// // Initial viewport settings\r\n// const initialViewState = {\r\n//     longitude: -122.41669,\r\n//     latitude: 37.7853,\r\n//     zoom: 13,\r\n//     pitch: 0,\r\n//     bearing: 0\r\n// };\r\n//\r\n// // Data to be used by the LineLayer\r\n// const data = [   {\r\n//              waypoints: [{coordinates: [-122.3907988, 37.7664413], timestamp: 1554772579000},\r\n//                      {coordinates: [-122.3908298,37.7667706], timestamp: 1554772579010},\r\n//                      {coordinates: [-122.4485672, 37.8040182], timestamp: 1554772580200}\r\n//              ]\r\n//      }];\r\n//\r\n// class App extends React.Component {\r\n//     render() {\r\n//         const layers = [\r\n//             new TripsLayer({id: 'trips-layer', data,\r\n//                 getPath:d => d.waypoints.map(p => p.coordinates),\r\n//                 getTimestamps: d => d.waypoints.map(p => p.timestamp - 1554772579000),\r\n//                 getColor: [253, 128, 93],\r\n//                 opacity: 0.8,\r\n//                 widthMinPixels: 5,\r\n//                 rounded: true,\r\n//                 trailLength: 200,\r\n//                 currentTime: 0\r\n//\r\n//             })\r\n//         ];\r\n//\r\n//         return (\r\n//             <DeckGL\r\n//                 initialViewState={initialViewState}\r\n//                 controller={true}\r\n//                 layers={layers}\r\n//             >\r\n//                 <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\r\n//             </DeckGL>\r\n//         );\r\n//     }\r\n// }\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\nimport {Component} from 'react';\r\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\r\nimport {PathLayer,ColumnLayer, PolygonLayer,IconLayer,ScatterplotLayer,ArcLayer} from '@deck.gl/layers';\r\nimport SliderTraffic from \"./sliderTraffic\";\r\nimport { Select,SIZE } from \"baseui/select\";\r\nimport {BaseProvider, LightTheme, styled} from \"baseui\";\r\nimport {Client as Styletron} from 'styletron-engine-atomic';\r\nimport {Provider as StyletronProvider} from 'styletron-react';\r\nimport { SelectionLayer } from '@nebula.gl/layers';\r\nimport { EditableGeoJsonLayer} from 'nebula.gl';\r\nimport Charts from './charts/charts'\r\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\r\nimport Panel from \"./charts/panel\";\r\nimport { DrawPolygonMode } from \"@nebula.gl/edit-modes\";\r\nimport { Toolbox } from \"@nebula.gl/editor\";\r\nimport 'boxicons'\r\nimport {Bar, Pie, Area, Column} from '@antv/g2plot';\r\nimport { G2,Line } from '@antv/g2plot';\r\nimport {keys} from \"@material-ui/core/styles/createBreakpoints\";\r\n\r\n\r\n\r\nconst piedata=[\r\n    {type:'0-10',value:0},\r\n    {type:'10-20',value:0},\r\n    {type:'20-30',value:0},\r\n    {type:'30-40',value:0},\r\n    {type:'40-50',value:0},\r\n    {type:'50-60',value:0},\r\n    {type:'60-70',value:0},\r\n    {type:'70-80',value:0},\r\n    {type:'80-90',value:0},\r\n    {type:'90-100',value:0},\r\n    {type:'100-110',value:0},\r\n    {type:'110-120',value:0},\r\n    {type:'120+',value:0},\r\n\r\n    ];\r\n\r\n\r\nfunction getpie(){\r\n    return new Promise(resolve => {\r\n    Beijingdata.forEach(d=>{\r\n        if (d['value']>=0&&d['value']<10)piedata[0].value++;\r\n        else if(d['value']>=10&&d['value']<20)piedata[1].value++;\r\n        else if(d['value']>=20&&d['value']<30)piedata[2].value++;\r\n        else if(d['value']>=30&&d['value']<40)piedata[3].value++;\r\n        else if(d['value']>=40&&d['value']<50)piedata[4].value++;\r\n        else if(d['value']>=50&&d['value']<60)piedata[5].value++;\r\n        else if(d['value']>=60&&d['value']<70)piedata[6].value++;\r\n        else if(d['value']>=70&&d['value']<80)piedata[7].value++;\r\n        else if(d['value']>=80&&d['value']<90)piedata[8].value++;\r\n        else if(d['value']>=90&&d['value']<100)piedata[9].value++;\r\n        else if(d['value']>=100&&d['value']<110)piedata[10].value++;\r\n        else if(d['value']>=110&&d['value']<120)piedata[11].value++;\r\n        else if(d['value']>=120)piedata[12].value++;\r\n    });\r\n    resolve();\r\n    })\r\n}\r\n// import {\r\n//     Editor,\r\n//     EditingMode,\r\n//     DrawLineStringMode,\r\n//     DrawPolygonMode,\r\n// } from \"react-map-gl-draw\";\r\n\r\n\r\nconst background={\r\n    width: \"30%\",\r\n    margin: \"30px auto\",\r\n    backgroundColor: \"#FFFFFF\",\r\n        // [\"#FF895D\",\"#FF6836\",\"#F3470D\",\"#D13808\",\"#A4300C\",\"#7A270E\"],\r\n    minHeight: \"0px\",\r\n    boxSizing: \"border-box\",\r\n    position: \"fixed\",\r\n    // top: \"80%\",\r\n    bottom:\"10%\",\r\n    border:\"10px\",\r\n    dashed: \"#FF6836\",\r\n    opacity:1,\r\n    zIndex:1\r\n};\r\n\r\n\r\n\r\nconst SelectContainer=styled('div',{\r\n    position: 'absolute',\r\n    // display: 'flex',\r\n    // justifyContent: 'center',\r\n    // alignItems: 'center',\r\n    zIndex: 1,\r\n    top: '50px',\r\n    right:'10px',\r\n    width:'15%',\r\n    // height:'5%'\r\n});\r\nconst SelectContainer2=styled('div',{\r\n    position: 'absolute',\r\n    // display: 'flex',\r\n    // justifyContent: 'center',\r\n    // alignItems: 'center',\r\n    zIndex: 1,\r\n    top: '50px',\r\n    left:'10px',\r\n    width:'15%',\r\n    // height:'5%'\r\n});\r\n\r\nconst engine = new Styletron();\r\n// Set your mapbox token here\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\r\n\r\n//加载区域数据\r\nvar depData=[];\r\nvar depCenter=[];\r\nlet desCenter=[];\r\nlet desData=[];\r\nlet depPolygon=[];\r\nlet desPolygon=[];\r\n\r\nlet colorTable=[[128,255,0,255],[255,255,40,255],[255,128,0,255],[255,64,64,255],[255,0,0,255]];\r\nconst ICON_MAPPING = {\r\n    marker: {x: 0, y: 0, width: 32, height: 32, mask: true}\r\n};\r\n// Source data CSV\r\n// const DATA_URL = {\r\n//     BUILDINGS:\r\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\r\n//     TRIPS:\r\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/trips-v7.json' // eslint-disable-line\r\n// };\r\n\r\nconst ambientLight = new AmbientLight({\r\n    color: [255, 255, 255],\r\n    intensity: 1.0\r\n});\r\n\r\nconst pointLight = new PointLight({\r\n    color: [255, 255, 255],\r\n    intensity: 2.0,\r\n    position: [120.167057, 30.185901, 8000]\r\n});\r\n\r\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\r\n\r\nconst material = {\r\n    ambient: 0.1,\r\n    diffuse: 0.9,\r\n    shininess: 64,\r\n    specularColor: [60, 64, 70]\r\n};\r\nconst DEFAULT_THEME = {\r\n    buildingColor: [74, 80, 87],\r\n    trailColor0: [253, 128, 93],\r\n    trailColor1: [23, 184, 190],\r\n    material,\r\n    effects: [lightingEffect]\r\n};\r\nconst INITIAL_VIEW_STATE = {\r\n    longitude:  120.207057,\r\n    latitude: 30.225901,\r\n    // longitude:-74.00823,\r\n    // latitude: 40.71351,\r\n    zoom: 12.4,\r\n    pitch: 45,\r\n    bearing: 0\r\n};\r\n\r\n\r\nconst BEIJIN_VIEW_STATE ={\r\n    longitude:  116.39739990234375,\r\n    latitude: 39.915002988576155,\r\n    // longitude:-74.00823,\r\n    // latitude: 40.71351,\r\n    zoom: 12.4,\r\n    pitch: 45,\r\n    bearing: 0\r\n}\r\n//柱状图的颜色\r\nconst colorRange = [\r\n    [1, 152, 189],\r\n    [73, 227, 206],\r\n    [216, 254, 181],\r\n    [254, 237, 177],\r\n    [254, 173, 84],\r\n    [209, 55, 78]\r\n];\r\n// d3.json(\"https://api.openaq.org/v1/latest?limit=10000\").then(data=>{\r\n//     console.log(data)\r\n// })\r\nvar Routes=[];\r\nfunction Rad(d){\r\n    return d * Math.PI / 180.0;//经纬度转换成三角函数中度分表形式。\r\n}\r\n\r\n\r\nvar getDistance=function(lng1,lat1,lng2,lat2){\r\n    var radLat1 = Rad(lat1);\r\n    var radLat2 = Rad(lat2);\r\n    var a = radLat1 - radLat2;\r\n    var  b = Rad(lng1) - Rad(lng2);\r\n    var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a/2),2) +\r\n        Math.cos(radLat1)*Math.cos(radLat2)*Math.pow(Math.sin(b/2),2)));\r\n    s = s *6378.137 ;// EARTH_RADIUS;\r\n    s = Math.round(s * 10000) / 10000; //输出为公里\r\n    //s=s.toFixed(4);\r\n    return s;\r\n};\r\n\r\n// var od=[];\r\n\r\nfunction getRouteByTime(time){\r\n    let data=[];\r\n    d3.json(\"http://10.72.100.14:8888/query/\"+time).then(d=>{\r\n            let pAll=[];\r\n            d.map((dd,index)=>{\r\n                setInterval(index*10);\r\n                pAll.push(new Promise((resolve,reject)=>{\r\n                    var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + dd[3] + ',' + dd[4] + ';' + dd[5] + ',' + dd[6] + '?steps=true&geometries=geojson&access_token=' + 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\r\n                    var req = new XMLHttpRequest();\r\n                    req.open('GET', url, true);\r\n                    req.send();\r\n                    req.onload=function () {\r\n                        var json = JSON.parse(req.response);\r\n                        data.push(json);\r\n                        console.log('oneRoute:',json);\r\n                        resolve()\r\n                    };\r\n                    req.ontimeout=function () {\r\n                        reject()\r\n                    }\r\n                }))\r\n\r\n            })\r\n            Promise.all(pAll).then(()=>{\r\n                // console.log('queryroute:',data)\r\n                console.log(JSON.stringify(data))\r\n\r\n            },()=>{\r\n                // console.log('queryroute:',data)\r\n                console.log(JSON.stringify(data))\r\n\r\n            })\r\n    });\r\n\r\n    setTimeout(()=>{\r\n        console.log(JSON.stringify(data))\r\n    },70000)\r\n}\r\n\r\nfunction gerRouteByPoint(start,end){\r\n\r\n}\r\n\r\n// getRouteByTime(1584);\r\n\r\n\r\nvar getRoutedata=function(start,end) {\r\n\r\n    var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[start][0] + ',' + depCenter[start][1] + ';' + desCenter[end][0] + ',' + desCenter[end][1] + '?steps=true&geometries=geojson&access_token=' + 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\r\n\r\n    // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\r\n    var req = new XMLHttpRequest();\r\n    req.open('GET', url, true);\r\n    req.send();\r\n    req.onload = function () {\r\n        var json = JSON.parse(req.response);\r\n        // console.log('route:',json)\r\n        var data = json.routes[0];\r\n        var route = data.geometry.coordinates;\r\n        var timestamps=[0];//先设置每条路径1000stamp\r\n        for(var i=0;i<route.length;i++){\r\n            if(i!==0){\r\n                var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n                timestamps.push(dist+timestamps[i-1])\r\n            }\r\n        }\r\n        var geojson = {\r\n            'path': route,\r\n            'timestamps':timestamps,\r\n        };\r\n        console.log(geojson);\r\n        Routes.push(geojson)\r\n\r\n    }\r\n};\r\n//getRoutedata([120.167057,30.185901], [120.302548\t,30.399632])\r\n// var getRoute=new function(time) {\r\n//     // var gets = [];\r\n//     d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\r\n//\r\n//         let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\r\n//         console.log('data1:',data)\r\n//         data.forEach(d=>{\r\n//             let tmp=d.value.match(re)\r\n//             let tmpData=[];\r\n//             for(let i=0;i<tmp.length-1;i+=2){\r\n//                 tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\r\n//             }\r\n//             depData.push(tmpData)\r\n//         })\r\n//         depData.forEach(d=>{\r\n//             let sumlong=0\r\n//             let sumlat=0;\r\n//             d.forEach(data=>{\r\n//                 sumlong+=data[0];\r\n//                 sumlat+=data[1];\r\n//             })\r\n//             depCenter.push([sumlong/d.length,sumlat/d.length])\r\n//         })\r\n//         d3.csv(\"./edge_des_csv.csv\").then(function (data) {\r\n//             let re=/([-+]?[0-9]*\\.?[0-9]+)/g\r\n//             console.log('data2:',data)\r\n//             data.forEach(d=>{\r\n//                 let tmp=d.value.match(re)\r\n//                 let tmpData=[];\r\n//                 for(let i=0;i<tmp.length-1;i+=2){\r\n//                     tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\r\n//                 }\r\n//                 desData.push(tmpData)\r\n//             })\r\n//             desData.forEach(d=>{\r\n//                 let sumlong=0;\r\n//                 let sumlat=0;\r\n//                 d.forEach(data=>{\r\n//                     sumlong+=data[0];\r\n//                     sumlat+=data[1];\r\n//                 })\r\n//                 desCenter.push([sumlong/d.length,sumlat/d.length])\r\n//             });\r\n//             // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\r\n//             //     data.forEach(d=>{\r\n//             //         var tmp=d.split(',');\r\n//             //         if(tmp[0]!=-1 && tmp[1]!=-1) {\r\n//             //             if(tmp[0]>46&&tmp[0]<=60){\r\n//             //              //   if (tmp[2] !== '0') {\r\n//             //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\r\n//             //                 gets.push($.ajax({\r\n//             //                     type: 'GET',\r\n//             //                     url: urlNow,\r\n//             //                     success: function (r) {\r\n//             //                         console.log('r:', r)\r\n//             //                         //var json = JSON.parse(data);\r\n//             //                         var plan = r.routes[0];\r\n//             //                         var route = plan.geometry.coordinates;\r\n//             //                         var timestamps = [0];//先设置每条路径1000stamp\r\n//             //                         for (var i = 0; i < route.length; i++) {\r\n//             //                             if (i !== 0) {\r\n//             //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\r\n//             //                                 timestamps.push(dist + timestamps[i - 1])\r\n//             //                             }\r\n//             //                         }\r\n//             //                         var geojson = {\r\n//             //                             'vendor': 1,\r\n//             //                             'path': route,\r\n//             //                             'timestamps': timestamps,\r\n//             //\r\n//             //                         };\r\n//             //                         console.log(geojson)\r\n//             //                         Routes.push(geojson)\r\n//             //                         saveJson[tmp[0]+','+tmp[1]] = geojson\r\n//             //                     },\r\n//             //                     error:function(){\r\n//             //                         console.log('err')\r\n//             //                     }\r\n//             //                 }));\r\n//             //\r\n//             //            // }\r\n//             //             }\r\n//             //         }\r\n//             //     })\r\n//             //     // url.forEach(function(value) {\r\n//             //     //     console.log('url:',value)\r\n//             //     //     gets.push($.ajax({\r\n//             //     //         type: 'GET',\r\n//             //     //         url: value,\r\n//             //     //         success: function(data) {\r\n//             //     //             console.log('data:',data)\r\n//             //     //             //var json = JSON.parse(data);\r\n//             //     //             var plan = data.routes[0];\r\n//             //     //             var route = plan.geometry.coordinates;\r\n//             //     //             var timestamps=[0];//先设置每条路径1000stamp\r\n//             //     //             for(var i=0;i<route.length;i++){\r\n//             //     //                 if(i!==0){\r\n//             //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n//             //     //                     timestamps.push(dist+timestamps[i-1])\r\n//             //     //                 }\r\n//             //     //             }\r\n//             //     //             var geojson = {\r\n//             //     //                 'vendor':1,\r\n//             //     //                 'path': route,\r\n//             //     //                 'timestamps':timestamps,\r\n//             //     //\r\n//             //     //             };\r\n//             //     //             console.log(geojson)\r\n//             //     //             Routes.push(geojson)\r\n//             //     //\r\n//             //     //\r\n//             //     //         }\r\n//             //     //     }));\r\n//             //     // });\r\n//             //\r\n//             //     $.when.apply($, gets).then(function() {\r\n//             //         console.log(saveJson)\r\n//             //         var jsonData=JSON.stringify(saveJson)\r\n//             //         download(jsonData,'route.json','text/plain')\r\n//             //         console.log('Routes:',Routes)\r\n//             //         resolve(Routes);\r\n//             //         // resolve([\r\n//             //         //     {\r\n//             //         //         \"vendor\": 1,\r\n//             //         //         \"path\": [\r\n//             //         //             [120.167057,30.185901],\r\n//             //         //             [120.165752,30.185723],\r\n//             //         //             [120.16581,30.188491],\r\n//             //         //             [120.190417,30.198224],\r\n//             //         //             [120.191971\t,30.204],\r\n//             //         //             [120.189622\t,30.20767],\r\n//             //         //             [120.182369\t,30.218973],\r\n//             //         //             [120.180889\t,30.222601],\r\n//             //         //             [120.200108\t,30.306856],\r\n//             //         //             [120.23477\t,30.311914],\r\n//             //         //             [120.246959\t,30.316748],\r\n//             //         //             [120.309708\t,30.387518],\r\n//             //         //             [120.312426\t,30.39154],\r\n//             //         //             [120.309069\t,30.400897],\r\n//             //         //             [120.302548\t,30.399632],],\r\n//             //         //\r\n//             //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n//             //         //     }])\r\n//             //     });\r\n//             // })\r\n//\r\n//             d3.json('http://localhost:5000/data/'+time+':00:00').then(function(data){\r\n//                 var count=0;\r\n//                 d3.json('./10.json').then(function (map) {\r\n//                    // console.log('map:',map)\r\n//                     data.forEach(d=>{\r\n//                         var tmp=d.split(',');\r\n//                         if(tmp[0]!=-1 && tmp[1]!=-1) {\r\n//                             if(parseInt(tmp[2])>=5){\r\n//                                 count++;\r\n//                                 var key=tmp[0]+','+tmp[1];\r\n//                                 console.log(map[key]);\r\n//                                 Routes.push(map[key]);\r\n//                             }\r\n//                             // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\r\n//                                 //   if (tmp[2] !== '0') {\r\n//                                 // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\r\n//                                 // gets.push($.ajax({\r\n//                                 //     type: 'GET',\r\n//                                 //     url: urlNow,\r\n//                                 //     success: function (r) {\r\n//                                 //         console.log('r:', r)\r\n//                                 //         //var json = JSON.parse(data);\r\n//                                 //         var plan = r.routes[0];\r\n//                                 //         var route = plan.geometry.coordinates;\r\n//                                 //         var timestamps = [0];//先设置每条路径1000stamp\r\n//                                 //         for (var i = 0; i < route.length; i++) {\r\n//                                 //             if (i !== 0) {\r\n//                                 //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\r\n//                                 //                 timestamps.push(dist + timestamps[i - 1])\r\n//                                 //             }\r\n//                                 //         }\r\n//                                 //         var geojson = {\r\n//                                 //             'vendor': 1,\r\n//                                 //             'path': route,\r\n//                                 //             'timestamps': timestamps,\r\n//                                 //\r\n//                                 //         };\r\n//                                 //         console.log(geojson)\r\n//                                 //         Routes.push(geojson)\r\n//                                 //         saveJson[tmp[0]+','+tmp[1]] = geojson\r\n//                                 //     },\r\n//                                 //     error:function(){\r\n//                                 //         console.log('err')\r\n//                                 //     }\r\n//                                 // }));\r\n//\r\n//                                 // }\r\n//                            // }\r\n//                         }\r\n//                     })\r\n//                     console.log('count:',count)\r\n//                    // console.log(Routes)\r\n//                 })\r\n//                 // url.forEach(function(value) {\r\n//                 //     console.log('url:',value)\r\n//                 //     gets.push($.ajax({\r\n//                 //         type: 'GET',\r\n//                 //         url: value,\r\n//                 //         success: function(data) {\r\n//                 //             console.log('data:',data)\r\n//                 //             //var json = JSON.parse(data);\r\n//                 //             var plan = data.routes[0];\r\n//                 //             var route = plan.geometry.coordinates;\r\n//                 //             var timestamps=[0];//先设置每条路径1000stamp\r\n//                 //             for(var i=0;i<route.length;i++){\r\n//                 //                 if(i!==0){\r\n//                 //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n//                 //                     timestamps.push(dist+timestamps[i-1])\r\n//                 //                 }\r\n//                 //             }\r\n//                 //             var geojson = {\r\n//                 //                 'vendor':1,\r\n//                 //                 'path': route,\r\n//                 //                 'timestamps':timestamps,\r\n//                 //\r\n//                 //             };\r\n//                 //             console.log(geojson)\r\n//                 //             Routes.push(geojson)\r\n//                 //\r\n//                 //\r\n//                 //         }\r\n//                 //     }));\r\n//                 // });\r\n//\r\n//                 // $.when.apply($, gets).then(function() {\r\n//                 //     console.log(saveJson)\r\n//                 //     var jsonData=JSON.stringify(saveJson)\r\n//                 //     download(jsonData,'route.json','text/plain')\r\n//                 //     console.log('Routes:',Routes)\r\n//                 //     resolve(Routes);\r\n//                 //\r\n//                 // });\r\n//             })\r\n//         });\r\n//     });\r\n//\r\n// };\r\n//每条路径按流量加线的数量\r\nlet getStep=function(step,trip){\r\n    let newTrip=[];\r\n    trip.forEach(d=>{\r\n        d+=3600/step;\r\n        newTrip.push(d)\r\n    });\r\n    return newTrip;\r\n};\r\nfunction getArea(){\r\n    d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\r\n        let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\r\n        console.log('data1:', data)\r\n        data.forEach((d,index) => {\r\n            let tmp = d.value.match(re);\r\n            let tmpData = [];\r\n            for (let i = 0; i < tmp.length - 1; i += 2) {\r\n                tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])])\r\n            }\r\n            depData.push(tmpData)\r\n            depPolygon.push({\r\n                contour:tmpData,\r\n                in:0,\r\n                out:0,\r\n                number:index\r\n            })\r\n        });\r\n        depData.forEach(d => {\r\n            let sumlong = 0;\r\n            let sumlat = 0;\r\n            d.forEach(data => {\r\n                sumlong += data[0];\r\n                sumlat += data[1];\r\n            });\r\n            depCenter.push([sumlong / d.length, sumlat / d.length])\r\n        });\r\n        d3.csv(\"./edge_des_csv.csv\").then(function (data) {\r\n            let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\r\n            console.log('data2:', data);\r\n            data.forEach((d,index)=> {\r\n                let tmp = d.value.match(re);\r\n                let tmpData = [];\r\n                for (let i = 0; i < tmp.length - 1; i += 2) {\r\n                    tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])])\r\n                }\r\n                desData.push(tmpData)\r\n\r\n                desPolygon.push({\r\n                    contour:tmpData,\r\n                    in:0,\r\n                    out:0,\r\n                    number:index\r\n                })\r\n\r\n\r\n            });\r\n            desData.forEach(d => {\r\n                let sumlong = 0;\r\n                let sumlat = 0;\r\n                d.forEach(data => {\r\n                    sumlong += data[0];\r\n                    sumlat += data[1];\r\n                });\r\n                desCenter.push([sumlong / d.length, sumlat / d.length])\r\n            });\r\n        })\r\n})\r\n}\r\n//获取流量数据\r\nfunction getRoute(time) {\r\n    return new Promise(resolve => {\r\n        // var gets = [];\r\n        // d3.json('http://localhost:5000/data/'+time).then(function (data) {\r\n        d3.json('http://192.168.111.1:8888/data/'+time).then(function (data) {\r\n                var count = 0;\r\n            d3.json('./10.json').then(function (map) {\r\n                // console.log('map:',map)\r\n                var routeData=[];\r\n                var sumMax=0;\r\n                data.forEach(d => {\r\n                    var tmp = d.split(',');\r\n                    if (tmp[0] != -1 && tmp[1] != -1) {\r\n                        if (parseInt(tmp[2]) >= 2) {\r\n\r\n                            depPolygon[parseInt(tmp[0])].out+=parseInt(tmp[2]);\r\n                            desPolygon[parseInt(tmp[1])].in+=parseInt(tmp[2]);\r\n                            count++;\r\n                            var key = tmp[0] + ',' + tmp[1];\r\n                            //  console.log(map[key]);\r\n                            var pre=[];\r\n                            var sum=0;\r\n                            var countD=[];\r\n                            map[key].path.forEach(d=>{\r\n                                if(pre.length==0){\r\n                                    pre=d\r\n                                }\r\n                                else{\r\n                                    // console.log('pre:',pre);\r\n                                    var m=getDistance(pre[0],pre[1],d[0],d[1]);\r\n                                    countD.push(m);\r\n                                    sum+=m;\r\n                                    pre=d;\r\n                                }\r\n                            });\r\n                            if(sum>=sumMax){\r\n                                sumMax=sum\r\n                            }\r\n//control color\r\n                            if(parseInt(tmp[2]) >= 2&& parseInt(tmp[2]) < 5){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":0,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                                // console.log('path',map[key].path)\r\n                            }\r\n                            else if(parseInt(tmp[2]) >=5&&parseInt(tmp[2]) <20){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":1,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                            }\r\n                            else if(parseInt(tmp[2]) >=20&&parseInt(tmp[2]) <100){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":2,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                            }\r\n                            else if(parseInt(tmp[2]) >= 100&&parseInt(tmp[2]) <150){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":3,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                            }\r\n                            else if(parseInt(tmp[2]) >= 150){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":4,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                });\r\n                let newRoutes=[];\r\n                //按照流量多加动画效果\r\n                routeData.forEach(d=>{\r\n                    var tmpTime=[time*3600];\r\n                    let preIndex=0;\r\n                    // console.log('timestamps:',d.timestamps)\r\n                    d.timestamps.forEach(t=>{\r\n                        // console.log('t:',t)\r\n                        tmpTime.push(tmpTime[preIndex]+(3600/sumMax)*t)//加上当前已经过去的小时的时间\r\n                        preIndex++;\r\n                    });\r\n                    d.timestamps=tmpTime;\r\n                    let tmpStep=tmpTime;\r\n                    for(let i=0;i<(d.traffic);i++){\r\n                        tmpStep=getStep((d.traffic),tmpStep);\r\n                        newRoutes.push({\r\n                            'od':d.od,\r\n                            'traffic':d.traffic,\r\n                            \"color\":d.color,\r\n                            \"path\":d.path,\r\n                            \"timestamps\":tmpStep\r\n                        })\r\n                    }\r\n                });\r\n                newRoutes.forEach(d=>{\r\n                    routeData.push(d)\r\n                })\r\n                // routeData.forEach(d=>{\r\n                //     Routes.push(d)\r\n                // })\r\n                Routes=routeData;\r\n                console.log('count:', count);\r\n                console.log('Routes:', Routes);\r\n                resolve('0')\r\n                // console.log(Routes)\r\n            })\r\n\r\n        })\r\n\r\n    });\r\n}\r\n\r\nlet match_points=[];\r\nlet match_map={};\r\nfunction getMatchdata(){\r\n    return new Promise(resolve => {\r\n        d3.json('./match.json').then(d=>{\r\n            console.log(\"match\",d);\r\n            d.forEach(dd=>{\r\n                if(dd['code']===\"Ok\"){\r\n                    dd['tracepoints'].forEach(p=>{\r\n                        if(p!==null && !match_map.hasOwnProperty(p['location'])){\r\n                            //去除重复的点。\r\n                            match_map[p['location']]=1;\r\n                            match_points.push({coordinates:[parseFloat(p['location'][0]),parseFloat(p['location'][1])],value:15});\r\n                        }\r\n                    })\r\n                }\r\n            });\r\n            resolve();\r\n        })\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\nlet MCBAND = [12890594.86, 8362377.87, 5591021, 3481989.83, 1678043.12, 0];\r\n\r\n\r\nlet MC2LL = [\r\n    [1.410526172116255e-008, 8.983055096488720e-006, -1.99398338163310, 2.009824383106796e+002, -1.872403703815547e+002, 91.60875166698430, -23.38765649603339, 2.57121317296198, -0.03801003308653, 1.733798120000000e+007],\r\n    [-7.435856389565537e-009, 8.983055097726239e-006, -0.78625201886289, 96.32687599759846, -1.85204757529826, -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 1.026014486000000e+007],\r\n    [-3.030883460898826e-008, 8.983055099835780e-006, 0.30071316287616, 59.74293618442277, 7.35798407487100, -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475, 6.856817370000000e+006],\r\n    [-1.981981304930552e-008, 8.983055099779535e-006, 0.03278182852591, 40.31678527705744, 0.65659298677277, -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4.482777060000000e+006],\r\n    [3.091913710684370e-009, 8.983055096812155e-006, 0.00006995724062, 23.10934304144901, -0.00023663490511, -0.63218178102420, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2.555164400000000e+006],\r\n    [2.890871144776878e-009, 8.983055095805407e-006, -0.00000003068298, 7.47137025468032, -0.00000353937994, -0.02145144861037, -0.00001234426596, 0.00010322952773, -0.00000323890364, 8.260885000000000e+005],\r\n];\r\n\r\n\r\nlet bound=[12924083.26,4792883.01,12992448.86,4864389.46];\r\nfunction convertor(lng,lat,factor){\r\n    let x = factor[0] + factor[1] * Math.abs(lng)\r\n    let tmp = Math.abs(lat) / factor[9]\r\n    let y = factor[2]\r\n    for(let i=3;i<9;i++){\r\n        y += factor[i] * Math.pow(tmp, i-2);\r\n        x =  lng > 0?x: -x;\r\n        y = lat > 0?y: -y\r\n    }\r\n    return [x,y]\r\n}\r\n\r\nfunction mc2coordinate(x,y){\r\n    let factor = null;\r\n    MCBAND.map((index,value)=>{\r\n        if(y>value){\r\n            factor=MC2LL[index];\r\n        }\r\n    });\r\n    return convertor(x,y,factor);\r\n}\r\n\r\nfunction getBound(){\r\n    let min=mc2coordinate(bound[0],bound[1]);\r\n    let max=mc2coordinate(bound[2],bound[3]);\r\n    return [min,max];\r\n}\r\n\r\n\r\nlet root={};\r\nfunction Queue() {\r\n    let items = [];\r\n\r\n    // 向队列添加元素（一个或多个）\r\n    this.enqueue = function (element) {\r\n        if (element instanceof Array) items = items.concat(element);\r\n        else items.push(element);\r\n    };\r\n\r\n    // 从队列移除元素\r\n    this.dequeue = function () {\r\n        return items.shift();\r\n    };\r\n\r\n    // 返回队列中的第一个元素\r\n    this.front = function () {\r\n        return items[0];\r\n    };\r\n\r\n    // 判断队列是否为空\r\n    this.isEmpty = function () {\r\n        return items.length === 0;\r\n    };\r\n\r\n    // 返回队列的长度\r\n    this.size = function () {\r\n        return items.length;\r\n    };\r\n\r\n    // 清空队列\r\n    this.clear = function () {\r\n        items = [];\r\n    };\r\n\r\n    // 打印队列内的所有元素\r\n    this.print = function () {\r\n        console.log(items.toString());\r\n    };\r\n}\r\n\r\nfunction split(root,tag){\r\n    if(root['data'].length>tag){\r\n        let x1=root['bound'][0][0];\r\n        let y1=root['bound'][0][1];\r\n        let x2=root['bound'][1][0];\r\n        let y2=root['bound'][1][1];\r\n        let mid_vertical = (root['bound'][0][0]+root['bound'][1][0])/2;\r\n        let mid_horizontal = (root['bound'][0][1]+root['bound'][1][1])/2;\r\n        root['LU']={};\r\n        root['RU']={};\r\n        root['RD']={};\r\n        root['LD']={};\r\n\r\n        root['LU']['bound']=[[x1,mid_horizontal],[mid_vertical,y2]];\r\n        root['LD']['bound']=[[x1,y1],[mid_vertical,mid_horizontal]];\r\n        root['RU']['bound']=[[mid_vertical,mid_horizontal],[x2,y2]];\r\n        root['RD']['bound']=[[mid_vertical,y1],[x2,mid_horizontal]];\r\n\r\n\r\n        root['LD']['data']=[];\r\n        root['RU']['data']=[];\r\n        root['RD']['data']=[];\r\n        root['LU']['data']=[];\r\n        root['data'].forEach(d=>{\r\n            if(match_points[d].coordinates[0]<=mid_vertical){\r\n                if(match_points[d].coordinates[1]>mid_horizontal){\r\n                    root['LU']['data'].push(d);\r\n                }\r\n                else{\r\n                    root['LD']['data'].push(d);\r\n                }\r\n            }\r\n            else {\r\n                if(match_points[d].coordinates[1]>mid_horizontal){\r\n                    root['RU']['data'].push(d);\r\n                }\r\n                else{\r\n                    root['RD']['data'].push(d);\r\n                }\r\n            }\r\n        });\r\n\r\n        // split(root['LU'],tag);\r\n        // split(root['RU'],tag);\r\n        // split(root['RD'],tag);\r\n        // split(root['LD'],tag);\r\n    }\r\n}\r\n\r\n\r\nlet quardTree={}\r\n\r\nfunction getQuardTree(){\r\n   return new Promise(resolve=>{\r\n       d3.json('http://127.0.0.1:8888/quardTree').then((d)=>{\r\n           console.log('quard',d);\r\n           Object.keys(d).forEach(key=>{\r\n               quardTree[key]=d[key]\r\n           })\r\n           resolve();\r\n       })\r\n   })\r\n    //设置区域的上下左右\r\n}\r\n\r\n\r\nlet SpeedData=[];\r\n//获取time 时间点的所有道路点的速度信息\r\nfunction getBeijingSpeed(time){\r\n    SpeedData=[];\r\n    return new Promise(resolve => {\r\n        d3.json('http://10.72.100.14:8888/data/rootdata/'+time).then((data)=>{\r\n            console.log(data);\r\n            data.forEach(d=>{\r\n                SpeedData.push(d)\r\n            });\r\n            resolve();\r\n        });\r\n    })\r\n}\r\nlet pathlist=[];\r\n//获取速度信息对应的道路标号\r\nfunction getPathlist(){ //记录了速度数据集里面每个点的时间\r\n    pathlist=[];\r\n    return new Promise(resolve => {\r\n        d3.json('http://10.72.100.14:8888/data/pathlist').then((data)=>{\r\n            // console.log(data);\r\n            data.forEach(d=>{\r\n                pathlist.push(d)\r\n            });\r\n            resolve();\r\n        });\r\n    })\r\n}\r\n\r\nlet SpeedMap={};\r\nfunction getNodeSpeedMap(){\r\n    SpeedData.map((val,index)=>{\r\n        SpeedMap[pathlist[index]]=val;\r\n    })\r\n}\r\nlet point_speed={};\r\nfunction getPointSpeed(point_id){\r\n\r\n    return new Promise(resolve => {\r\n        if(!point_speed.hasOwnProperty(point_id)){\r\n            d3.json('http://10.72.100.14:8888/data/pointspeed/'+point_id).then((data)=>{\r\n                point_speed[point_id]=data;\r\n                resolve();\r\n            })\r\n        }\r\n        else resolve();\r\n    })\r\n\r\n}\r\n\r\nlet Real_match_map={};\r\n\r\nfunction getMatchMap(){\r\n    return new Promise(resolve => {\r\n        d3.json('http://127.0.0.1:8888/match_map').then((data)=>{\r\n            Object.keys(data).forEach(d=>{\r\n                Real_match_map[d]=data[d];\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\n//获取Beijing的所有道路信息\r\nlet Beijingdata=[];\r\nfunction getBeiJingData(){\r\n    Beijingdata=[];\r\n    return new Promise(resolve => {\r\n        d3.json('http://127.0.0.1:8888/road_data').then((data)=>{\r\n            // console.log(data)\r\n            data.forEach(d=>{\r\n\r\n                if(Real_match_map.hasOwnProperty(d['link_id'])){\r\n                    // console.log('real_match',Real_match_map);\r\n                    Beijingdata.push({'name': d['link_id'],'coordinates': [parseFloat(Real_match_map[d['link_id']][0]),parseFloat(Real_match_map[d['link_id']][1]),],'value':SpeedMap[d['link_id']]})\r\n\r\n                }\r\n                else Beijingdata.push({'name': d['link_id'],'coordinates': [parseFloat(d['node_lng'])-0.00622,parseFloat(d['node_lat'])-0.00142],'value':SpeedMap[d['link_id']]})\r\n            });\r\n            resolve();\r\n        });\r\n    })\r\n}\r\n//\r\nlet pos_map={};\r\nfunction getposmap(){\r\n    return new Promise(resolve => {\r\n        d3.json('http://127.0.0.1:8888/pos_map').then((data)=>{\r\n            Object.keys(data).forEach(key=>{\r\n                let point=[];\r\n                point.push(parseFloat(data[key][0])-0.00622);\r\n                point.push(parseFloat(data[key][1])-0.00142);\r\n                pos_map[key]=point;\r\n            });\r\n            resolve();\r\n        });\r\n    })\r\n}\r\nlet neighbordata=[];\r\nfunction getneighbor(){\r\n\r\n    return new Promise(resolve => {\r\n        d3.json('http://127.0.0.1:8888/path_data').then((data)=>{\r\n\r\n            data.forEach(d=>{\r\n                let path=[];\r\n                d.forEach(dd=>{\r\n                    path.push(pos_map[dd])\r\n                });\r\n                neighbordata.push({path:path})\r\n            });\r\n            console.log('neighbor',neighbordata);\r\n            resolve();\r\n        });\r\n    })\r\n}\r\n\r\nlet Grid=[];\r\nfunction QuardBound(node){\r\n    if(node){\r\n        Grid.push({\r\n            contour:[[parseFloat(node['bound'][0][0]),parseFloat(node['bound'][0][1])],[parseFloat(node['bound'][0][0]),parseFloat(node['bound'][1][1])],[parseFloat(node['bound'][1][0]),parseFloat(node['bound'][1][1])],[parseFloat(node['bound'][1][0]),parseFloat(node['bound'][0][1])]]\r\n        })\r\n        QuardBound(node['LU'])\r\n        QuardBound(node['RU'])\r\n        QuardBound(node['LD'])\r\n        QuardBound(node['RD'])\r\n    }\r\n\r\n}\r\n\r\nfunction  _formatTime(t){\r\n    return `2017年${4+Math.floor(t/43200)}月${Math.floor((t-Math.floor((t/43200))*43200)/1440)}日${Math.floor((t%1440)/60)}时${Math.floor(t%60)}分`;\r\n    // return `${Math.floor(t%60)}.${Math.floor((t%1440)/60)}.${Math.floor((t-Math.floor((t/43200))*43200)/1440)}.${4+Math.floor(t/43200)}.2017`\r\n}\r\n\r\nfunction _formatDayTime(t){\r\n    //月，日，时\r\n    return `${4+Math.floor(t/43200)}:${Math.floor((t-Math.floor((t/43200))*43200)/1440)}:${(Math.floor((t%1440)/60))%24}:${Math.floor(t%60)}`;\r\n}\r\n\r\n\r\n\r\nlet predict_origin=new Map();\r\nlet predict_des=new Map();\r\n//获取预测流量数据\r\nfunction getPredictData(){\r\n    return new Promise( resolve => {\r\n        d3.csv('./Traffic_Predict_Data/prediction1-origin.csv').then(d=>{\r\n            d.map((x,index)=>{\r\n                // console.log('time',x.DepTime);\r\n                let date=new Date(x.DepTime);\r\n                // console.log('hour',date.getHours())\r\n                let hour=date.getHours();\r\n                if(!predict_origin.has(hour)){\r\n                    predict_origin.set(hour,{})\r\n                }\r\n                let tmp=predict_origin.get(hour)\r\n                tmp[x.Origin]=x.Trips\r\n            })\r\n            d3.csv('./Traffic_Predict_Data/prediction2-dep.csv').then(d=>{d.map((x,index)=>{\r\n                let date=new Date(x.DepTime);\r\n                // console.log('hour',date.getHours())\r\n                let hour=date.getHours();\r\n                    if(!predict_des.has(hour)){\r\n                        predict_des.set(hour,{})\r\n                    }\r\n                    let tmp=predict_des.get(hour)\r\n                        tmp[x.Destination]=x.Trips;\r\n                    });\r\n                resolve();\r\n                }\r\n            )\r\n            }\r\n        )\r\n    })\r\n}\r\nlet realOrg=new Map();\r\nlet realDes=new Map();\r\n//获取真实流量数据\r\nfunction getRealData(){\r\n    d3.csv('./Traffic_Predict_Data/origin.csv').then(d=>{\r\n            d.map((x,index)=>{\r\n                // console.log('time',x.DepTime);\r\n                let date=new Date(x.DepTime);\r\n                // console.log('hour',date.getHours())\r\n                let hour=date.getHours();\r\n                if(!realOrg.has(hour)){\r\n                    realOrg.set(hour,{})\r\n                }\r\n                let tmp=realOrg.get(hour)\r\n                tmp[x.Origin]=x.Trips\r\n            })\r\n            d3.csv('./Traffic_Predict_Data/destination.csv').then(d=>{d.map((x,index)=>{\r\n                    let date=new Date(x.DepTime);\r\n                    // console.log('hour',date.getHours())\r\n                    let hour=date.getHours();\r\n                    if(!realDes.has(hour)){\r\n                        realDes.set(hour,{})\r\n                    }\r\n                    let tmp=realDes.get(hour)\r\n                    tmp[x.Destination]=x.Trips;\r\n                });\r\n                }\r\n            )\r\n        }\r\n    )\r\n}\r\nlet blockRoute=[];\r\nlet count=[];\r\nlet blockData=new Map();\r\nfunction getBlockData(){\r\n    d3.csv('./blockdetect/anomalyFile.csv').then(d=>{\r\n        d.map(x=>{\r\n            console.log(x)\r\n            console.log(x['occurencingTime'])\r\n            let da=new Date(x['occurencingTime']);\r\n            console.log('da',da)\r\n            let h=da.getHours();\r\n            let m=da.getMinutes();\r\n            let s=da.getSeconds();\r\n            let t=h*3600+m*60+s;\r\n            blockData.set(t,[parseFloat(x['longitude']),parseFloat(x['latitude'])])\r\n        })\r\n        console.log(blockData)\r\n    })\r\n}\r\nfunction getBlockRoute(){\r\n    return new Promise(resolve => {\r\n        d3.csv('./blockdetect/GPS_588_merge.csv').then(d=>{\r\n            console.log(d);\r\n            let path=[];\r\n            let timestamps=[];\r\n            let m=0;\r\n            d.map((x,index)=>{\r\n                // console.log('x',x);\r\n                // console.log('lat',x.lat)\r\n                let da=new Date(x['date']);\r\n                let h=da.getHours();\r\n                let m=da.getMinutes();\r\n                let s=da.getSeconds();\r\n                let t=h*3600+m*60+s;\r\n                if(count.indexOf(t)===-1&&m%5===0){\r\n                    m++;\r\n                    count.push(t);\r\n                    timestamps.push(t);\r\n                    path.push([parseFloat(x['Long']),parseFloat(x['Lat'])])\r\n                    if(m%1===0){\r\n                        blockData.set(t,[parseFloat(x['Long']),parseFloat(x['Lat'])])\r\n\r\n                    }\r\n                }\r\n            })\r\n            blockRoute.push({\r\n                path:path,\r\n                timestamps:timestamps,\r\n                color:0\r\n            })\r\n\r\n\r\n            resolve();\r\n        })\r\n\r\n    })\r\n\r\n\r\n}\r\n//设置预测流量数据\r\nfunction setPredictData(hour){\r\n    console.log('org',predict_origin);\r\n    let data=[];\r\n    let tmp=predict_origin.get(parseInt(hour));\r\n    console.log('tmp',tmp)\r\n    for(let key in tmp){\r\n        // console.log('key',key)\r\n        data.push({\r\n            centroid: depCenter[parseInt(key)],\r\n            value:tmp[key]\r\n        })\r\n    }\r\n    return data;\r\n}\r\n//设置实际流量数据\r\nfunction setRealData(hour){\r\n    // console.log('org',predict_origin)\r\n    let data=[];\r\n    let tmp=realOrg.get(parseInt(hour));\r\n    console.log('tmp',tmp);\r\n    for(let key in tmp){\r\n        // console.log('key',key)\r\n        data.push({\r\n            centroid: depCenter[parseInt(key)],\r\n            value:tmp[key]\r\n        })\r\n    }\r\n    console.log('data',data);\r\n    return data;\r\n\r\n}\r\n// getRoute.then(function () {\r\n//     console.log('get')\r\n// });\r\nlet tmpIcon=[];\r\n//nebula 尝试\r\nconst features = {\r\n    type: 'FeatureCollection',\r\n    features: [\r\n    ],\r\n};\r\nconst selectedFeatureIndexes = [];\r\n\r\n\r\n//记录折线图的总时长\r\nlet time_interval = 100;//两天的时长\r\nlet heatmap_interval=672;//七天的数据\r\n\r\nlet area_interval=48;//一天的时长\r\n\r\n//河流图\r\n\r\n//获取请求数据\r\nlet queryData=[]\r\nfunction getQueryData(time){\r\n    return new Promise(resolve => {\r\n        d3.json('http://10.72.100.14:8888/query/'+time).then(d=>{\r\n            d.forEach(dd=>{\r\n                queryData.push({\r\n                    inbound: 72,\r\n                    outbound: 74,\r\n                    from:{\r\n                        coordinates:[parseFloat(dd[3]),parseFloat(dd[4])]\r\n                    },\r\n                    to:{\r\n                        coordinates:[parseFloat(dd[5]),parseFloat(dd[6])]\r\n                    }\r\n                });\r\n            });\r\n            resolve();\r\n        })\r\n    })\r\n}\r\n\r\n//\r\nlet newDayquery=[];\r\nfunction getQueryDataforArea(time){\r\n    return new Promise(resolve => {\r\n        d3.json('http://10.72.100.14:8888/query/'+(time/15)).then(d=>{\r\n            d.forEach(dd=>{\r\n                let s=_formatDayTime(time);\r\n                let ss=s.split(':');\r\n                newDayquery.push({\r\n                    time:ss[2],\r\n                    from:{coordinates:[parseFloat(dd[3]),parseFloat(dd[4])]},\r\n                    to:{coordinates:[parseFloat(dd[5]),parseFloat(dd[6])]},\r\n                })//是小时\r\n            });\r\n            resolve();\r\n        })\r\n    })\r\n}\r\n\r\n\r\nlet onepathdata=[];\r\nfunction getOnePath(start,end){\r\n    return new Promise(resolve => {\r\n        let urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0]+ ',' + start[1] + ';' + end[0]+ ',' + end[1]  + '?steps=true&geometries=geojson&access_token=' + \"pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJja21haDcxY3Axcmg2MnhrbmZqdHVraXlrIn0.5Yy3Rgb1I1vohpAjeMKUVw\";\r\n        d3.json(urlNow).then((d)=>{\r\n            onepathdata.push({\r\n                path:d.routes[0].geometry.coordinates,\r\n                color:\"f88c24\"\r\n            });\r\n            console.log('Onepathdata:',onepathdata);\r\n            resolve();\r\n        })\r\n    })\r\n}\r\nfunction getDrivePath(start,end){\r\n    return new Promise(resolve => {\r\n        let urlDrive = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + start[0]+ ',' + start[1] + ';' + end[0]+ ',' + end[1]  + '?steps=true&geometries=geojson&access_token=' + \"pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJja21haDcxY3Axcmg2MnhrbmZqdHVraXlrIn0.5Yy3Rgb1I1vohpAjeMKUVw\";\r\n        d3.json(urlDrive).then((d)=>{\r\n            onepathdata.push({\r\n                path:d.routes[0].geometry.coordinates,\r\n                color:'1ca9e6'\r\n            });\r\n            console.log('Onepathdata:',onepathdata);\r\n            resolve();\r\n        })\r\n\r\n    })\r\n}\r\n\r\n\r\nexport default class RouteMap extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n         // const [value, setValue] = React.useState([0]);\r\n        this.state = {\r\n            time: 54000,\r\n            hour:-1,\r\n            depV:false,\r\n            desV:false,\r\n            area:[],\r\n            options:[],\r\n            block:false,\r\n            pre_org:[],\r\n            pre_des:[],\r\n            real_org:[],\r\n            real:false,\r\n            showPredict:true,\r\n            blockIcon:[],\r\n            showRoute:true,\r\n            modeId: null,\r\n            modeHandler: null,\r\n            //editlayer 数据\r\n            features: features,\r\n            modeConfig:{},\r\n            mode: DrawPolygonMode,\r\n            ODTag: 3,\r\n            Beijing: [],\r\n            selectedFeatureIndexes: [], //\r\n            BeijingSpeedData:[],\r\n            Quater:-1,\r\n            //记录在一个多边形内的点，二维数组\r\n            inPoints:[],\r\n            //记录点的速度\r\n            pointData:[],\r\n            //让表格只渲染一次\r\n            showTag:0,\r\n            piedata:[],\r\n            //区域内速度点河流图数据\r\n            streamData:[],\r\n            avarageData:[],\r\n            match_data:[],\r\n            Grid:[],\r\n            ToolTag:0,\r\n            heatdata:[],\r\n            arcData:[],\r\n            querySearchData:[],\r\n            raidData:[],\r\n            A2BAreaData:[],\r\n            onePath:[],\r\n            moduleTag:0,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        getArea();\r\n        let p = getPredictData();\r\n        p.then(function () {\r\n            // this.setState({\r\n            //     pre_origin: predict_origin,\r\n            //     pre_des : predict_des\r\n            // })\r\n        }.bind(this))\r\n\r\n        getRealData();\r\n\r\n        let p2 = getBlockRoute();\r\n        p2.then(function () {\r\n            console.log('blockRoute', blockRoute);\r\n            this.setState({\r\n                blockRoute: blockRoute\r\n            })\r\n        }.bind(this));\r\n        let button = document.getElementById('start');\r\n        console.log(button);\r\n        // setTimeout(()=>{button.click()},1200);\r\n\r\n        let p4 = getBeijingSpeed(1800);\r\n        let p_getMatchmap=getMatchMap();\r\n        p_getMatchmap.then(function(){\r\n            p4.then(function () {\r\n                let p5 = getPathlist();\r\n                p5.then(function () {\r\n                    getNodeSpeedMap();\r\n                    let p3 = getBeiJingData();\r\n                    p3.then(function () {\r\n                        // console.log('beijing',Beijingdata);\r\n                        this.setState({\r\n                            BeijingSpeedData: Beijingdata\r\n                        })\r\n                        let pp = getpie();\r\n                        pp.then(function () {\r\n                            this.setState({\r\n                                piedata: piedata\r\n                            })\r\n                            // let pie = new Pie('pie', {\r\n                            //     appendPadding: 10,\r\n                            //     data: this.state.piedata,\r\n                            //     angleField: 'value',\r\n                            //     colorField: 'type',\r\n                            //     radius: 1,\r\n                            //     innerRadius: 0.64,\r\n                            //\r\n                            //     label: {\r\n                            //         type: 'inner',\r\n                            //         offset: '-50%',\r\n                            //         autoRotate: false,\r\n                            //         style: { textAlign: 'center' },\r\n                            //         formatter: ({ percent }) => `${(percent * 100).toFixed(0)}%`,\r\n                            //     },\r\n                            //     statistic: {\r\n                            //         title: {\r\n                            //             offsetY: -8,\r\n                            //         },\r\n                            //         content: {\r\n                            //             offsetY: -4,\r\n                            //         },\r\n                            //     },\r\n                            // });\r\n                            // pie.render();\r\n                        }.bind(this));\r\n                    }.bind(this));\r\n                }.bind(this));\r\n            }.bind(this));\r\n        });\r\n\r\n\r\n        let p_match = getMatchdata();\r\n        p_match.then(function () {\r\n            this.setState({\r\n                match_data: match_points\r\n            })\r\n\r\n        }.bind(this));\r\n\r\n        let p_Quard = getQuardTree();\r\n        p_Quard.then(function () {\r\n            console.log('quardTrue',quardTree);\r\n\r\n            QuardBound(quardTree);\r\n\r\n            this.setState({\r\n                Grid:Grid\r\n            })\r\n        }.bind(this));\r\n\r\n        let time=this.state.time;\r\n        let promiseG=[];\r\n        for(let i=-area_interval;i<area_interval;i++){\r\n            if(time+i*15>=0 && time+i*15<87840 ){//\r\n                // console.log('speed:',Math.floor((time+i*15)/15));\r\n                promiseG.push(getQueryDataforArea(time+i*15));\r\n            }\r\n        }\r\n        Promise.all(promiseG).then(function(){\r\n            this.setState({\r\n                querySearchData:newDayquery\r\n            })\r\n        }.bind(this));\r\n        let p_getPath=getOnePath([116.44392013549806,\r\n            39.912205075917015],[\r\n            116.47885322570801,\r\n            39.93280820087599\r\n        ]);\r\n        let p_getDrive=getDrivePath([116.44392013549806,\r\n            39.912205075917015],[\r\n            116.47885322570801,\r\n            39.93280820087599\r\n        ]);\r\n        Promise.all([p_getPath,p_getDrive]).then(\r\n            function (){\r\n                this.setState({\r\n                    onePath:onepathdata\r\n                })\r\n            }.bind(this)\r\n        )\r\n    }\r\n\r\n\r\n\r\n        // const editlayer=new EditableGeoJsonLayer({\r\n        //     id: 'editlayer',\r\n        //     data: this.state.features,\r\n        //     mode: this.state.mode,\r\n        //     selectedFeatureIndexes,\r\n        //     onEdit: ({ updatedData }) => {\r\n        //         this.setState({\r\n        //             data: updatedData,\r\n        //         });\r\n        //     }\r\n        // });\r\n        // getBlockData();\r\n\r\n        // this.setState({\r\n        //     depPolygon:depPolygon,\r\n        //     desPolygon:desPolygon\r\n        // })\r\n\r\n    componentWillUnmount() {\r\n        // if (this._animationFrame) {\r\n        //     window.cancelAnimationFrame(this._animationFrame);\r\n        // }\r\n    }\r\n//get route from mapbox\r\n    getRoute(){\r\n        d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\r\n            let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\r\n            console.log('data1:',data)\r\n            data.forEach(d=>{\r\n                let tmp=d.value.match(re)\r\n                let tmpData=[];\r\n                for(let i=0;i<tmp.length-1;i+=2){\r\n                    tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\r\n                }\r\n                depData.push(tmpData)\r\n            })\r\n            depData.forEach(d=>{\r\n                let sumlong=0\r\n                let sumlat=0;\r\n                d.forEach(data=>{\r\n                    sumlong+=data[0];\r\n                    sumlat+=data[1];\r\n                })\r\n                depCenter.push([sumlong/d.length,sumlat/d.length])\r\n            })\r\n            d3.csv(\"./edge_des_csv.csv\").then(function (data) {\r\n                let re=/([-+]?[0-9]*\\.?[0-9]+)/g\r\n                console.log('data2:',data)\r\n                data.forEach(d=>{\r\n                    let tmp=d.value.match(re)\r\n                    let tmpData=[];\r\n                    for(let i=0;i<tmp.length-1;i+=2){\r\n                        tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\r\n                    }\r\n                    desData.push(tmpData)\r\n                })\r\n                desData.forEach(d=>{\r\n                    let sumlong=0;\r\n                    let sumlat=0;\r\n                    d.forEach(data=>{\r\n                        sumlong+=data[0];\r\n                        sumlat+=data[1];\r\n                    })\r\n                    desCenter.push([sumlong/d.length,sumlat/d.length])\r\n                });\r\n                // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\r\n                //     data.forEach(d=>{\r\n                //         var tmp=d.split(',');\r\n                //         if(tmp[0]!=-1 && tmp[1]!=-1) {\r\n                //             if(tmp[0]>46&&tmp[0]<=60){\r\n                //              //   if (tmp[2] !== '0') {\r\n                //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\r\n                //                 gets.push($.ajax({\r\n                //                     type: 'GET',\r\n                //                     url: urlNow,\r\n                //                     success: function (r) {\r\n                //                         console.log('r:', r)\r\n                //                         //var json = JSON.parse(data);\r\n                //                         var plan = r.routes[0];\r\n                //                         var route = plan.geometry.coordinates;\r\n                //                         var timestamps = [0];//先设置每条路径1000stamp\r\n                //                         for (var i = 0; i < route.length; i++) {\r\n                //                             if (i !== 0) {\r\n                //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\r\n                //                                 timestamps.push(dist + timestamps[i - 1])\r\n                //                             }\r\n                //                         }\r\n                //                         var geojson = {\r\n                //                             'vendor': 1,\r\n                //                             'path': route,\r\n                //                             'timestamps': timestamps,\r\n                //\r\n                //                         };\r\n                //                         console.log(geojson)\r\n                //                         Routes.push(geojson)\r\n                //                         saveJson[tmp[0]+','+tmp[1]] = geojson\r\n                //                     },\r\n                //                     error:function(){\r\n                //                         console.log('err')\r\n                //                     }\r\n                //                 }));\r\n                //\r\n                //            // }\r\n                //             }\r\n                //         }\r\n                //     })\r\n                //     // url.forEach(function(value) {\r\n                //     //     console.log('url:',value)\r\n                //     //     gets.push($.ajax({\r\n                //     //         type: 'GET',\r\n                //     //         url: value,\r\n                //     //         success: function(data) {\r\n                //     //             console.log('data:',data)\r\n                //     //             //var json = JSON.parse(data);\r\n                //     //             var plan = data.routes[0];\r\n                //     //             var route = plan.geometry.coordinates;\r\n                //     //             var timestamps=[0];//先设置每条路径1000stamp\r\n                //     //             for(var i=0;i<route.length;i++){\r\n                //     //                 if(i!==0){\r\n                //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n                //     //                     timestamps.push(dist+timestamps[i-1])\r\n                //     //                 }\r\n                //     //             }\r\n                //     //             var geojson = {\r\n                //     //                 'vendor':1,\r\n                //     //                 'path': route,\r\n                //     //                 'timestamps':timestamps,\r\n                //     //\r\n                //     //             };\r\n                //     //             console.log(geojson)\r\n                //     //             Routes.push(geojson)\r\n                //     //\r\n                //     //\r\n                //     //         }\r\n                //     //     }));\r\n                //     // });\r\n                //\r\n                //     $.when.apply($, gets).then(function() {\r\n                //         console.log(saveJson)\r\n                //         var jsonData=JSON.stringify(saveJson)\r\n                //         download(jsonData,'route.json','text/plain')\r\n                //         console.log('Routes:',Routes)\r\n                //         resolve(Routes);\r\n                //         // resolve([\r\n                //         //     {\r\n                //         //         \"vendor\": 1,\r\n                //         //         \"path\": [\r\n                //         //             [120.167057,30.185901],\r\n                //         //             [120.165752,30.185723],\r\n                //         //             [120.16581,30.188491],\r\n                //         //             [120.190417,30.198224],\r\n                //         //             [120.191971\t,30.204],\r\n                //         //             [120.189622\t,30.20767],\r\n                //         //             [120.182369\t,30.218973],\r\n                //         //             [120.180889\t,30.222601],\r\n                //         //             [120.200108\t,30.306856],\r\n                //         //             [120.23477\t,30.311914],\r\n                //         //             [120.246959\t,30.316748],\r\n                //         //             [120.309708\t,30.387518],\r\n                //         //             [120.312426\t,30.39154],\r\n                //         //             [120.309069\t,30.400897],\r\n                //         //             [120.302548\t,30.399632],],\r\n                //         //\r\n                //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n                //         //     }])\r\n                //     });\r\n                // })\r\n\r\n                d3.json('http://localhost:5000/data/0:00:00').then(function(data){\r\n                    var count=0;\r\n                    d3.json('./10.json').then(function (map) {\r\n                        // console.log('map:',map)\r\n                        data.forEach(d=>{\r\n                            var tmp=d.split(',');\r\n                            if(tmp[0]!=-1 && tmp[1]!=-1) {\r\n                                if(parseInt(tmp[2])>=5){\r\n                                    count++;\r\n                                    var key=tmp[0]+','+tmp[1];\r\n                                    console.log(map[key]);\r\n                                    Routes.push(map[key]);\r\n                                }\r\n                                // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\r\n                                //   if (tmp[2] !== '0') {\r\n                                // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\r\n                                // gets.push($.ajax({\r\n                                //     type: 'GET',\r\n                                //     url: urlNow,\r\n                                //     success: function (r) {\r\n                                //         console.log('r:', r)\r\n                                //         //var json = JSON.parse(data);\r\n                                //         var plan = r.routes[0];\r\n                                //         var route = plan.geometry.coordinates;\r\n                                //         var timestamps = [0];//先设置每条路径1000stamp\r\n                                //         for (var i = 0; i < route.length; i++) {\r\n                                //             if (i !== 0) {\r\n                                //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\r\n                                //                 timestamps.push(dist + timestamps[i - 1])\r\n                                //             }\r\n                                //         }\r\n                                //         var geojson = {\r\n                                //             'vendor': 1,\r\n                                //             'path': route,\r\n                                //             'timestamps': timestamps,\r\n                                //\r\n                                //         };\r\n                                //         console.log(geojson)\r\n                                //         Routes.push(geojson)\r\n                                //         saveJson[tmp[0]+','+tmp[1]] = geojson\r\n                                //     },\r\n                                //     error:function(){\r\n                                //         console.log('err')\r\n                                //     }\r\n                                // }));\r\n\r\n                                // }\r\n                                // }\r\n                            }\r\n                        })\r\n                        console.log('count:',count)\r\n                        this.layers[1].setData(Routes)\r\n                        // resolve(Routes);\r\n                        // console.log(Routes)\r\n                    })\r\n\r\n                    // url.forEach(function(value) {\r\n                    //     console.log('url:',value)\r\n                    //     gets.push($.ajax({\r\n                    //         type: 'GET',\r\n                    //         url: value,\r\n                    //         success: function(data) {\r\n                    //             console.log('data:',data)\r\n                    //             //var json = JSON.parse(data);\r\n                    //             var plan = data.routes[0];\r\n                    //             var route = plan.geometry.coordinates;\r\n                    //             var timestamps=[0];//先设置每条路径1000stamp\r\n                    //             for(var i=0;i<route.length;i++){\r\n                    //                 if(i!==0){\r\n                    //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n                    //                     timestamps.push(dist+timestamps[i-1])\r\n                    //                 }\r\n                    //             }\r\n                    //             var geojson = {\r\n                    //                 'vendor':1,\r\n                    //                 'path': route,\r\n                    //                 'timestamps':timestamps,\r\n                    //\r\n                    //             };\r\n                    //             console.log(geojson)\r\n                    //             Routes.push(geojson)\r\n                    //\r\n                    //\r\n                    //         }\r\n                    //     }));\r\n                    // });\r\n\r\n                    // $.when.apply($, gets).then(function() {\r\n                    //     console.log(saveJson)\r\n                    //     var jsonData=JSON.stringify(saveJson)\r\n                    //     download(jsonData,'route.json','text/plain')\r\n                    //     console.log('Routes:',Routes)\r\n                    //     resolve(Routes);\r\n                    //     // resolve([\r\n                    //     //     {\r\n                    //     //         \"vendor\": 1,\r\n                    //     //         \"path\": [\r\n                    //     //             [120.167057,30.185901],\r\n                    //     //             [120.165752,30.185723],\r\n                    //     //             [120.16581,30.188491],\r\n                    //     //             [120.190417,30.198224],\r\n                    //     //             [120.191971\t,30.204],\r\n                    //     //             [120.189622\t,30.20767],\r\n                    //     //             [120.182369\t,30.218973],\r\n                    //     //             [120.180889\t,30.222601],\r\n                    //     //             [120.200108\t,30.306856],\r\n                    //     //             [120.23477\t,30.311914],\r\n                    //     //             [120.246959\t,30.316748],\r\n                    //     //             [120.309708\t,30.387518],\r\n                    //     //             [120.312426\t,30.39154],\r\n                    //     //             [120.309069\t,30.400897],\r\n                    //     //             [120.302548\t,30.399632],],\r\n                    //     //\r\n                    //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n                    //     //     }])\r\n                    // });\r\n                })\r\n            });\r\n        });\r\n    }\r\n//routeTip\r\n//     _renderTooltip() {\r\n//         const {hoveredObject, pointerX, pointerY} = this.state || {};\r\n//         return hoveredObject && (\r\n//             <div className=\"tooltip\" style={{color:'#ffffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX, top: pointerY}}>\r\n//                 <div>\r\n//                     <b>O-D: </b>\r\n//                     <span>{hoveredObject.od}</span>\r\n//                 </div>\r\n//                 <div>\r\n//                     <b>Traffic: </b>\r\n//                     <span>{hoveredObject.traffic}</span>\r\n//                 </div>\r\n//\r\n//             </div>\r\n//\r\n//         );\r\n//     }\r\n//areaTipDep\r\n    _renderTooltipDep() {\r\n        const { depObject,  depX,  depY} = this.state || {};\r\n        return depObject && (\r\n            <div className=\"tooltip\" style={{color:'#00ffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: depX, top: depY}}>\r\n                <div>\r\n                    <b>区域 id: </b>\r\n                    <span>{depObject.number}</span>\r\n                </div>\r\n                <div>\r\n                    <b>驶出流量: </b>\r\n                    <span>{depObject.out}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    //areaTipDes\r\n    _renderTooltipDes() {\r\n        const { desObject, desX, desY} = this.state || {};\r\n        return desObject && (\r\n            <div className=\"tooltip\" style={{color:'#00ffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: desX, top: desY}}>\r\n                <div>\r\n                    <b>区域: </b>\r\n                    <span>{desObject.number}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <b>驶入流量: </b>\r\n                    <span>{desObject.in}</span>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    // _renderDrawSelectBar=()=>{\r\n    //     return (\r\n    //         {/*<div*/}\r\n    //         {/*    style={{ position: \"absolute\", top: 0, right: 0, maxWidth: \"320px\" }}*/}\r\n    //         {/*>*/}\r\n    //         {/*    <select onChange={this._switchMode}>*/}\r\n    //         {/*        <option value=\"\">--Please choose a draw mode--</option>*/}\r\n    //         {/*        {MODES.map((mode) => (*/}\r\n    //         {/*            <option key={mode.id} value={mode.id}>*/}\r\n    //         {/*                {mode.text}*/}\r\n    //         {/*            </option>*/}\r\n    //         {/*        ))}*/}\r\n    //         {/*    </select>*/}\r\n    //         {/*</div>*/}\r\n    //     );\r\n    // };\r\n    _getPredictData(){\r\n        if(this.state.showPredict){\r\n            return this.state.real?this.state.real_org:this.state.pre_org\r\n        }\r\n        else return [{\r\n            centroid: [0,0],\r\n            value:[0,0]\r\n        }]\r\n    }\r\n    // _switchMode = (evt) => {\r\n    //     const modeId =\r\n    //         evt.target.value === this.state.modeId ? null : evt.target.value;\r\n    //     const mode = MODES.find((m) => m.id === modeId);\r\n    //     const modeHandler = mode ? new mode.handler() : null;\r\n    //     this.setState({ modeId, modeHandler });\r\n    // };\r\n\r\n    //转换字符串\r\n    _hex2rgb(hex) {\r\n        const value = parseInt(hex, 16);\r\n        return [16, 8, 0].map((shift) => ((value >> shift) & 0xff) / 255);\r\n    }\r\n    _getDeckColorForFeature(str, bright, alpha) {\r\n        let s=this._hex2rgb(str);\r\n        console.log('str',s);\r\n\r\n        const color = s.map((c) => c * bright * 255);\r\n\r\n        return [...color, alpha * 255];\r\n    }\r\n\r\n    _renderLayers() {\r\n        const {\r\n            // buildings = DATA_URL.BUILDINGS,\r\n            trailLength = 120,\r\n            theme = DEFAULT_THEME,\r\n            // TripsLayer=new TripsLayer({\r\n            //     id: 'trips',\r\n            //     //data: trips,\r\n            //     // data:[\r\n            //     //     {\r\n            //     //         \"vendor\": 1,\r\n            //     //         \"path\": [\r\n            //     //             [120.167057,30.185901],\r\n            //     //             [120.165752,30.185723],\r\n            //     //             [120.16581,30.188491],\r\n            //     //             [120.190417,30.198224],\r\n            //     //             [120.191971\t,30.204],\r\n            //     //             [120.189622\t,30.20767],\r\n            //     //             [120.182369\t,30.218973],\r\n            //     //             [120.180889\t,30.222601],\r\n            //     //             [120.200108\t,30.306856],\r\n            //     //             [120.23477\t,30.311914],\r\n            //     //             [120.246959\t,30.316748],\r\n            //     //             [120.309708\t,30.387518],\r\n            //     //             [120.312426\t,30.39154],\r\n            //     //             [120.309069\t,30.400897],\r\n            //     //             [120.302548\t,30.399632],],\r\n            //     //\r\n            //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n            //     //     }],\r\n            //     data:Routes,\r\n            //     getPath: d => d.path,\r\n            //     getTimestamps: d => d.timestamps,\r\n            //     getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\r\n            //     opacity: 0.3,\r\n            //     widthMinPixels: 2,\r\n            //     rounded: true,\r\n            //     trailLength,\r\n            //     currentTime: this.state.time,\r\n            //\r\n            //     shadowEnabled: false\r\n            // }),\r\n        } = this.props;\r\n\r\n        const layers=[\r\n            // new ScatterplotLayer({\r\n            //     id: 'Beijing',\r\n            //     data: this.state.Beijing,\r\n            //     pickable: true,\r\n            //     opacity: 0.8,\r\n            //     stroked: true,\r\n            //     filled: true,\r\n            //     radiusScale: 1,\r\n            //     radiusMinPixels: 1,\r\n            //     radiusMaxPixels: 10,\r\n            //     lineWidthMinPixels: 0.1,\r\n            //     getPosition: d =>{ return d['coordinates']} ,\r\n            //     getRadius: d => 10,\r\n            //     getFillColor: d => [255, 140, 0],\r\n            //     getLineColor: d => [0, 0, 0]\r\n            // }),\r\n\r\n            // new PolygonLayer({\r\n            //     id:'Grid-layer',\r\n            //     data:this.state.Grid,\r\n            //     pickable: true,\r\n            //     stroked: true,\r\n            //     filled: false,\r\n            //     wireframe: true,\r\n            //     lineWidthMinPixels: 1,\r\n            //     getPolygon: d => {\r\n            //\r\n            //         return d.contour},\r\n            //     getLineColor: [80, 80, 80],\r\n            //     getLineWidth: 2,\r\n            // }),\r\n            new PathLayer({\r\n                id: 'path-layer',\r\n                data:this.state.onePath,\r\n                pickable: true,\r\n                widthScale: 30,\r\n                widthMinPixels: 2,\r\n                getPath: d => {return d.path},\r\n                getColor: d => this._getDeckColorForFeature(d.color,1,0.8),\r\n                getWidth: d => 1\r\n            }),\r\n            new ColumnLayer({\r\n                id: 'Speed-layer',\r\n                data: this.state.BeijingSpeedData,\r\n                // data: this.state.match_data,\r\n                diskResolution: 12,\r\n                radius: 10,\r\n                // extruded: true,\r\n                extruded: false,\r\n                pickable: true,\r\n                stroked:true,\r\n                elevationScale: 3,\r\n                getLineWidth:0.5,\r\n                getPosition: d => d.coordinates,\r\n                getFillColor: d => {\r\n                    if(!d.value){return [255,255,255,0]}\r\n                    else if(parseInt(d.value)<20) return colorRange[1];\r\n                    else if(parseInt(d.value)<30&&parseInt(d.value)>=20) return colorRange[2];\r\n                    else if(parseInt(d.value)>=30&& parseInt(d.value)<40)return colorRange[3];\r\n                    else if(parseInt(d.value)>=40 && parseInt(d.value)<50)return colorRange[4];\r\n                    else if(parseInt(d.value)>=50 )return colorRange[5];\r\n                    else return colorRange[0];\r\n\r\n\r\n\r\n                    // if (d .value/10<= 5) {\r\n                    //     return colorRange[d.value/10]\r\n                    // } else {\r\n                    //     return colorRange[5]\r\n                    // }\r\n                },\r\n\r\n                getLineColor: d=>{\r\n                    if(!d.value)return [0,0,0,0];\r\n                    else return [0,0,0];\r\n                },\r\n                getElevation: d =>{\r\n                    // if(!d.value)return 0.05;\r\n                    // else{\r\n                    if(!d.value){return 0}\r\n                    else if(parseInt(d.value)<20) return d.value*70*0.14/20;\r\n                    else if(parseInt(d.value)<30&&parseInt(d.value)>=20) return 9.8+(d.value-20)*70*0.41/10;\r\n                    else if(parseInt(d.value)>=30&& parseInt(d.value)<40)return 38.5+(d.value-30)*70*0.33/10;\r\n                    else if(parseInt(d.value)>=40 && parseInt(d.value)<50)return 61.6+(d.value-40)*70*0.11/10;\r\n                    else if(parseInt(d.value)>=50 )return d.value+20;\r\n\r\n                    // }\r\n                },\r\n                onHover:(d)=>{// 该点的一段时间内的数据\r\n                    // this.setState({\r\n                    //     lineData:\r\n                    // })\r\n                    // debugger\r\n                    if(d.hasOwnProperty('object')){\r\n                        console.log(d.object['name']);\r\n                    }\r\n                    if(d.hasOwnProperty('object') &&this.state.showTag===0 && this.state.pointData.length===0){\r\n\r\n                        if(SpeedMap.hasOwnProperty(d)){//SpeedMap 里面有速度再取，这时候speedMap肯定有数值了\r\n                            console.log('data:',d);\r\n                            let p1=getPointSpeed(d.object['name']);\r\n                            p1.then(function(){\r\n                                let pointData=[];\r\n                                let time=this.state.time;\r\n                                for(let i=-time_interval;i<time_interval;i++){\r\n                                    if(time+i*15>=0 && time+i*15<87840){\r\n                                        console.log('speed:',Math.floor((time+i*15)/15))\r\n                                        pointData.push({'speed':point_speed[d.object['name']][Math.floor((time+i*15)/15)],'time':_formatTime(Math.floor((time+i*15)))})\r\n                                    }\r\n                                }\r\n                                console.log('pointdata',pointData);\r\n                                this.setState({\r\n                                    pointData:pointData\r\n                                });\r\n\r\n                                G2.registerShape('point', 'breath-point', {\r\n                                    draw(cfg, container) {\r\n                                        const data = cfg.data;\r\n                                        const point = { x: cfg.x, y: cfg.y };\r\n                                        const group = container.addGroup();\r\n                                        if (data['time'] === _formatTime(Math.floor((time)))) {\r\n                                            const decorator1 = group.addShape('circle', {\r\n                                                attrs: {\r\n                                                    x: point.x,\r\n                                                    y: point.y,\r\n                                                    r: 10,\r\n                                                    fill: cfg.color,\r\n                                                    opacity: 0.5,\r\n                                                },\r\n                                            });\r\n                                            const decorator2 = group.addShape('circle', {\r\n                                                attrs: {\r\n                                                    x: point.x,\r\n                                                    y: point.y,\r\n                                                    r: 10,\r\n                                                    fill: cfg.color,\r\n                                                    opacity: 0.5,\r\n                                                },\r\n                                            });\r\n                                            const decorator3 = group.addShape('circle', {\r\n                                                attrs: {\r\n                                                    x: point.x,\r\n                                                    y: point.y,\r\n                                                    r: 10,\r\n                                                    fill: cfg.color,\r\n                                                    opacity: 0.5,\r\n                                                },\r\n                                            });\r\n                                            decorator1.animate(\r\n                                                {\r\n                                                    r: 20,\r\n                                                    opacity: 0,\r\n                                                },\r\n                                                {\r\n                                                    duration: 1800,\r\n                                                    easing: 'easeLinear',\r\n                                                    repeat: true,\r\n                                                }\r\n                                            );\r\n                                            decorator2.animate(\r\n                                                {\r\n                                                    r: 20,\r\n                                                    opacity: 0,\r\n                                                },\r\n                                                {\r\n                                                    duration: 1800,\r\n                                                    easing: 'easeLinear',\r\n                                                    repeat: true,\r\n                                                    delay: 600,\r\n                                                }\r\n                                            );\r\n                                            decorator3.animate(\r\n                                                {\r\n                                                    r: 20,\r\n                                                    opacity: 0,\r\n                                                },\r\n                                                {\r\n                                                    duration: 1800,\r\n                                                    easing: 'easeLinear',\r\n                                                    repeat: true,\r\n                                                    delay: 1200,\r\n                                                }\r\n                                            );\r\n                                            group.addShape('circle', {\r\n                                                attrs: {\r\n                                                    x: point.x,\r\n                                                    y: point.y,\r\n                                                    r: 6,\r\n                                                    fill: cfg.color,\r\n                                                    opacity: 0.7,\r\n                                                },\r\n                                            });\r\n                                            group.addShape('circle', {\r\n                                                attrs: {\r\n                                                    x: point.x,\r\n                                                    y: point.y,\r\n                                                    r: 1.5,\r\n                                                    fill: cfg.color,\r\n                                                },\r\n                                            });\r\n                                        }\r\n\r\n                                        return group;\r\n                                    },\r\n                                });\r\n\r\n                                // const line = new Line('line', {\r\n                                //     data: this.state.pointData,\r\n                                //     xField: 'time',\r\n                                //     yField: 'speed',\r\n                                //     tooltip: { showMarkers: false },\r\n                                //     point: {\r\n                                //         shape: 'breath-point',\r\n                                //     },\r\n                                //\r\n                                // });\r\n                                // line.render();\r\n                            }.bind(this));\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n                // transitions: {\r\n                //     getElevation: {\r\n                //         duration: 3000,\r\n                //         // type: 'spring',\r\n                //         // stiffness: 0.01,\r\n                //         // damping: 0.15,\r\n                //         // easing: d3.easeCubicInOut,\r\n                //         enter: d => {\r\n                //             // console.log(d);\r\n                //             let tmp = [];\r\n                //             for (let i = 0; i < 300; i++) {\r\n                //                 tmp.push(d[0] * i / 300)\r\n                //             }\r\n                //             // console.log(tmp)\r\n                //             return tmp;\r\n                //         },\r\n                //     }\r\n                // },\r\n                // updateTriggers: {\r\n                //     getElevation: [this.state.pre_org,this.state.real_org],\r\n                // }\r\n            }),\r\n\r\n            // new ColumnLayer({\r\n            //     id: 'OutpointLayer',\r\n            //     data: this.state.arcData,\r\n            //     // data: this.state.match_data,\r\n            //     diskResolution: 12,\r\n            //     radius: 10,\r\n            //     extruded: true,\r\n            //     // extruded: false,\r\n            //     pickable: true,\r\n            //     stroked:true,\r\n            //     elevationScale: 3,\r\n            //     getLineWidth:0.5,\r\n            //     material:false,\r\n            //     getPosition: d => d.from.coordinates,\r\n            //     getFillColor: d => {\r\n            //         // console.log('d:',d);\r\n            //         return [0,100,255]\r\n            //     },\r\n            //     getLineColor: d=>{\r\n            //\r\n            //         return [0,0,0];\r\n            //     },\r\n            //     getElevation: d =>{\r\n            //         return 20\r\n            //     },\r\n            //\r\n            //\r\n            // }),\r\n\r\n\r\n\r\n            // new ColumnLayer({\r\n            //     id: 'InpointLayer',\r\n            //     data: this.state.arcData,\r\n            //     // data: this.state.match_data,\r\n            //     diskResolution: 12,\r\n            //     radius: 10,\r\n            //     // extruded: true,\r\n            //     extruded: true,\r\n            //     pickable: true,\r\n            //     stroked:true,\r\n            //     elevationScale: 3,\r\n            //     getLineWidth:0.5,\r\n            //     material:false,\r\n            //     getPosition: d => d.to.coordinates,\r\n            //     getFillColor: d => {\r\n            //         console.log(this.state.arcData.length);\r\n            //         // console.log('d:',d);\r\n            //         return [255,130,71]\r\n            //     },\r\n            //     getLineColor: d=>{\r\n            //\r\n            //         return [0,0,0];\r\n            //     },\r\n            //     getElevation: d =>{\r\n            //         return 20\r\n            //     },\r\n            //\r\n            // }),\r\n\r\n            // new ArcLayer({\r\n            //     id:\"query\",\r\n            //     data:this.state.arcData,\r\n            //     pickable: true,\r\n            //     getWidth: 2,\r\n            //     greatCircle:true,\r\n            //     getHeight:d=>0.1,\r\n            //     getSourcePosition: d => d.from.coordinates,\r\n            //     getTargetPosition: d => d.to.coordinates,\r\n            //\r\n            //     getSourceColor: d =>[151,255,255],\r\n            //     getTargetColor: d =>[255,130,71],\r\n            // })\r\n\r\n            // new EditableGeoJsonLayer({\r\n            //\r\n            // }),\r\n         // new SelectionLayer({\r\n         //     id: 'selection',\r\n         //     selectionType: 'rectangle',\r\n         //     onSelect:({pickingInfos})=> {\r\n         //         console.log(pickingInfos);\r\n         //     },\r\n         //     layerIds:['trips'],\r\n         //     getTentativeFillColor: () => [255, 0, 255, 100],\r\n         //     getTentativeLineColor: () => [0, 0, 255, 255],\r\n         //     getTentativeLineDashArray: () => [0, 0],\r\n         //     lineWidthMinPixels: 3\r\n         // }),\r\n\r\n         //    new EditableGeoJsonLayer({\r\n         //        id: 'editlayer',\r\n         //        data: this.state.data,\r\n         //        mode: this.state.mode,\r\n         //        selectedFeatureIndexes,\r\n         //        onEdit: ({ updatedData }) => {\r\n         //            this.setState({\r\n         //                data: updatedData,\r\n         //         });\r\n         //     }\r\n         // }),\r\n\r\n            // new IconLayer({\r\n            //     id:'blockIcon',\r\n            //     data:this.state.blockIcon,\r\n            //     iconAtlas:'./warning.png',\r\n            //     iconMapping:ICON_MAPPING,\r\n            //     getIcon: d => 'marker',\r\n            //     sizeScale: 15,\r\n            //     getPosition: d => d.coordinates,\r\n            //     getColor:[255,255,0],\r\n            //     getSize: d => 5,\r\n            //\r\n            // }),\r\n            // new TripsLayer({\r\n            //     id:'blockRoute',\r\n            //     data:this.state.blockRoute,\r\n            //     getPath:d=>d.path,\r\n            //     getTimestamps: d => d.timestamps,\r\n            //     // getColor: d => colorTable[d.color],\r\n            //     getColor:[0,140,255,255],\r\n            //     opacity: 0.3,\r\n            //     widthMinPixels: 5,\r\n            //     rounded: true,\r\n            //     trailLength:1200,\r\n            //     currentTime: this.state.time,\r\n            //     shadowEnabled: false,\r\n            //     pickable:true,\r\n            //     visible:this.state.block\r\n            // }),\r\n            //\r\n            // new TripsLayer({\r\n            //     id: 'trips',\r\n            //     //data: trips,\r\n            //     // data:[\r\n            //     //     {\r\n            //     //         \"vendor\": 1,\r\n            //     //         \"path\": [\r\n            //     //             [120.167057,30.185901],\r\n            //     //             [120.165752,30.185723],\r\n            //     //             [120.16581,30.188491],\r\n            //     //             [120.190417,30.198224],\r\n            //     //             [120.191971\t,30.204],\r\n            //     //             [120.189622\t,30.20767],\r\n            //     //             [120.182369\t,30.218973],\r\n            //     //             [120.180889\t,30.222601],\r\n            //     //             [120.200108\t,30.306856],\r\n            //     //             [120.23477\t,30.311914],\r\n            //     //             [120.246959\t,30.316748],\r\n            //     //             [120.309708\t,30.387518],\r\n            //     //             [120.312426\t,30.39154],\r\n            //     //             [120.309069\t,30.400897],\r\n            //     //             [120.302548\t,30.399632],],\r\n            //     //\r\n            //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n            //     //     }],\r\n            //     // data:getRoute,\r\n            //     data:this.state.Route,\r\n            //     // updateTriggers:{\r\n            //     //   data:Routes\r\n            //     // },\r\n            //     getPath: d => d.path,\r\n            //     getTimestamps: d => d.timestamps,\r\n            //     getColor: d => colorTable[d.color],\r\n            //     // getColor:[0,255,255,255],\r\n            //     opacity: 0.3,\r\n            //     widthMinPixels: 10,\r\n            //     rounded: true,\r\n            //     trailLength,\r\n            //     currentTime: this.state.time,\r\n            //     shadowEnabled: false,\r\n            //     pickable:true,\r\n            //     visible:this.state.showRoute,\r\n            //     // onHover:info=>{\r\n            //     //     console.log(info)\r\n            //     // }\r\n            // }),\r\n            // new PolygonLayer({\r\n            //     id: 'dep_polygon',\r\n            //     data:this.state.depPolygon,\r\n            //     pickable: true,\r\n            //     stroked: true,\r\n            //     filled: true,\r\n            //     wireframe: true,\r\n            //     lineWidthMinPixels: 1,\r\n            //     getPolygon: d => d.contour,\r\n            //     // getElevation: d => d.population / d.area / 10,\r\n            //     getFillColor: d => [255, 255, 0,50],\r\n            //     getLineColor: [80, 80, 80],\r\n            //     getLineWidth: 1,\r\n            //     onHover: info=>this.setState({\r\n            //         depObject: info.object,\r\n            //         depX: info.x,\r\n            //         depY: info.y\r\n            //     }),\r\n            //     visible:this.state.depV\r\n            //     // onHover: info=>{\r\n            //     //     console.log(info)\r\n            //     // }\r\n            //\r\n            // }),\r\n            //\r\n            // new PolygonLayer({\r\n            //     id:'des_polygon',\r\n            //     data:this.state.desPolygon,\r\n            //     pickable: true,\r\n            //     stroked: true,\r\n            //     filled: true,\r\n            //     wireframe: true,\r\n            //     lineWidthMinPixels: 1,\r\n            //     getPolygon: d => d.contour,\r\n            //     // getElevation: d => d.population / d.area / 10,\r\n            //     getFillColor: d => [255, 0, 0,50],\r\n            //     getLineColor: [80, 80, 80],\r\n            //     getLineWidth: 1,\r\n            //     onHover: info=>this.setState({\r\n            //         desObject: info.object,\r\n            //         desX: info.x,\r\n            //         desY: info.y\r\n            //     }),\r\n            //     visible:this.state.desV\r\n            // }),\r\n            //\r\n            // new ColumnLayer({\r\n            //     id: 'predict-origin-layer',\r\n            //     data: this._getPredictData(),\r\n            //     diskResolution: 12,\r\n            //     radius: 100,\r\n            //     extruded: true,\r\n            //     pickable: true,\r\n            //     elevationScale: 5000,\r\n            //     getPosition: d => d.centroid,\r\n            //     getFillColor: d => {\r\n            //         let k = (Math.log(d.value) / Math.log(4)).toFixed(0);\r\n            //         if (k <= 5) {\r\n            //             return colorRange[k]\r\n            //         } else {\r\n            //             return colorRange[5]\r\n            //         }\r\n            //     },\r\n            //     getLineColor: [0, 0, 0],\r\n            //     getElevation: d =>parseInt(d.value)/100,\r\n            //     transitions: {\r\n            //         getElevation: {\r\n            //             duration: 3000,\r\n            //             // type: 'spring',\r\n            //             // stiffness: 0.01,\r\n            //             // damping: 0.15,\r\n            //             // easing: d3.easeCubicInOut,\r\n            //             enter: d => {\r\n            //                 // console.log(d);\r\n            //                 let tmp = [];\r\n            //                 for (let i = 0; i < 300; i++) {\r\n            //                     tmp.push(d[0] * i / 300)\r\n            //                 }\r\n            //                 // console.log(tmp)\r\n            //                 return tmp;\r\n            //             },\r\n            //         }\r\n            //     },\r\n            //     updateTriggers: {\r\n            //         getElevation: [this.state.pre_org,this.state.real_org],\r\n            //     }\r\n            // }),\r\n            // new PolygonLayer({\r\n            //     id: 'buildings',\r\n            //     data: buildings,\r\n            //     extruded: true,\r\n            //     wireframe: false,\r\n            //     opacity: 0.5,\r\n            //     getPolygon: f => f.polygon,\r\n            //     getElevation: f => f.height,\r\n            //     getFillColor: theme.buildingColor,\r\n            //     material: theme.material\r\n            // })\r\n        ];\r\n\r\n        return layers;\r\n    }\r\n    _formatLabel(t) {\r\n        return `2017年${4+Math.floor(t/43200)}月${Math.floor((t-Math.floor((t/43200))*43200)/1440)}日${Math.floor((t%1440)/60)}时${Math.floor(t%60)}分`;\r\n    }\r\n\r\n    _Icon(props) {\r\n        // @ts-ignore\r\n        return <box-icon color=\"currentColor\" {...props} />;\r\n    }\r\n    // _getIncludePoints(){\r\n    //     //数据是什么样的？\r\n    //     this.state.features.\r\n    //\r\n    // }\r\n    //\r\n    Online(P1,P2,Q){\r\n        let tempy1 = (P1[1] - P2[1]) ;\r\n        let tempx1 = (P1[0] - P2[0]);\r\n        let tempy2 = (Q[1] - P1[1]) ;\r\n        let tempx2 = (Q[0] - P1[0]);\r\n        let xp = tempy1 * tempx2;\r\n        let yp = tempy2 * tempx1;\r\n        if(Math.abs(xp - yp) <= 1e-6)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    _InPolygonScan(Q,Poly,n){\r\n        // debugger\r\n        // console.log('Q',Q);\r\n        // console.log('Poly',Poly);\r\n        let count=0;\r\n        let xinters=0;\r\n        let P1=Poly[0];\r\n        for(let i=1;i<=n;i++){\r\n            let P2=Poly[i%n];\r\n            // if(this.Online(P1,P2,Q)) return 1;\r\n            if(Q[1]>Math.min(P1[1],P2[1])&&Q[1]<=Math.max(P1[1],P2[1])){\r\n                if(Q[0]<=Math.max(P1[0],P2[0])){\r\n                    if(P1[1]!==P2[1]){\r\n                        xinters=(Q[1]-P1[1])*(P2[0]-P1[0])/(P2[1]-P1[1])+P1[0];\r\n                        if(P1[0]===P2[0]||Q[0]<=xinters) count++;//符合要求\r\n                    }\r\n                }\r\n            }\r\n            P1=P2;\r\n        }\r\n        if(count%2===0) return 0;\r\n        return 1;\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            viewState,\r\n            // mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json',\r\n            mapStyle ='mapbox://styles/mapbox/light-v10',\r\n            // mapStyle ='mapbox://styles/mapbox/dark-v10',\r\n            theme = DEFAULT_THEME,\r\n        } = this.props;\r\n        const layer = new EditableGeoJsonLayer({\r\n            // id: \"geojson-layer\",\r\n            id: 'editlayer',\r\n            data: this.state.features,\r\n            //数据格式\r\n            // [\r\n            // {},\r\n            // {}\r\n            //]\r\n            mode: this.state.mode,\r\n            selectedFeatureIndexes: this.state.selectedFeatureIndexes, //selectedFeaturesIndexes 地图上说有画的东西\r\n            getFillColor: (feature,isSelected)=>{\r\n                // console.log('feature',feature);\r\n                console.log('features',this.state.features.features);\r\n                // const index =this.state.features.features.indexOf(feature);\r\n                // console.log('index',index);\r\n                // console.log('properties',this.state.features.features[index]);\r\n                let data=[];\r\n                if(feature.properties[\"fill\"] === \"FFFFFF\"){\r\n                    data=this._getDeckColorForFeature(feature.properties[\"fill\"],1,0.5)\r\n                }\r\n                else data=this._getDeckColorForFeature(feature.properties[\"fill\"],1,0.5)\r\n                console.log(data);\r\n                return data;\r\n            },\r\n            getLineColor: (feature,isSelected)=>{\r\n                // console.log('feature',feature);\r\n                // console.log('features',this.state.features.features);\r\n                // const index =this.state.features.features.indexOf(feature);\r\n                // console.log('index',index);\r\n                // console.log('properties',this.state.features.features[index]);\r\n                let data=this._getDeckColorForFeature(feature.properties[\"stroke\"],1,1)\r\n                console.log(data);\r\n                return data;\r\n            },\r\n            onEdit: ({ updatedData, editType, editContext }) => {\r\n\r\n                let Poly=[];\r\n                let inPoints=[];\r\n                // console.log('onEdit', editType, editContext, updatedData);\r\n                let updatedSelectedFeatureIndexes = this.state.selectedFeatureIndexes;\r\n\r\n                if (!['movePosition', 'extruding', 'rotating', 'translating', 'scaling'].includes(editType)) {\r\n                    // Don't log edits that happen as the pointer moves since they're really chatty\r\n                    // const updatedDataInfo = featuresToInfoString(updatedData);\r\n                    // eslint-disable-next-line\r\n                    // console.log('onEdit', editType, editContext, updatedData);\r\n                }\r\n\r\n                if (editType === 'removePosition') {\r\n                    // This is a simple example of custom handling of edits\r\n                    // reject the edit\r\n                    return;\r\n                }\r\n\r\n                if (editType === 'addFeature' ) {\r\n\r\n                    let {featureIndexes}  = editContext;\r\n                    console.log('features+',featureIndexes);\r\n\r\n                    if(this.state.ODTag === 0){\r\n                        updatedData.features[updatedData.features.length-1].properties[\"fill\"]=\"1ca9e6\";\r\n                        updatedData.features[updatedData.features.length-1].properties[\"stroke\"]= \"1ca9e6\";\r\n                    }\r\n                    else if(this.state.ODTag === 1){\r\n                        updatedData.features[updatedData.features.length-1].properties[\"fill\"]=\"f88c24\";\r\n                        updatedData.features[updatedData.features.length-1].properties[\"stroke\"]= \"ff9900\";\r\n                    }\r\n                    else if(this.state.ODTag === 2){\r\n                        updatedData.features[updatedData.features.length-1].properties[\"fill\"]=\"FF0000\";\r\n                        updatedData.features[updatedData.features.length-1].properties[\"stroke\"]= \"FF0000\";\r\n                    }\r\n                    else if(this.state.ODTag===3){\r\n                        updatedData.features[updatedData.features.length-1].properties[\"fill\"]=\"FFFFFF\";\r\n                        updatedData.features[updatedData.features.length-1].properties[\"stroke\"]= \"FF0000\";\r\n                    }\r\n                    console.log('updata',updatedData);\r\n                    // Add the new feature to the selection\r\n                    updatedSelectedFeatureIndexes = [...this.state.selectedFeatureIndexes, ...featureIndexes];\r\n\r\n                    updatedData.features.forEach(d=>{\r\n                        Poly.push(d.geometry.coordinates[0]);\r\n                    });\r\n                    let newBeijingdata=[];\r\n                    // console.log('poly:',Poly);\r\n                    //\r\n                    // let mapInPoint={};//不知道为什么inPoint会每个都重复，所以去除重复\r\n                    //\r\n                    // //统计在圈内的请求数据，怎么把一段时间的数据全部加进来？,直接把加载数据的过程放在didmount里面\r\n                    // let inQueryPoints=[];\r\n                    //\r\n                    // let A2BPoints=[];\r\n                    // let B2APoints=[];\r\n                    // //对所有的poly计算在poly中的点\r\n                    // if(Poly.length){\r\n                    //     Poly.forEach(p=>{\r\n                    //         this.state.BeijingSpeedData.forEach(d=>{\r\n                    //             if(this._InPolygonScan(d['coordinates'],p,p.length)&& d.value &&!mapInPoint.hasOwnProperty(d['name'])){\r\n                    //                 inPoints.push(d['name']);\r\n                    //                 mapInPoint[d['name']]=1;\r\n                    //\r\n                    //                 // console.log('name:',d['name'],'value',d.value);\r\n                    //                 //尝试改变数据\r\n                    //                 // d['value']=50;\r\n                    //             }\r\n                    //             newBeijingdata.push(d);\r\n                    //         });\r\n                    //\r\n                    //         //把当前所有的query 压入到多边形中。\r\n                    //         console.log('querySearchData:',this.state.querySearchData);\r\n                    //\r\n                    //         let timeMap={};\r\n                    //         this.state.querySearchData.forEach(d=>{\r\n                    //             if(timeMap.hasOwnProperty(d.time)){\r\n                    //                 timeMap[d.time]+=1;\r\n                    //             }\r\n                    //             else {\r\n                    //                 timeMap[d.time]=1;\r\n                    //             }\r\n                    //\r\n                    //             if(this._InPolygonScan(d.from.coordinates,p,p.length)){\r\n                    //                 inQueryPoints.push({tag:'from', coordinates:d.from.coordinates, time:d.time});\r\n                    //             }\r\n                    //             if(this._InPolygonScan(d.to.coordinates,p,p.length)){\r\n                    //                 inQueryPoints.push({tag:'to', coordinates:d.to.coordinates, time:d.time});\r\n                    //             }\r\n                    //         })\r\n                    //         console.log('timeMap',timeMap);\r\n                    //     });\r\n                    // }\r\n                    // // else if(Poly.length%2===0){\r\n                    // //         let newQuerData=[];\r\n                    // //\r\n                    // //         this.state.querySearchData.forEach(d=>{\r\n                    // //             // if(timeMap.hasOwnProperty(d.time)){\r\n                    // //             //     timeMap[d.time]+=1;\r\n                    // //             // }\r\n                    // //             // else {\r\n                    // //             //     timeMap[d.time]=1;\r\n                    // //             // }\r\n                    // //             for(let i=0;i<Poly.length;i+=2){\r\n                    // //                 if(this._InPolygonScan(d.from.coordinates,Poly[i+0],Poly[i+0].length) && this._InPolygonScan(d.to.coordinates,Poly[i+1],Poly[i+1].length)){\r\n                    // //                     A2BPoints.push({tag:'A2B', from:d.from.coordinates,to:d.to.coordinates,time:d.time});\r\n                    // //                     newQuerData.push({tag:'A2B', from:{coordinates:d.from.coordinates},to:{coordinates:d.to.coordinates},time:d.time})\r\n                    // //                 }\r\n                    // //                 if(this._InPolygonScan(d.from.coordinates,Poly[i+1],Poly[i+1].length) && this._InPolygonScan(d.to.coordinates,Poly[i],Poly[i].length)){\r\n                    // //                     B2APoints.push({tag:'B2A', from:d.from.coordinates,to:d.to.coordinates,time:d.time});\r\n                    // //                     newQuerData.push({tag:'B2A', from:{coordinates:d.from.coordinates},to:{coordinates:d.to.coordinates},time:d.time})\r\n                    // //                 }\r\n                    // //             }\r\n                    // //\r\n                    // //         });\r\n                    // //         this.setState({\r\n                    // //             arcData:newQuerData\r\n                    // //         })\r\n                    // //     let A2B={};\r\n                    // //     A2BPoints.forEach(d=>{\r\n                    // //         if(A2B.hasOwnProperty(d.time)){\r\n                    // //             A2B[d.time]+=1;\r\n                    // //         }\r\n                    // //         else A2B[d.time]=1;\r\n                    // //     });\r\n                    // //     let B2A={};\r\n                    // //     B2APoints.forEach(d=>{\r\n                    // //         if(B2A.hasOwnProperty(d.time)){\r\n                    // //             B2A[d.time]+=1;\r\n                    // //         }\r\n                    // //         else B2A[d.time]=1;\r\n                    // //     });\r\n                    // //     let A2BAreaData=[]\r\n                    // //     Object.keys(A2B).forEach(d=>{\r\n                    // //         A2BAreaData.push({tag:'A2B',value:A2B[d],time:d});\r\n                    // //     });\r\n                    // //\r\n                    // //     Object.keys(A2B).forEach(d=>{\r\n                    // //         A2BAreaData.push({tag:'B2A',value:B2A[d],time:d});\r\n                    // //     });\r\n                    // //\r\n                    // //     this.setState({\r\n                    // //         A2BAreaData:A2BAreaData\r\n                    // //     });\r\n                    // //\r\n                    // //     //\r\n                    // //     // const stackedColumnPlot = new Column('stackColumn', {\r\n                    // //     //     data:this.state.A2BAreaData,\r\n                    // //     //     isGroup: true,\r\n                    // //     //     xField: 'time',\r\n                    // //     //     yField: 'value',\r\n                    // //     //     seriesField: 'tag',\r\n                    // //     //     /** 设置颜色 */\r\n                    // //     //     color: ['#1ca9e6', '#f88c24'],\r\n                    // //     //     /** 设置间距 */\r\n                    // //     //     // marginRatio: 0.1,\r\n                    // //     //     label: {\r\n                    // //     //         // 可手动配置 label 数据标签位置\r\n                    // //     //         position: 'middle', // 'top', 'middle', 'bottom'\r\n                    // //     //         // 可配置附加的布局方法\r\n                    // //     //         layout: [\r\n                    // //     //             // 柱形图数据标签位置自动调整\r\n                    // //     //             { type: 'interval-adjust-position' },\r\n                    // //     //             // 数据标签防遮挡\r\n                    // //     //             { type: 'interval-hide-overlap' },\r\n                    // //     //             // 数据标签文颜色自动调整\r\n                    // //     //             { type: 'adjust-color' },\r\n                    // //     //         ],\r\n                    // //     //     },\r\n                    // //     // });\r\n                    // //     //\r\n                    // //     // stackedColumnPlot.render();\r\n                    // //\r\n                    // // }\r\n                    //\r\n                    //\r\n                    //\r\n                    //\r\n                    // console.log('inQuery:',inQueryPoints);\r\n                    //\r\n                    // //把出发和返回的数据统计起来\r\n                    // let fromQueryTimeCount={};\r\n                    // let toQueryTimeCount={};\r\n                    // inQueryPoints.forEach(d=>{\r\n                    //     if(d.tag==='from'){\r\n                    //         if(fromQueryTimeCount.hasOwnProperty(d.time)){\r\n                    //             fromQueryTimeCount[d.time]+=1;\r\n                    //         }\r\n                    //         else{\r\n                    //             fromQueryTimeCount[d.time]=1;\r\n                    //         }\r\n                    //     }\r\n                    //     else{\r\n                    //         if(toQueryTimeCount.hasOwnProperty(d.time)){\r\n                    //             toQueryTimeCount[d.time]+=1;\r\n                    //         }\r\n                    //         else{\r\n                    //             toQueryTimeCount[d.time]=1;\r\n                    //         }\r\n                    //     }\r\n                    //\r\n                    // });\r\n                    // let raidData=[];\r\n                    // Object.keys(fromQueryTimeCount).forEach(d=>{\r\n                    //     raidData.push({time:d, value:fromQueryTimeCount[d], tag:'from'});\r\n                    // });\r\n                    // Object.keys(toQueryTimeCount).forEach(d=>{\r\n                    //     raidData.push({time:d, value:toQueryTimeCount[d], tag:'to'});\r\n                    // });\r\n                    //\r\n                    // this.setState({\r\n                    //     raidData:raidData\r\n                    // });\r\n                    // console.log('raidData:',this.state.raidData);\r\n\r\n                    //雷达图\r\n                    // const radarPlot = new Radar('raid', {\r\n                    //     data:this.state.raidData,\r\n                    //     xField: 'time',\r\n                    //     yField: 'value',\r\n                    //     seriesField: 'tag',\r\n                    //     meta: {\r\n                    //         value: {\r\n                    //             alias: '数量'\r\n                    //         },\r\n                    //     },\r\n                    //     xAxis: {\r\n                    //         line: null,\r\n                    //         tickLine: null,\r\n                    //         grid: {\r\n                    //             line: {\r\n                    //                 style: {\r\n                    //                     lineDash: null,\r\n                    //                 },\r\n                    //             },\r\n                    //         },\r\n                    //     },\r\n                    //     // 开启面积\r\n                    //     area: {},\r\n                    //     // 开启辅助点\r\n                    //     point: {\r\n                    //         size: 2,\r\n                    //     },\r\n                    // });\r\n                    // radarPlot.render();\r\n\r\n\r\n\r\n\r\n                    //每个多边形内点的ID的数组\r\n                    // this.setState({\r\n                    //     BeijingSpeedData:newBeijingdata\r\n                    // });\r\n\r\n\r\n                    //查询所有多边形内点的速度,设置河流图\r\n                    // let streamData=[];\r\n                    // let PromiseG=[];\r\n                    //\r\n                    // let avarageTimeMap={};\r\n                    // let heatMapTimeMap={};\r\n                    // console.log('inPoints',inPoints);\r\n                    // inPoints.forEach(d=>{\r\n                    //         if(SpeedMap.hasOwnProperty(d)){//SpeedMap 里面有速度再取\r\n                    //             // console.log('data:',d);\r\n                    //             PromiseG.push(getPointSpeed(d));\r\n                    //         }\r\n                    //     });\r\n                    // Promise.all(PromiseG).then(values=>{\r\n                    //         let time=this.state.time;\r\n                    //         // console.log(\"point_speed\",point_speed);\r\n                    //     inPoints.map((d,index)=>{\r\n                    //         if(SpeedMap.hasOwnProperty(d)) {//SpeedMap 里面有速度再取\r\n                    //             for(let i=-time_interval;i<time_interval;i++){\r\n                    //                 if(time+i*15>=0 && time+i*15<87840 && i%4===0){\r\n                    //                     // console.log('speed:',Math.floor((time+i*15)/15));\r\n                    //                     if(avarageTimeMap.hasOwnProperty(_formatTime(Math.floor((time+i*15))))){\r\n                    //                         avarageTimeMap[_formatTime(Math.floor((time+i*15)))]+=point_speed[d][Math.floor((time+i*15)/15)]\r\n                    //                     }\r\n                    //                     else{\r\n                    //                         avarageTimeMap[_formatTime(Math.floor((time+i*15)))]=point_speed[d][Math.floor((time+i*15)/15)];\r\n                    //                     }\r\n                    //                     //河流图添加数据\r\n                    //                     streamData.push({'name':index+'.','speed':point_speed[d][Math.floor((time+i*15)/15)],'time':_formatTime(Math.floor((time+i*15)))})\r\n                    //                     //旭日图添加数据,不行这个太多了\r\n                    //                     // heatmap.push({\"Day\":Math.floor((time+i*15)/1440),'hour':Math.floor(Math.floor(((time+i*15)%1440)/60)),'value':point_speed[d][Math.floor((time+i*15)/15)]})\r\n                    //                     //\r\n                    //                 }\r\n                    //             }\r\n                    //\r\n                    //             // for(let i=-area_interval;i<area_interval;i++){\r\n                    //             //     if(time+i*15>=0 && time+i*15<87840){\r\n                    //             //         // console.log('speed:',Math.floor((time+i*15)/15));\r\n                    //             //         getQueryData(time){\r\n                    //             //\r\n                    //             //         }\r\n                    //             //     }\r\n                    //             // }\r\n                    //\r\n                    //\r\n                    //             for(let i=-heatmap_interval;i<heatmap_interval;i++){\r\n                    //                 if(time+i*15>=0 && time+i*15<87840 && i%4===0){\r\n                    //                     // console.log('speed:',Math.floor((time+i*15)/15));\r\n                    //                     if(heatMapTimeMap.hasOwnProperty(_formatDayTime(Math.floor((time+i*15))))){\r\n                    //                         heatMapTimeMap[_formatDayTime(Math.floor((time+i*15)))]+=point_speed[d][Math.floor((time+i*15)/15)];\r\n                    //                     }\r\n                    //                     else{\r\n                    //                         heatMapTimeMap[_formatDayTime(Math.floor((time+i*15)))]=point_speed[d][Math.floor((time+i*15)/15)];\r\n                    //                     }\r\n                    //                 }\r\n                    //             }\r\n                    //         }\r\n                    //         });\r\n                    //\r\n                    //     let avarageData=[];\r\n                    //     Object.keys(avarageTimeMap).forEach(k=>{\r\n                    //         avarageData.push({'time':k,'value':avarageTimeMap[k]/inPoints.length});\r\n                    //     });\r\n                    //     let heatmapData=[];\r\n                    //     Object.keys(heatMapTimeMap).forEach(k=>{\r\n                    //         // debugger\r\n                    //         let s=k.split(':');\r\n                    //         heatmapData.push({'Day':s[1],'hour':s[2],'value':heatMapTimeMap[k]/(inPoints.length)});\r\n                    //     });\r\n                    //\r\n                    //     this.setState({\r\n                    //         streamData:streamData,\r\n                    //         avarageData:avarageData\r\n                    //     });\r\n                    //     console.log('avarageData',this.state.avarageData);\r\n                    //\r\n                    //     // const stream=new Area('stream',{\r\n                    //     //     data:this.state.streamData,\r\n                    //     //     xField:'time',\r\n                    //     //     yField:'speed',\r\n                    //     //     seriesField:'name'\r\n                    //     // });\r\n                    //     // stream.render();\r\n                    //\r\n                    //     // const columnPlot = new Column('column', {\r\n                    //     //     data:this.state.avarageData,\r\n                    //     //     xField: 'time',\r\n                    //     //     yField: 'value',\r\n                    //     //     columnWidthRatio: 1,\r\n                    //     //     xAxis: {\r\n                    //     //         label: {\r\n                    //     //             autoHide: true,\r\n                    //     //             autoRotate: false,\r\n                    //     //             style: {\r\n                    //     //                 fill: 'black',\r\n                    //     //                 opacity: 1,\r\n                    //     //                 fontSize: 10\r\n                    //     //             },\r\n                    //     //         },\r\n                    //     //     },\r\n                    //     //     yAxis:{\r\n                    //     //         label:{\r\n                    //     //             style:{\r\n                    //     //                 fill: 'black',\r\n                    //     //                 opacity: 1,\r\n                    //     //                 fontSize: 20\r\n                    //     //             }\r\n                    //     //         },\r\n                    //     //         grid: {\r\n                    //     //             line: {\r\n                    //     //                 style: {\r\n                    //     //                     stroke: 'black',\r\n                    //     //                     lineWidth: 2,\r\n                    //     //                     lineDash: [4, 5],\r\n                    //     //                     strokeOpacity: 0.8,\r\n                    //     //                     shadowColor: 'black',\r\n                    //     //                     shadowBlur: 10,\r\n                    //     //                     shadowOffsetX: 5,\r\n                    //     //                     shadowOffsetY: 5,\r\n                    //     //                     cursor: 'pointer'\r\n                    //     //                 }\r\n                    //     //             }\r\n                    //     //         }\r\n                    //     //     },\r\n                    //     //     meta: {\r\n                    //     //         type: {\r\n                    //     //             alias: '类别',\r\n                    //     //         },\r\n                    //     //         sales: {\r\n                    //     //             alias: '均值',\r\n                    //     //         },\r\n                    //     //     },\r\n                    //     // });\r\n                    //\r\n                    //     this.setState({\r\n                    //         heatData:heatmapData\r\n                    //     });\r\n                    //     console.log('heatdata',this.state.heatData);\r\n                    //\r\n                    //\r\n                    //     //周期热力图\r\n                    //\r\n                    //     // const heatchart = new F2.Chart({\r\n                    //     //     id: 'heatchart',\r\n                    //     //     pixelRatio: window.devicePixelRatio\r\n                    //     // });\r\n                    //     // heatchart.source(this.state.heatData);\r\n                    //     // heatchart.coord('polar', {\r\n                    //     //     innerRadius: 0.2\r\n                    //     // });\r\n                    //     // heatchart.tooltip(false);\r\n                    //     // heatchart.axis('Day', {\r\n                    //     //     grid: null,\r\n                    //     //     line: null,\r\n                    //     //     tickLine: null,\r\n                    //     //     label: null\r\n                    //     // });\r\n                    //     // heatchart.axis('hour', {\r\n                    //     //     line: null,\r\n                    //     //     tickLine: null,\r\n                    //     //     grid: null,\r\n                    //     //     labelOffset: 3\r\n                    //     // });\r\n                    //     // // [1, 152, 189],\r\n                    //     // //     [73, 227, 206],\r\n                    //     // //     [216, 254, 181],\r\n                    //     // //     [254, 237, 177],\r\n                    //     // //     [254, 173, 84],\r\n                    //     // //     [209, 55, 78]\r\n                    //     // heatchart.polygon()\r\n                    //     //     .position('hour*Day')\r\n                    //     //     // .color('value', '#BAE7FF-#1890FF-#0050B3')\r\n                    //     //     // .color('value', '#0198BD-#49E3CE-#FEEDB1-#D1374E')\r\n                    //     //     .color('value', '#49E3CE-#FEEDB1-#D1374E')\r\n                    //     //     .style({\r\n                    //     //         stroke: '#fff',\r\n                    //     //         lineWidth: 1\r\n                    //     //     });\r\n                    //     //\r\n                    //     // this.state.heatData.forEach(function(val, idx) {\r\n                    //     //     if(idx%24===0){\r\n                    //     //         heatchart.guide().text({\r\n                    //     //             top: true,\r\n                    //     //             position: [ 0, idx/24 ],\r\n                    //     //             content: val['Day'],\r\n                    //     //             style: {\r\n                    //     //                 fill: '#000',\r\n                    //     //                 textAlign: 'center',\r\n                    //     //                 fontSize:5,\r\n                    //     //                 shadowBlur: 2,\r\n                    //     //                 shadowColor: 'rgba(0, 0, 0, .45)'\r\n                    //     //             }\r\n                    //     //         });\r\n                    //     //     }\r\n                    //     // });\r\n                    //     // heatchart.render();\r\n                    //\r\n                    //\r\n                    //     // columnPlot.render();\r\n                    //\r\n                    // });\r\n\r\n\r\n                    //画出neighbor的\r\n                    // let p3=getposmap();\r\n                    // p3.then(function () {\r\n                    //     // console.log('pos_map',pos_map\r\n                    //     //这个定义好像是要放到函数里面才行，因为定义了马上就执行的！！\r\n                    //     let p4=getneighbor();\r\n                    //     p4.then(function () {\r\n                    //         this.setState({\r\n                    //             neighbor_data:neighbordata\r\n                    //         })\r\n                    //     }.bind(this))\r\n                    // }.bind(this));\r\n                }\r\n                // console.log('Points',inPoints);\r\n                this.setState({\r\n                    inPoints:inPoints,\r\n                    features: updatedData,\r\n                    selectedFeatureIndexes: updatedSelectedFeatureIndexes,\r\n                });\r\n            }\r\n        });\r\n        const layers = this._renderLayers();\r\n        layers.push(layer);\r\n\r\n        return (\r\n            <Fragment>\r\n                <DeckGL\r\n                    layers={layers}\r\n                    effects={theme.effects}\r\n                    initialViewState={BEIJIN_VIEW_STATE}\r\n                    viewState={viewState}\r\n                    controller={{\r\n                        doubleClickZoom: false\r\n                    }}\r\n                    onViewStateChange={({viewState})=>{\r\n                        const viewport = new WebMercatorViewport(viewState);\r\n                        const nw = viewport.unproject([0, 0]);\r\n                        const se = viewport.unproject([viewport.width, viewport.height]);\r\n                        // console.log(\"north: \", nw[1], \", south: \", se[1]);\r\n                        // console.log(\"east: \", se[0], \"west: \", nw[0] );\r\n                        let bound=[[nw[0],se[0]],[se[1],nw[1]]];\r\n                        //判断在视野内\r\n                        // if(this.state.arcData.length>0){\r\n                        //     let tmpData=[];\r\n                        //     this.state.arcData.forEach(d=>{\r\n                        //         // debugger\r\n                        //         // console.log('arcData:',d);\r\n                        //         if( inbound(d.to.coordinates,bound)){\r\n                        //             // if(inbound(d.from.coordinates,bound)){\r\n                        //                 tmpData.push(d);\r\n                        //             // }\r\n                        //\r\n                        //         }\r\n                        //     });\r\n                        //     this.setState({\r\n                        //         arcData:tmpData\r\n                        //     })\r\n                        // }\r\n\r\n                    }}\r\n                    getCursor={layer.getCursor.bind(layer)}\r\n                >\r\n                    <StaticMap\r\n                        reuseMaps\r\n                        mapStyle={mapStyle}\r\n                        preventStyleDiffing={true}\r\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    >\r\n                    </StaticMap>\r\n                </DeckGL>\r\n                <button id = 'out'  style={{position:'absolute', zIndex: 2, top: '330px', right:'10px', backgroundColor: this.state.ODTag===0 ?  'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ODTag : 0})}}>\r\n                    {<this._Icon name={'arrow-to-left'} color='rgba(255,255,255,1)'/>}\r\n                </button>\r\n                <button id= 'in'  style={{position:'absolute', zIndex: 2, top: '365px', right:'10px',backgroundColor: this.state.ODTag===1 ?  'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ODTag: 1})}}>\r\n                    {<this._Icon name={'arrow-to-right'} color='rgba(255,255,255,1)'/>}\r\n                </button>\r\n                <button id = 'bridge'  style={{position:'absolute', zIndex: 2, top: '400px', right:'10px',backgroundColor: this.state.ODTag===2 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ODTag: 2})}}>\r\n                    {<this._Icon name={'trip'} color='rgba(255,255,255,1)'/>}\r\n                </button>\r\n                {/*<button id = 'clean'  style={{position:'absolute', zIndex: 2, top: '435px', right:'10px',backgroundColor: this.state.ODTag===3 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ODTag: 3})}}>*/}\r\n                {/*    {<this._Icon name={'trip'} color='rgba(255,255,255,1)'/>}*/}\r\n                {/*</button>*/}\r\n                {/*<button id = 'clean'  style={{color: 'white',padding: '50px 50px',fontsize:'16px',position:'absolute', zIndex: 2, top: '10px', left:'10px',backgroundColor: this.state.ToolTag===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ToolTag: 1})}}>*/}\r\n\r\n                {/*</button>*/}\r\n                {/*<button id = 'clean'  style={{color: 'white',padding: '15px 32px',fontsize:'16px',position:'absolute', zIndex: 2, top: '60px', left:'10px',backgroundColor: this.state.ToolTag===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ToolTag: 1})}}>*/}\r\n                {/*    {\"道路分析\"}*/}\r\n                {/*</button>*/}\r\n                {/*<button id = 'clean'  style={{color: 'white',padding: '15px 40px',fontsize:'16px',position:'absolute', zIndex: 2, top: '110px', left:'10px',backgroundColor: this.state.ToolTag===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ToolTag: 1})}}>*/}\r\n                {/*    {\"预测\"}*/}\r\n                {/*</button>*/}\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '10px', left:'10px',backgroundColor: this.state.moduleTag===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'70px',width:'100px'}} onClick={()=>{ this.setState({moduleTag: 1, moduleTag2: 0,moduleTag3: 0})}} >\r\n                    {'车流速度展示'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '80px', left:'10px',backgroundColor: this.state.moduleTag===2 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'70px',width:'100px'}} onClick={()=>{ this.setState({moduleTag: 2, moduleTag2: 0,moduleTag3: 0})}} >\r\n                    {'区域分析'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '150px', left:'10px',backgroundColor: this.state.moduleTag===3 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'70px',width:'100px'}} onClick={()=>{ this.setState({moduleTag: 3, moduleTag2: 0,moduleTag3: 0})}} >\r\n                    {'道路分析'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '220px', left:'10px',backgroundColor: this.state.moduleTag===4 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'70px',width:'100px'}} onClick={()=>{ this.setState({moduleTag: 4, moduleTag2: 0,moduleTag3: 0})}} >\r\n                    {'预测交互'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '10px', left:'110px',backgroundColor: this.state.moduleTag2===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 1,moduleTag: 1,moduleTag3: 0})}} >\r\n                    {'散点图'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '45px', left:'110px',backgroundColor: this.state.moduleTag2===2 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 2,moduleTag: 1,moduleTag3: 0})}} >\r\n                    {'柱状图'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '80px', left:'110px',backgroundColor: this.state.moduleTag2===3 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'75px'}} onClick={()=>{ this.setState({moduleTag2: 3, moduleTag: 2,moduleTag3: 0})}} >\r\n                    {'区域内分析'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '115px', left:'110px',backgroundColor: this.state.moduleTag2===4 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'75px'}} onClick={()=>{ this.setState({moduleTag2: 4,moduleTag: 2,moduleTag3: 0})}} >\r\n                    {'区域间分析'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '80px', left:'185px',backgroundColor: this.state.moduleTag3===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'75px'}} onClick={()=>{ this.setState({moduleTag3: 1,moduleTag2: 3, moduleTag: 2})}} >\r\n                    {'线性'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '97.5px', left:'185px',backgroundColor: this.state.moduleTag3===2 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'75px'}} onClick={()=>{ this.setState({moduleTag3: 2,moduleTag2: 3, moduleTag: 2})}} >\r\n                    {'周期'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '115px', left:'185px',backgroundColor: this.state.moduleTag3===3 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'75px'}} onClick={()=>{ this.setState({moduleTag3: 3,moduleTag2: 4,moduleTag: 2})}} >\r\n                    {'进出统计'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '132.5px', left:'185px',backgroundColor: this.state.moduleTag3===4 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'75px'}} onClick={()=>{ this.setState({moduleTag3: 4,moduleTag2: 4, moduleTag:2})}} >\r\n                    {'区域间对比'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '150px', left:'110px',backgroundColor: this.state.moduleTag2===5 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 5,moduleTag:3,moduleTag3: 0})}} >\r\n                    {'道路点趋势'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '185px', left:'110px',backgroundColor: this.state.moduleTag2===6 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 6,moduleTag: 3,moduleTag3: 0})}} >\r\n                    {'道路多点对比'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '220px', left:'110px',backgroundColor: this.state.moduleTag2===7 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 7, moduleTag3: 0, moduleTag: 4})}} >\r\n                    {'请求数据展示'}\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '237.5px', left:'110px',backgroundColor: this.state.moduleTag2===8 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'100px'}} onClick={()=>{ this.setState({moduleTag2: 8, moduleTag3: 0, moduleTag: 4})}} >\r\n                    <div >{'请求数据筛选'}</div>\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '255px', left:'110px',backgroundColor: this.state.moduleTag2===9 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'100px'}} onClick={()=>{ this.setState({moduleTag2: 9, moduleTag3: 0, moduleTag: 4})}} >\r\n                    <div >{'请求数据生成'}</div>\r\n                </button>\r\n                <button id = 'showSpeed'  style={{ position:'absolute', zIndex: 2, top: '272.5px', left:'110px',backgroundColor: this.state.moduleTag2===10 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'100px'}} onClick={()=>{ this.setState({moduleTag2: 10, moduleTag3: 0, moduleTag: 4})}} >\r\n                    <div >{'影响值调整'}</div>\r\n                </button>\r\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '237.5px', left:'210px',backgroundColor: this.state.moduleTag3===5 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'52.5px',width:'50px'}} onClick={()=>{ this.setState({ moduleTag3: 5, moduleTag: 4})}} >\r\n                    {'提交'}\r\n                </button>\r\n                <Toolbox\r\n                    mode={this.state.mode}\r\n                    onSetMode={(setmode)=>{this.setState({mode:setmode()});\r\n                    }}\r\n                    modeConfig={this.state.modeConfig}\r\n                    onSetModeConfig={(setmodeconfig)=>{this.setState({modeConfig:setmodeconfig()})}}\r\n                    geoJson={this.state.features}\r\n                    onSetGeoJson={(setfeatures)=>{this.setState({features:setfeatures()})}}\r\n                    onImport={(setfeatures)=>{this.setState({features:setfeatures()})}}\r\n                />\r\n\r\n                {/*{this._renderDrawSelectBar()}*/}\r\n                { this._renderTooltipDep() }\r\n                {this._renderTooltipDes()}\r\n                <StyletronProvider value={engine}>\r\n                    <BaseProvider theme={LightTheme}>\r\n                        {/*<SliderTraffic*/}\r\n                        {/*    min={0}*/}\r\n                        {/*    max={86400}*/}\r\n                        {/*    value={[0,this.state.time]}*/}\r\n                        {/*    formatLabel={this._formatLabel}*/}\r\n                        {/*    onChange={({value}) => {*/}\r\n                        {/*        let nowTime=value[1];*/}\r\n\r\n                        {/*        if(blockData.has(nowTime)){*/}\r\n                        {/*            console.log('icon')*/}\r\n                        {/*            tmpIcon.push({*/}\r\n                        {/*                coordinates:blockData.get(nowTime)*/}\r\n                        {/*            })*/}\r\n                        {/*            let tmp=[];*/}\r\n                        {/*            tmpIcon.forEach(d=>{*/}\r\n                        {/*                tmp.push(d)*/}\r\n                        {/*            })*/}\r\n                        {/*            // if(tmpIcon.length>10){*/}\r\n                        {/*                console.log('set')*/}\r\n                        {/*                this.setState({*/}\r\n                        {/*                    blockIcon:tmp*/}\r\n                        {/*                })*/}\r\n                        {/*            // }*/}\r\n                        {/*            console.log(this.state.blockIcon)*/}\r\n                        {/*        }*/}\r\n\r\n                        {/*        // console.log('nowTime:',nowTime);*/}\r\n                        {/*        if(Math.floor(nowTime/3600)!==this.state.hour){*/}\r\n                        {/*            this.setState({hour:Math.floor(nowTime/3600)})*/}\r\n                        {/*            console.log('nowztime:',nowTime);*/}\r\n                        {/*            var hour=(nowTime/3600).toFixed(0);*/}\r\n                        {/*            console.log('hour:',hour);*/}\r\n                        {/*            this.setState({*/}\r\n                        {/*                pre_org:setPredictData(hour),*/}\r\n                        {/*                real_org:setRealData(hour)*/}\r\n                        {/*            });*/}\r\n                        {/*            // console.log('pre_org',this.state.pre_org);*/}\r\n\r\n                        {/*            var p=getRoute(hour);*/}\r\n                        {/*            p.then(function() {*/}\r\n                        {/*                console.log('Route',Routes)*/}\r\n                        {/*                this.setState({*/}\r\n                        {/*                    Route:Routes,*/}\r\n                        {/*                    depPolygon:depPolygon,*/}\r\n                        {/*                    desPolygon:desPolygon*/}\r\n                        {/*                })*/}\r\n                        {/*            }.bind(this))*/}\r\n                        {/*        }*/}\r\n                        {/*        this.setState({time: nowTime})*/}\r\n                        {/*        // console.log('time',this.state.time)*/}\r\n                        {/*        //console.log(this.state)*/}\r\n                        {/*        //console.log('value:',value)*/}\r\n                        {/*    }}*/}\r\n                        {/*/>*/}\r\n\r\n                        <SliderTraffic\r\n                            min={0}\r\n                            max={87840} //分钟\r\n                            value={[0,this.state.time]}\r\n                            formatLabel={this._formatLabel}\r\n                            onChange={({value}) => {\r\n                                let nowTime=value[1];\r\n                                // console.log('nowTime:',nowTime);\r\n                                if(Math.floor(nowTime/15)!==this.state.Quater){\r\n                                    this.setState({Quater:Math.floor(nowTime/15)}) //一天24小时\r\n                                    console.log('nowztime:',nowTime);\r\n                                    // var hour=((nowTime/60)%24).toFixed(0);\r\n                                    // console.log('hour:',hour);\r\n                                    // this.setState({\r\n                                    //     pre_org:setPredictData(hour),\r\n                                    //     real_org:setRealData(hour)\r\n                                    // });\r\n                                    // console.log('pre_org',this.state.pre_org);\r\n                                    // var p=getRoute(hour);\r\n                                    // p.then(function() {\r\n                                    //     console.log('Route',Routes)\r\n                                    //     this.setState({\r\n                                    //         Route:Routes,\r\n                                    //         depPolygon:depPolygon,\r\n                                    //         desPolygon:desPolygon\r\n                                    //     })\r\n                                    // }.bind(this))\r\n                                    let num=Math.floor(nowTime/15);\r\n\r\n                                    let p4=getBeijingSpeed(num);\r\n\r\n                                    p4.then(function(){\r\n                                        let p5=getPathlist();\r\n                                        p5.then(function(){\r\n                                            getNodeSpeedMap();\r\n                                            let p3=getBeiJingData();\r\n                                            p3.then(function(){\r\n                                                // console.log('beijing',Beijingdata);\r\n                                                this.setState({\r\n                                                    BeijingSpeedData:Beijingdata\r\n                                                })\r\n\r\n                                            }.bind(this))\r\n                                        }.bind(this))\r\n                                    }.bind(this));\r\n\r\n                                    //num 是除以15后的时间就是测速点\r\n                                    let p_getQuery=getQueryData(num);\r\n                                    p_getQuery.then(function (){\r\n                                        this.setState({\r\n                                            arcData:queryData\r\n                                        });\r\n                                        // 直接设置无法更新图层，不知道怎么才能比较好的更新，原数据置空会更新\r\n                                        // if(num%2===0){\r\n                                        //     console.log('clean');\r\n                                        //     this.setState({\r\n                                        //         arcData:[]\r\n                                        //     });\r\n                                        // }\r\n                                        console.log('arcData:',this.state.arcData)\r\n                                    }.bind(this))\r\n\r\n                                }\r\n                                this.setState({time: nowTime})\r\n                                // console.log('time',this.state.time)\r\n                                //console.log(this.state)\r\n                                //console.log('value:',value)\r\n                            }}\r\n                        />\r\n\r\n\r\n\r\n                {/*     <SelectContainer>*/}\r\n                {/*        <Select id={'area'}*/}\r\n                {/*        options={[*/}\r\n                {/*            {label:\"出发区域\",id:'dep_polygon'},*/}\r\n                {/*            {label:\"到达区域\",id:'des_polygon'},*/}\r\n                {/*            { label: \"隐藏\", id: \"\" },*/}\r\n\r\n                {/*        ]}*/}\r\n                {/*        value={this.state.area}*/}\r\n                {/*        placeholder=\"显示区域\"*/}\r\n                {/*        // onChange={params => setValue(params.value)}*/}\r\n                {/*        size={SIZE.mini}*/}\r\n                {/*        onChange={params=> {*/}\r\n                {/*            // console.log('params:',params);*/}\r\n                {/*            if(params.option!=null){*/}\r\n                {/*                if(params.option.id=='dep_polygon'){*/}\r\n                {/*                    console.log()*/}\r\n                {/*                    this.setState({*/}\r\n                {/*                        depPolygon:depPolygon,*/}\r\n                {/*                        depV:true,*/}\r\n                {/*                        desV:false,*/}\r\n                {/*                        area:[{label:\"出发区域\",id:'dep_polygon'}]*/}\r\n                {/*                    })*/}\r\n                {/*                }*/}\r\n                {/*                else if(params.option.id=='des_polygon'){*/}\r\n                {/*                    console.log('desPolygon',this.state.desPolygon)*/}\r\n                {/*                    this.setState({*/}\r\n                {/*                        desPolygon:desPolygon,*/}\r\n                {/*                        desV:true,*/}\r\n                {/*                        depV:false,*/}\r\n                {/*                        area:[{label:\"到达区域\",id:'des_polygon'}]*/}\r\n                {/*                    })*/}\r\n                {/*                }*/}\r\n                {/*                else{*/}\r\n                {/*                    this.setState({*/}\r\n                {/*                        desV:false,*/}\r\n                {/*                        depV:false,*/}\r\n                {/*                        area:[{ label: \"隐藏\", id: \"\" }]*/}\r\n                {/*                    })*/}\r\n                {/*                }*/}\r\n                {/*            }*/}\r\n                {/*            else{*/}\r\n                {/*                this.setState({*/}\r\n                {/*                    area:[],*/}\r\n                {/*                    desV:false,*/}\r\n                {/*                    depV:false,*/}\r\n                {/*                })*/}\r\n                {/*            }*/}\r\n\r\n                {/*        }}*/}\r\n                {/*    />*/}\r\n\r\n                {/*</SelectContainer>*/}\r\n                {/*        <SelectContainer2>*/}\r\n                {/*            <Select id={'option'}*/}\r\n                {/*                    options={[*/}\r\n                {/*                        {label:\"显示轨迹\",id:'route'},*/}\r\n                {/*                        {label:'预测流量',id:\"predict\"},*/}\r\n                {/*                        {label:\"实际流量\",id:'real'},*/}\r\n                {/*                        {label:'路障检测',id:'block'}*/}\r\n                {/*                    ]}*/}\r\n                {/*                    value={this.state.options}*/}\r\n                {/*                    placeholder={'选择服务'}*/}\r\n                {/*                    size={SIZE.mini}*/}\r\n                {/*                    onChange={ params=>{*/}\r\n                {/*                        if (params.option!==null){*/}\r\n                {/*                            if(params.option.id==='predict'){*/}\r\n                {/*                                this.setState({*/}\r\n                {/*                                    real:false,*/}\r\n                {/*                                    options:[{label:\"预测流量\",id:\"predict\"}],*/}\r\n                {/*                                    showPredict:true*/}\r\n                {/*                                })*/}\r\n                {/*                            }*/}\r\n                {/*                            else if(params.option.id==='real'){*/}\r\n                {/*                                this.setState({*/}\r\n                {/*                                    real:true,*/}\r\n                {/*                                    options:[{label:\"实际流量\",id:\"real\"}],*/}\r\n                {/*                                    showPredict:true*/}\r\n                {/*                                })*/}\r\n                {/*                            }*/}\r\n                {/*                            else if(params.option.id==='block'){*/}\r\n                {/*                                this.setState({*/}\r\n                {/*                                    block:true,*/}\r\n                {/*                                    options:[{label:\"路障检测\",id:\"block\"}],*/}\r\n                {/*                                    time:45466,*/}\r\n                {/*                                    showPredict:false,*/}\r\n                {/*                                    showRoute:false*/}\r\n                {/*                                })*/}\r\n\r\n                {/*                            }*/}\r\n                {/*                            else if(params.option.id==='route'){*/}\r\n                {/*                                this.setState({*/}\r\n                {/*                                    block:false,*/}\r\n                {/*                                    options:[{label:\"显示轨迹\",id:\"route\"}],*/}\r\n                {/*                                    showRoute:true,*/}\r\n\r\n                {/*                                })*/}\r\n                {/*                            }*/}\r\n                {/*                        }*/}\r\n                {/*                    }}*/}\r\n                {/*            />*/}\r\n                {/*        </SelectContainer2>*/}\r\n                    </BaseProvider>\r\n                </StyletronProvider>\r\n                <div id={'background'} style ={background}>\r\n                    <div id={'line'}/>\r\n                    <div id={'pie'}/>\r\n                <div id={'stream'}/>\r\n\r\n                <div id={'column'}/>\r\n                <canvas id=\"heatchart\" width=\"400\" height=\"260\"\r\n                />\r\n                <div id=\"raid\"/>\r\n                <div id={\"stackColumn\"}/>\r\n                </div>\r\n\r\n                <Panel/>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/* {(<SliderInput\r\n                     value={[0,this.state.time]}\r\n                    min={0}\r\n                    max={24 * 60}\r\n                    formatLabel={this._formatLabel}\r\n                    onChange={({value}) => {\r\n                        if (value % 3600 === 0) {\r\n                            var p = getRoute(value / 3600);\r\n                            p.then(function () {\r\n                                this.setState({\r\n                                    Routes: Routes\r\n                                })\r\n                            }.bind(this))\r\n                        }\r\n                        this.setState({time: value});\r\n                        console.log(value)\r\n                    }}\r\n                />)\r\n                }*/\r\n\r\n\r\n// export function renderToDOM(container) {\r\n//     render(<App />, container);\r\n// }\r\n\r\n\r\n\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n// ReactDOM.render(<CustomTicks />,document.getElementById('app'))\r\n\r\n// require('d3-request').csv(DATA_URL, (error, response) => {\r\n//         if (!error) {\r\n//             const data = response.map(row => ({\r\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\r\n//                 latitude: Number(row.Latitude),\r\n//                 longitude: Number(row.Longitude),\r\n//                 depth: Number(row.Depth),\r\n//                 magnitude: Number(row.Magnitude)\r\n//             }));\r\n//             ReactDOM.render(<App2 data={data} />, document.getElementById('root'));\r\n//         }\r\n//     });\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\lineChart\\main.js",["254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272"],"import * as d3 from 'd3'\r\nimport React, {useState, useCallback, useEffect, Fragment, Component} from 'react';\r\n\r\nimport {ColorLegend} from \"./ColorLegend\";\r\nimport './line.css'\r\nconst width = 960;\r\nconst height = 500;\r\nconst margin = { top: 20, right: 200, bottom: 65, left: 150 };\r\nvar innerWidth = width - margin.right - margin.left;\r\nvar innerHeight = height - margin.top - margin.bottom;\r\nconst colorLegendLabel='country';\r\nconst circleRadius=5;\r\nconst colorScale = d3.scaleOrdinal()\r\nconst countrylist=['China','US','Japan','Italy','France','United Kingdom'];\r\nconst colorTable=['#E25A42','#F2DA57','#42A5B3','#A0B700','#193556','#137B80'];\r\ncolorScale.domain(countrylist)\r\n    .range(colorTable)\r\n\r\nconst totalTime=10000;\r\n// let currentTime=new Date(2020,1,22);\r\n\r\nconst yScale = d3.scaleLinear()\r\n    .domain([0, 100000])\r\n    .range([innerHeight, 0]);\r\nconst yAxisGenerator = d3.axisLeft()\r\n    // .tickValues(d3.range(0, 3, 5));\r\n    let xdomain=[new Date(2020, 0, 22), new Date()];\r\n    let xScale=d3.scaleTime()\r\n        .domain(xdomain)\r\n        .range([0, innerWidth]);\r\n    const xAxisGenerator = d3.axisBottom()\r\n\r\n\r\n    let covidMap=new Map();\r\n    //数据格式\r\n//{\r\n//  {\r\n//  {\r\n//  'country':{\r\n//      time1:\r\n//      time2:\r\n//      ...\r\n//  }\r\n//\r\n//  }\r\n//}\r\n    let dateKey=[];\r\n    let sorted=new Map();\r\n    let dataFlow=[];\r\n\r\n    let lineData=[]\r\n    function getCovid() {\r\n        return new Promise(resolve => {\r\n            d3.csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv').then(d=>{\r\n            d.map((i,index)=>{\r\n                for(let k in i){\r\n                    let t=new Date(k)\r\n                    if(t.getDate()){\r\n                        i[k]=parseInt(i[k])\r\n                    }\r\n                }\r\n                if(!covidMap.has(i['Country/Region'])){\r\n                    covidMap.set(i['Country/Region'],i)\r\n                }\r\n                else{\r\n                    let tmp=covidMap.get(i['Country/Region'])\r\n                    for(let k in tmp){\r\n                        // console.log(k)\r\n                        let d=new Date(k);\r\n                        if(d.getDate()){\r\n                            if(dateKey.indexOf(k)===-1){\r\n                                dateKey.push(k)\r\n                            }\r\n                            // console.log(tmp[k])\r\n                            tmp[k]=(tmp[k]+i[k])\r\n                            // console.log(tmp)\r\n                        }\r\n                    }\r\n                }\r\n                }\r\n            )\r\n                //这么做好像没有什么用，曲线图是将每天的数据\r\n                console.log(covidMap)\r\n                // dateKey.forEach(d=>{\r\n                //     console.log(new Date(d))\r\n                // })\r\n                countrylist.map((d,index)=>{\r\n                    let c={\r\n                        color:colorTable[index],\r\n                        country: d,\r\n                        path:[]\r\n                    }\r\n                    for(let k in covidMap.get(d)){\r\n                        let tmp=new Date(k);\r\n                        if(tmp.getDate()){\r\n                            // console.log('k',k)\r\n                            let t=new Date(tmp.getFullYear(),tmp.getMonth(),tmp.getDate())\r\n                       c.path.push([tmp,covidMap.get(d)[k]])\r\n                        }\r\n                    }\r\n                    lineData.push(c)\r\n                })\r\n                console.log(lineData)\r\n                resolve()\r\n\r\n                // dateKey.forEach(k=>{\r\n                //     let arrayMap=Array.from(covidMap)\r\n                //     console.log('arrayMap',arrayMap);\r\n                //     let tmp=[]\r\n                //     arrayMap.forEach(d=>{\r\n                //         if(countrylist.indexOf(d[0])!==-1){\r\n                //             // tmp.push({\r\n                //             //     Country:d[0]\r\n                //             //     Value:\r\n                //             // })\r\n                //         }\r\n                //     })\r\n                //\r\n                //     sorted[k]= arrayMap.sort((a,b)=>{\r\n                //         if(a[1][k]>b[1][k]){\r\n                //             return -1\r\n                //         }\r\n                //         else return 1\r\n                //     })\r\n                //     // console.log(sorted[k])\r\n                // })\r\n                // console.log(sorted)\r\n                // for(let i in sorted){\r\n                //\r\n                // }\r\n\r\n            })\r\n        })\r\n    }\r\n\r\nlet last = array => array[array.length - 1];\r\n\r\n\r\n\r\n\r\n    // var xAxisMajor = d3.axisBottom().scale(xScale);\r\n    // var xAxisMinor = d3.axisBottom().scale(xScale).ticks(50);\r\n\r\n    // const circleRadius = 7;\r\n    // const colorLegendLabel='city'\r\n    // const colorScale = d3.scaleOrdinal()\r\n    // let range=[];\r\n    // if(keys){\r\n    //     keys.forEach((d,i)=>{\r\n    //             range.push(d3.interpolateSpectral(i/8))\r\n    //         }\r\n    //     )\r\n    //     colorScale.domain(keys)\r\n    //         .range(range)\r\n    // }\r\n//\r\n// }\r\n\r\n\r\n\r\nfunction setData(day) {\r\n    let data=[]\r\n    lineData.map((x)=>{\r\n        let tmp=[];\r\n        x.path.map((i,index)=>{\r\n            if(index>day){\r\n                tmp.push(x.path[day])\r\n            }\r\n            else{\r\n                tmp.push(i)\r\n            }\r\n        })\r\n        data.push({\r\n            color:x.color,\r\n            country:x.country,\r\n            path:tmp\r\n        })\r\n    })\r\n    return data\r\n}\r\n\r\nexport default class App extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            day:0,\r\n            linedata:[],\r\n            yScale:d3.scaleLinear()\r\n                .domain([0, 10000])\r\n                .range([innerHeight, 0])\r\n                .nice(),\r\n            lineGenerator : d3.line()\r\n            // .curve(d3.curveCatmullRom)\r\n                .x(d => xScale(d[0]))\r\n                .y(d => this.state.yScale(d[1]))\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let testData=\r\n            []\r\n        //     [{\r\n        //     path:[[new Date(2020,0,22),1000],[new Date(2020,1,10),10000]]\r\n        // }]\r\n        let p1=getCovid();\r\n        p1.then(result=>{\r\n            let svg=d3.select('svg');\r\n            const g = svg.append(\"g\")\r\n                .attr('id','Axis')\r\n                .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n            let gx=g.append(\"g\")\r\n            // .call(xAxisGenerator)\r\n                .attr(\"transform\", `translate(0, ${innerHeight})`);\r\n            let gy=g.append(\"g\").attr('id','yAxis')\r\n                gy.call(yAxisGenerator.scale(this.state.yScale));\r\n            let p=gx.transition().duration(2000)\r\n                .call(xAxisGenerator.scale(xScale))\r\n                .end()\r\n            p.then(\r\n                // ()=>{\r\n                //     let x=d3.scaleTime()\r\n                //         .domain([new Date(2010, 0, 1), new Date(2010, 10, 1)])\r\n                //         .range([0, innerWidth])\r\n                //     gx.transition().duration(2000)\r\n                //         .call(xAxisGenerator.scale(x))\r\n                // }\r\n            )\r\n            svg.append('g').attr('id','line')\r\n                .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n            svg.append('g').attr('id','text')\r\n                .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\r\n            // let lineg=svg.append('g');\r\n            //\r\n            // let line=lineg.selectAll('path')\r\n            //     .data(this.state.linedata)\r\n            //     .join('path')\r\n            //\r\n            // line\r\n            //     .attr(\"fill\", \"none\")\r\n            //     .attr(\"stroke\", \"black\")\r\n            //     .attr(\"stroke-width\", 2.5)\r\n            //     .attr(\"stroke-linejoin\", \"round\")\r\n            //     .attr(\"stroke-linecap\", \"round\")\r\n            //     .attr(\"d\",lineGenerator(this.state.linedata))\r\n\r\n            // let lineg=d3.select('#line');\r\n            // let line=lineg.selectAll('path')\r\n            //     .data(testData)\r\n            //     .join('path')\r\n            //     .attr(\"fill\", \"none\")\r\n            //     .attr(\"stroke\", \"black\")\r\n            //     .attr(\"stroke-width\", 2.5)\r\n            //     .attr(\"stroke-linejoin\", \"round\")\r\n            //     .attr(\"stroke-linecap\", \"round\")\r\n            //     // .attr(\"d\",lineGenerator(this.state.linedata[0].path))\r\n            //     .attr(\"d\",d=>{\r\n            //         console.log('d',lineGenerator(d.path))\r\n            //         return lineGenerator(d.path)\r\n            //     });\r\n            // setTimeout(function () {\r\n            //\r\n            //     this.setState({\r\n            //         linedata: newData\r\n            //     })\r\n            // },1000)\r\n            this._animate()\r\n        });\r\n    }\r\n    _animate(){\r\n\r\n\r\n            let newData=setData(this.state.day)\r\n            console.log('newData',newData);\r\n            let max=-1;\r\n            newData.map(x=>{\r\n                x.path.map(t=>{\r\n                    if(t[1]>max){\r\n                        max=t[1]\r\n                    }\r\n                })\r\n            })\r\n            if(this.state.yScale.domain()[1]<max){\r\n                this.state.yScale.domain([0,max])\r\n                let gy=d3.select('#yAxis');\r\n                gy.transition().duration(500).call(yAxisGenerator.scale(this.state.yScale))\r\n            }\r\n\r\n            this.setState({\r\n                        linedata: newData\r\n                    })\r\n\r\n        let text=d3.select('#text');\r\n            text.selectAll('text')\r\n                .data(this.state.linedata)\r\n                .join('text')\r\n                .property('_next',function(d){\r\n                    console.log(d)\r\n                    return d.path[this.state.day][1]\r\n                }.bind(this))\r\n                .property('_current',function (d) {\r\n                    if(this.state.day!==0){\r\n                        return d.path[this.state.day-1][1]\r\n                    }\r\n                    else return d.path[this.state.day][1]\r\n\r\n                }.bind(this))\r\n                .transition()\r\n                .duration(500)\r\n                .ease(d3.easeLinear)\r\n                .textTween(function(d) {\r\n                    // console.log('d',d);\r\n                    // console.log('day',this.state.day)\r\n                    const i = d3.interpolate(this._current, this._next);\r\n                    return function(t) { return this._cuurent=i(t).toFixed(0); };\r\n                })\r\n                // .text(d=>d.path[this.state.day][1])\r\n                .attr('transform',d=> `translate(${xScale(d.path[this.state.day][0])}, ${this.state.yScale(d.path[this.state.day][1])})`)\r\n                .style(\"font-family\", \"monospace\")\r\n                .style(\"fill\", d => d.color);\r\n\r\n            let lineg=d3.select('#line');\r\n            let line=lineg.selectAll('path')\r\n                .data(this.state.linedata)\r\n                .join('path')\r\n            let p=line\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"stroke\", d=>d.color)\r\n                .attr(\"stroke-width\", 2.5)\r\n                .attr(\"stroke-linejoin\", \"round\")\r\n                .attr(\"stroke-linecap\", \"round\")\r\n                .transition()\r\n                .ease(d3.easeLinear)\r\n                .duration(500)\r\n                .attr(\"d\",d=>this.state.lineGenerator(d.path))\r\n                .end()\r\n            p.then(()=>{\r\n                if(this.state.day<this.state.linedata[0].path.length-1){\r\n                    // let y = d3.scaleLinear()\r\n                    //     .domain([0, 1000])\r\n                    //     .range([innerHeight, 0]);\r\n                    // let gy=d3.select('#yAxis');\r\n                    // gy.transition().duration(500).call(yAxisGenerator.scale(y))\r\n                    xdomain=[new Date(2020, 0, 22), new Date(2020, 3, 1)]\r\n                    this.state.day+=1;\r\n                    this._animationFrame = window.requestAnimationFrame(this._animate.bind(this));\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        if (this._animationFrame) {\r\n            window.cancelAnimationFrame(this._animationFrame);\r\n        }\r\n    }\r\n\r\n     render() {\r\n\r\n\r\n\r\n\r\n         return <div className={'line'}>\r\n             <svg width={width} height={height}>\r\n                 <g transform={`translate(${margin.left},${margin.top})`}>\r\n                     <g transform={`translate(${innerWidth + 60}, 60)`}>\r\n                         <text x={35} y={-25} className=\"axis-label\" textAnchor=\"middle\" >\r\n                             {colorLegendLabel}\r\n                         </text>\r\n                         <ColorLegend\r\n                             tickSpacing={22}\r\n                             tickSize={10}\r\n                             tickTextOffset={12}\r\n                             tickSize={circleRadius}\r\n                             colorScale={colorScale}\r\n                             // onHover={setHoveredValue}\r\n                             // hoveredValue={hoveredValue}\r\n                             // fadeOpacity={fadeOpacity}\r\n                         />\r\n                     </g>\r\n                 </g>\r\n\r\n             </svg>\r\n         </div>\r\n     }\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\covid-19.jsx",["273","274","275","276"],"import React, {Component, Fragment} from 'react';\r\nimport {render} from 'react-dom';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport DeckGL from '@deck.gl/react';\r\nimport {ScatterplotLayer} from '@deck.gl/layers';\r\nimport {DataFilterExtension} from '@deck.gl/extensions';\r\nimport {MapView} from '@deck.gl/core';\r\nimport SliderCovid from './sliderCovid'\r\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\r\nimport * as d3 from 'd3'\r\n\r\n\r\n// Set your mapbox token here\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\r\n\r\n\r\nconst MAP_VIEW = new MapView({\r\n    // 1 is the distance between the camera and the ground\r\n    farZMultiplier: 100\r\n});\r\n\r\n\r\nlet days=39;\r\n\r\nlet flag=-1;\r\n\r\n//read data\r\n\r\nlet dateMap=new Map();\r\nfunction getData(){\r\n    return new Promise(resolve => {\r\n        d3.csv(\"./COVID19_open_line_list.csv\").then(function (data) {\r\n            data.forEach(d=>{\r\n                let tmp=d.date_confirmation.split('.');\r\n                let tmpstr=tmp[2]+'-'+tmp[1]+'-'+tmp[0];\r\n                if(dateMap.has(tmpstr)){\r\n                    dateMap.get(tmpstr).push([d.longitude,d.latitude])\r\n                }\r\n                else{\r\n                    dateMap.set(tmpstr,[]);\r\n                }\r\n            })\r\n            resolve('done');\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n    longitude:  120.207057,\r\n    latitude: 30.225901,\r\n    zoom: 3,\r\n    pitch: 0,\r\n    bearing: 0\r\n};\r\n\r\nconst MS_PER_DAY = 8.64e7; // milliseconds in a day\r\n\r\nconst dataFilter = new DataFilterExtension({filterSize: 1});\r\n\r\nexport default class Covid extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //\r\n    //     const timeRange = this._getTimeRange(props.data);\r\n    //\r\n    //     this.state = {\r\n    //         timeRange,\r\n    //         filterValue: timeRange,\r\n    //         hoveredObject: null\r\n    //     };\r\n    //     this._onHover = this._onHover.bind(this);\r\n    //     this._renderTooltip = this._renderTooltip.bind(this);\r\n    // }\r\n    constructor(props) {\r\n        super(props);\r\n        // const [value, setValue] = React.useState([0]);\r\n        this.state = {\r\n            pointData:[],\r\n            days:days,\r\n            dayCount:0\r\n        };\r\n    }\r\n\r\n    // componentWillReceiveProps(nextProps) {\r\n    //     if (nextProps.data !== this.props.data) {\r\n    //         const timeRange = this._getTimeRange(nextProps.data);\r\n    //         this.setState({timeRange, filterValue: timeRange});\r\n    //     }\r\n    // }\r\n\r\n    // _getTimeRange(data) {\r\n    //     if (!data) {\r\n    //         return null;\r\n    //     }\r\n    //     return data.reduce(\r\n    //         (range, d) => {\r\n    //             const t = d.timestamp / MS_PER_DAY;\r\n    //             range[0] = Math.min(range[0], t);\r\n    //             range[1] = Math.max(range[1], t);\r\n    //             return range;\r\n    //         },\r\n    //         [Infinity, -Infinity]\r\n    //     );\r\n    // }\r\n\r\n    // _onHover({x, y, object}) {\r\n    //     this.setState({x, y, hoveredObject: object});\r\n    // }\r\n    _renderLayers() {\r\n\r\n        return [\r\n            // new ScatterplotLayer({\r\n            //     id: 'covid',\r\n            //     data:this.state.pointData,\r\n            //     opacity: 0.8,\r\n            //     radiusScale: 100,\r\n            //     radiusMinPixels: 1,\r\n            //     wrapLongitude: true,\r\n            //\r\n            //     getPosition: d =>d.coordinate,\r\n            //     getRadius: 500,\r\n            //     // getFillColor: d => {\r\n            //     //     const r = Math.sqrt(Math.max(d.depth, 0));\r\n            //     //     return [255 - r * 15, r * 5, r * 10];\r\n            //     // },\r\n            //\r\n            //     getFillColor:[255,0,0,255],\r\n            //\r\n            //     // getFilterValue: d => d.timestamp / MS_PER_DAY, // in days\r\n            //     // filterRange: [filterValue[0], filterValue[1]],\r\n            //     // filterSoftRange: [\r\n            //     //     filterValue[0] * 0.9 + filterValue[1] * 0.1,\r\n            //     //     filterValue[0] * 0.1 + filterValue[1] * 0.9\r\n            //     // ],\r\n            //     // extensions: [dataFilter],\r\n            //\r\n            //     pickable: true,\r\n            //     // onHover: this._onHover\r\n            // }),\r\n            new HeatmapLayer({\r\n                id:'heatmap',\r\n                data:this.state.pointData,\r\n                getPosition:d=>d.coordinate,\r\n                getWeight:10,\r\n                radiusPixels:20\r\n\r\n            })\r\n        ];\r\n    }\r\n\r\n    // _renderTooltip() {\r\n    //     const {x, y, hoveredObject} = this.state;\r\n    //     return (\r\n    //         hoveredObject && (\r\n    //             <div className=\"tooltip\" style={{top: y, left: x}}>\r\n    //                 <div>\r\n    //                     <b>Time: </b>\r\n    //                     <span>{new Date(hoveredObject.timestamp).toUTCString()}</span>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                     <b>Magnitude: </b>\r\n    //                     <span>{hoveredObject.magnitude}</span>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                     <b>Depth: </b>\r\n    //                     <span>{hoveredObject.depth} km</span>\r\n    //                 </div>\r\n    //             </div>\r\n    //         )\r\n    //     );\r\n    // }\r\n\r\n    _formatLabel(t) {\r\n        const date = new Date('2020-01-22');\r\n        date.setDate(date.getDate()+t);\r\n        return `${date.getFullYear()}/${date.getMonth()+1}/${date.getDate()}`;\r\n    }\r\n\r\n    render() {\r\n        const {mapStyle = 'mapbox://styles/mapbox/light-v9'} = this.props;\r\n        // const {timeRange, filterValue} = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <DeckGL\r\n                    views={MAP_VIEW}\r\n                    layers={this._renderLayers()}\r\n                    initialViewState={INITIAL_VIEW_STATE}\r\n                    controller={true}\r\n                >\r\n                    <StaticMap\r\n                        reuseMaps\r\n                        mapStyle={mapStyle}\r\n                        preventStyleDiffing={true}\r\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    />\r\n\r\n                    {/*{this._renderTooltip}*/}\r\n                </DeckGL>\r\n\r\n                <SliderCovid\r\n                    min={0}\r\n                    max={this.state.days}\r\n                    value={[0,this.state.dayCount]}\r\n                    formatLabel={this._formatLabel}\r\n\r\n                    onChange={({date,value}) => {\r\n                        console.log('value:',value)\r\n\r\n                        if(flag===-1){\r\n                            let p=getData();\r\n                            console.log(dateMap);\r\n                            p.then(result=>{\r\n                                let pointData=[];\r\n                                if(dateMap.has(date)){\r\n                                    dateMap.get(date).forEach(d=>{\r\n                                        console.log(d)\r\n                                        pointData.push({\r\n                                            coordinate:[parseFloat(d[0]),parseFloat(d[1])]\r\n                                        })\r\n                                    })\r\n                                    this.setState({\r\n                                        pointData:pointData,\r\n                                        dayCount:value[1]\r\n                                    })\r\n                                }\r\n\r\n                                flag=0;\r\n\r\n                            });\r\n\r\n                        }\r\n                        else{\r\n                            let pointData=[];\r\n\r\n                            if(dateMap.has(date)){\r\n                                dateMap.get(date).forEach(d=>{\r\n                                    pointData.push({\r\n                                        coordinate:[parseFloat(d[0]),parseFloat(d[1])]\r\n                                    })\r\n                                });\r\n                                this.setState({\r\n                                    pointData:pointData,\r\n                                    // dayCount:this.state.dayCount+1\r\n                                });\r\n                            }\r\n\r\n                            this.setState({\r\n                                dayCount:value[1]\r\n                            })\r\n                            console.log(this.state.pointData);\r\n                        }\r\n\r\n\r\n\r\n\r\n                        // let nowTime=value[1];\r\n                        // // console.log('nowTime:',nowTime);\r\n                        // if(Math.floor(nowTime/3600)!==this.state.hour){\r\n                        //     this.setState({hour:Math.floor(nowTime/3600)})\r\n                        //     console.log('nowztime:',nowTime);\r\n                        //     var hour=(nowTime/3600).toFixed(0);\r\n                        //     console.log('hour:',hour);\r\n                        //     var p=getRoute(hour);\r\n                        //     p.then(function() {\r\n                        //         this.setState({\r\n                        //             Route:Routes,\r\n                        //             depPolygon:depPolygon,\r\n                        //             desPolygon:desPolygon\r\n                        //         })\r\n                        //     }.bind(this))\r\n                        // }\r\n                        // this.setState({time: nowTime})\r\n                        // //console.log(this.state)\r\n                        // //console.log('value:',value)\r\n                    }}\r\n                />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// export function renderToDOM(container) {\r\n//     render(<App />, container);\r\n//     require('d3-request').csv(DATA_URL, (error, response) => {\r\n//         if (!error) {\r\n//             const data = response.map(row => ({\r\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\r\n//                 latitude: Number(row.Latitude),\r\n//                 longitude: Number(row.Longitude),\r\n//                 depth: Number(row.Depth),\r\n//                 magnitude: Number(row.Magnitude)\r\n//             }));\r\n//             render(<App data={data} />, container);\r\n//         }\r\n//     });\r\n// }\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\AxisBottom.js",[],"D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\ColorLegend.js",[],"D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\AxisLeft.js",[],"D:\\Desktop\\ITS\\deckgl\\src\\components\\streamgraph\\useData.js",[],"D:\\Desktop\\ITS\\deckgl\\src\\components\\streamgraph\\Marks.js",["277"],"import React from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const Marks = ({\r\n                          data,\r\n                          xScale,\r\n                          xValue,\r\n                          yScale,\r\n                          innerHeight,\r\n                          innerWidth,\r\n                          margin,\r\n                          keys,\r\n                            start,\r\n                          callback\r\n                      }) =>{\r\n\r\n    const svg=d3.select('svg');\r\n\r\n    let stack = d3.stack()//\r\n        .offset(d3.stackOffsetWiggle)\r\n        .order(d3.stackOrderNone);\r\n\r\n\r\n    var colorScale = d3.scaleOrdinal()\r\n        .range(d3.schemeCategory10);\r\n\r\n    var area = d3.area()\r\n        .x(d => xScale(xValue(d.data))+margin.left)\r\n        .y0(d => (yScale(d[0])+margin.top))\r\n        .y1(d => (yScale(d[1])+margin.top))\r\n        .curve(d3.curveBasis);\r\n\r\n\r\n    if(data){\r\n        data=data.slice(start,start+24);\r\n        // console.log(keys)\r\n        stack.keys(keys);\r\n        // console.log('data',data);\r\n        let stacked=stack(data);\r\n        // console.log('stack',stacked);\r\n\r\n        colorScale.domain(d3.range(keys.length));\r\n\r\n        xScale\r\n            .domain(d3.extent(data, xValue))\r\n            .range([0, innerWidth]);\r\n        yScale\r\n            .domain([\r\n                d3.min(stacked, function (series) {\r\n                    return d3.min(series, function (d) { return d[0]; });\r\n                }),\r\n                d3.max(stacked, function (series) {\r\n                    return d3.max(series, function (d) { return d[1]; });\r\n                })\r\n            ])\r\n            .range([ innerHeight,0]);\r\n\r\n        let p=svg.selectAll('path')\r\n            .data(stacked)\r\n            .join('path')\r\n            .attr('fill', function (d) {\r\n                // console.log('d',d)\r\n                // console.log(d[0].data[d.index]);\r\n                return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            })\r\n            .attr('stroke', function (d) { return d3.interpolateSpectral(keys.indexOf(d[0].data[d.index]/8)); })\r\n            .transition()\r\n            .duration(2000)\r\n            .attr('d', area)\r\n            .end();\r\n\r\n        p.then(r=>{\r\n            callback()\r\n        })\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\sliderTraffic.js",["278","279","280","281","282","283","284","285","286","287"],"/* global requestAnimationFrame, cancelAnimationFrame */\r\nimport React, {PureComponent} from 'react';\r\nimport {Client as Styletron} from 'styletron-engine-atomic';\r\nimport {Provider as StyletronProvider} from 'styletron-react';\r\nimport {LightTheme, BaseProvider, styled} from 'baseui';\r\nimport {Slider} from 'baseui/slider';\r\nimport {Button, SHAPE, SIZE} from 'baseui/button';\r\nimport Start from 'baseui/icon/chevron-right';\r\nimport Stop from 'baseui/icon/delete';\r\nimport { Select } from \"baseui/select\";\r\n\r\nconst engine = new Styletron();\r\n\r\nconst SelectContainer=styled('div',{\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 2,\r\n    top: '10px',\r\n    left:'10px'\r\n});\r\n\r\n\r\nconst Container = styled('div', {\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 1,\r\n    bottom: '20px',\r\n    width: '100%'\r\n});\r\n\r\nconst ThumbValue = styled('div', {\r\n    color: '#FF0000',\r\n    position: 'absolute',\r\n    top: '-2em',\r\n    width: '200px'\r\n});\r\n\r\nconst TickBar = styled('div', {\r\n    width: '480px',\r\n    height: '24px',\r\n    maxWidth: '80vw'\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ANIMATION_SPEED = 1;\r\n\r\nexport default class sliderTraffic extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPlaying: false\r\n        };\r\n\r\n        this._renderThumbValue = this._renderThumbValue.bind(this);\r\n        this._animate = this._animate.bind(this);\r\n        this._toggle = this._toggle.bind(this);\r\n        this._animationFrame = null;\r\n    }\r\n    componentDidMount() {\r\n        // this._animate()\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     cancelAnimationFrame(this._animationFrame);\r\n    // }\r\n\r\n    _toggle() {\r\n        cancelAnimationFrame(this._animationFrame);\r\n        const {isPlaying} = this.state;\r\n        if (!isPlaying) {\r\n            this._animate();\r\n        }\r\n        this.setState({isPlaying: !isPlaying});\r\n    }\r\n\r\n    _animate() {\r\n        const {min,max, value} = this.props;\r\n        let newValue=value[1]+ANIMATION_SPEED;\r\n        if(value[1]>max){\r\n            newValue=min;\r\n        }\r\n        this.props.onChange({\r\n            value: [value[0],newValue]\r\n        });\r\n        this._animationFrame = requestAnimationFrame(this._animate);\r\n    }\r\n\r\n    _renderThumbValue({$thumbIndex, $value}) {\r\n\r\n        if($thumbIndex==1){\r\n            const value = $value[$thumbIndex];\r\n            if(value==3600){\r\n                console.log('thumb==3600')\r\n            }\r\n           // console.log('thumb:',value)\r\n            return <ThumbValue Color={[0,0,0,255]} >{this.props.formatLabel(value)}</ThumbValue>;\r\n        }\r\n        else{\r\n            return <ThumbValue></ThumbValue>\r\n        }\r\n        // return <ThumbValue>{0}</ThumbValue>;\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n    componentDidCatch(error, errorInfo) {\r\n        // You can also log the error to an error reporting service\r\n        console.log(error, errorInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {value, min, max} = this.props;\r\n        const isButtonEnabled = value[0] > min || value[1] < max;\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return (\r\n                    <Container>\r\n                        <Button\r\n                            id={'start'}\r\n                            shape={SHAPE.round}\r\n                            size={SIZE.compact}\r\n                            disabled={!isButtonEnabled}\r\n                            onClick={this._toggle}\r\n                        >\r\n                            {this.state.isPlaying ? <Stop title=\"Stop\" /> : <Start title=\"Animate\" />}\r\n                        </Button>\r\n                        <Slider\r\n                            {...this.props}\r\n                            overrides={{\r\n                                ThumbValue: this._renderThumbValue,\r\n                                TickBar: () => <TickBar />\r\n                            }}\r\n                        />\r\n\r\n                    </Container>\r\n\r\n        );\r\n    }\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\Barchart\\useData.js",[],"D:\\Desktop\\ITS\\deckgl\\src\\components\\Barchart\\Marks.js",["288","289","290","291","292","293"],"import React from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const Marks = ({\r\n                          data,\r\n                          xScale,\r\n                          xValue,\r\n                          yScale,\r\n                          innerHeight,\r\n                          innerWidth,\r\n                          margin,\r\n                          keys,\r\n                            start,\r\n                          callback\r\n                      }) =>{\r\n\r\n    const svg=d3.select('svg');\r\n\r\n    const xLength=24;\r\n    const getTime=d=>{\r\n        let date=new Date(d.date);\r\n        let hour=date.getHours();\r\n        let day=date.getDate();\r\n        return day+'/'+hour+':00'\r\n\r\n    }\r\n\r\n    const delay=1000;\r\n\r\n    let stack = d3.stack()//\r\n        .offset(d3.stackOffsetNone)\r\n        .order(d3.stackOrderNone);\r\n\r\n\r\n    var colorScale = d3.scaleOrdinal()\r\n        .range(d3.schemeCategory10);\r\n\r\n    var area = d3.area()\r\n        .x(d => xScale(xValue(d.data))+margin.left)\r\n        .y0(d => (yScale(d[0])+margin.top))\r\n        .y1(d => (yScale(d[1])+margin.top))\r\n        .curve(d3.curveBasis);\r\n\r\n\r\n    if(data){\r\n        data=data.slice(19,139);\r\n        // console.log(keys)\r\n        stack.keys(keys);\r\n        // console.log('data',data);\r\n        let stacked=stack(data);\r\n        // console.log('stack',stacked);\r\n\r\n        colorScale.domain(d3.range(keys.length));\r\n\r\n        xScale\r\n            .domain(d3.extent(data, xValue))\r\n            .range([0, innerWidth]);\r\n        yScale\r\n            .domain([\r\n                d3.min(stacked, function (series) {\r\n                    return d3.min(series, function (d) { return d[0]; });\r\n                }),\r\n                d3.max(stacked, function (series) {\r\n                    return d3.max(series, function (d) { return d[1]; });\r\n                })\r\n            ])\r\n            .range([ innerHeight,0]);\r\n\r\n\r\n        let rectData=[];\r\n//stack的数据结构：\r\n//      //数组里面7个元素分别对应7个地点\r\n//      //每个元素又是一个数组有24个元素分别对应24小时\r\n/*       (7) [Array(24), Array(24), Array(24), Array(24), Array(24), Array(24), Array(24)]\r\n0: Array(24)\r\n0: (2) [0, 19.3671431509997, data: {…}, key: \"San Francisco\"]\r\n1: (2) [0, 20.8082012083461, data: {…}, key: \"San Francisco\"]\r\n2: (2) [0, 22.5238576663828, data: {…}, key: \"San Francisco\"]\r\n3: (2) [0, 24.4214051463704, data: {…}, key: \"San Francisco\"]\r\n4: (2) [0, 26.2049693716955, data: {…}, key: \"San Francisco\"]\r\n5: (2) [0, 26.579802484894, data: {…}, key: \"San Francisco\"]\r\n6: (2) [0, 26.5525094442272, data: {…}, key: \"San Francisco\"]\r\n7: (2) [0, 23.9758724990251, data: {…}, key: \"San Francisco\"]\r\n8: (2) [0, 20.7705334007582, data: {…}, key: \"San Francisco\"]\r\n9: (2) [0, 19.5826361563267, data: {…}, key: \"San Francisco\"]\r\n10: (2) [0, 18.7265399946616, data: {…}, key: \"San Francisco\"]\r\n11: (2) [0, 18.2886029132647, data: {…}, key: \"San Francisco\"]\r\n12: (2) [0, 17.4904771411586, data: {…}, key: \"San Francisco\"]\r\n13: (2) [0, 17.1831430954037, data: {…}, key: \"San Francisco\"]\r\n14: (2) [0, 17.2898856656444, data: {…}, key: \"San Francisco\"]\r\n15: (2) [0, 17.8578100360021, data: {…}, key: \"San Francisco\"]\r\n16: (2) [0, 18.1992192220978, data: {…}, key: \"San Francisco\"]\r\n17: (2) [0, 18.13420905954, data: {…}, key: \"San Francisco\"]\r\n18: (2) [0, 18.5888149684944, data: {…}, key: \"San Francisco\"]\r\n19: (2) [0, 18.6733003026984, data: {…}, key: \"San Francisco\"]\r\n20: (2) [0, 19.1600833190036, data: {…}, key: \"San Francisco\"]\r\n21: (2) [0, 19.207095797011, data: {…}, key: \"San Francisco\"]\r\n22: (2) [0, 18.9847082241235, data: {…}, key: \"San Francisco\"]\r\n23: (2) [0, 19.4293802064908, data: {…}, key: \"San Francisco\"]\r\nkey: \"San Francisco\"\r\nindex: 0\r\nlength: 24\r\n__proto__: Array(0)\r\n1: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Bangalore\", index: 1]\r\n2: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Boston\", index: 2]\r\n3: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Geneva\", index: 3]\r\n4: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Rio de Janeiro\", index: 4]\r\n5: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Shanghai\", index: 5]\r\n6: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Singapore\", index: 6]\r\nlength: 7\r\n__proto__: Array(0)*/\r\n//\r\n//把 stack 再转换成按时间分组的数据，其实data就是按时间分组的，但是为了计算出堆叠出来的数据所以用的了stack\r\n        stacked.map(x=>{\r\n            x.map((t,index)=>{\r\n                t.key=x.key;\r\n                if(rectData[index]===undefined){\r\n                    rectData[index]=[]\r\n                }\r\n                rectData[index].push(t);\r\n            })\r\n        })\r\n\r\n        // console.log('rectData',rectData)\r\n\r\n\r\n        const group=svg.append('g');\r\n        const g2=svg.append('g');\r\n        let count=0;\r\n        let tmpData=[];\r\n\r\n\r\n        let groupCount=[];\r\n\r\n        // tmpData.forEach(d=>{d.n=tmpData.indexOf(d)})\r\n        let testData=[];\r\n\r\n        function update(){\r\n            let popNum=0;\r\n            groupCount.unshift(rectData[count].length);\r\n            if(groupCount.length>xLength){\r\n                // console.log('24')\r\n                popNum=groupCount.pop()\r\n            }\r\n            //tmpData 里面是每一个小矩形的数据(到目前为止所有插入的矩形)，如何对这些矩形计数呢从而和时间对应\r\n            //无论你有多少数据我都只取前24组时间内的数据//不对啊我这样做出来的效果并不是时间轴跟着动而是这个温度变成下一个时刻的温度这样的动态效果，最好试用的例子是不同年龄段的人随着时间变化的过程，并不是温度\r\n            rectData[count].forEach(d=>{\r\n                    d.count=count;\r\n                    tmpData.unshift(d)\r\n                }\r\n            );\r\n\r\n            testData.unshift(\r\n                    rectData[count]\r\n\r\n                );\r\n            // console.log('testData',xValue(testData[0][0].data))\r\n            if(testData.length>xLength)testData.pop();\r\n            // console.log('testData',testData)\r\n            let g=g2.selectAll('g').data(testData).enter().append('g');\r\n            // console.log('g',g);\r\n            // let g3=g.enter().append('g');\r\n            // g3.append('text').attr('x',d=>xScale(xValue(d[0].data))+margin.left).attr('y',d=>yScale(d[0][1])+margin.top).text(d=>xValue(d[0].data))\r\n            let g4=g2.selectAll('g')\r\n                .selectAll('rect')\r\n                .data(d=>d)\r\n                .join(\r\n                    enter=>enter.append('rect')\r\n                        .attr('fill', function (d) {\r\n                            return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n                        })\r\n                        .attr('x', d =>{\r\n                            // console.log('x',xScale(xValue(d.data))+margin.left)\r\n                            return xScale(xValue(d.data))+margin.left-5\r\n                        } )\r\n                        .attr('y',d => (yScale(d[1])+margin.top))\r\n                        .attr('height',d=>(yScale(d[0])-yScale(d[1]))),\r\n\r\n                    update=>update\r\n                    //     .attr('x',d=>{\r\n                    //     console.log(this)\r\n                    //     if(d.count===count&&d.count>=xLength){\r\n                    //         return xScale(xValue(d.data))+margin.left\r\n                    //     }\r\n                    //     else return this.x\r\n                    // })\r\n                )\r\n\r\n                // .attr('cx',(d,i,node)=>{\r\n                //     console.log('node',node);\r\n                //     if(xValue(d.data)===0&&i!==0)\r\n                //         return xScale(xValue(d.data))+margin.left\r\n                //     else return(node[i].cx)\r\n                // })\r\n            g4.filter((d,i)=>{\r\n                return xValue(d.data)===0\r\n            }).attr('fill', function (d) {\r\n                // console.log('count',d.count)\r\n                return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            })\r\n                .attr('x', d =>{\r\n                    // console.log('next!!')\r\n                    return xScale(xValue(d.data))+margin.left-5\r\n                } )\r\n                .attr('y',d => (yScale(d[1])+margin.top))\r\n                // .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n                .attr('width',0)\r\n\r\n\r\n            let p1=g4.transition()\r\n                .duration(delay)\r\n                .attr('fill', function (d) {\r\n                    return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n                })\r\n                .attr('x', d =>{\r\n                    // console.log('x',xScale(xValue(d.data))+margin.left)\r\n                    return xScale(xValue(d.data))+margin.left-5\r\n                } )\r\n                .attr('y',d => (yScale(d[1])+margin.top))\r\n                .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n                .attr('width',10)\r\n                .end()\r\n\r\n            let g5=g2.selectAll('g').selectAll('text')\r\n                .data(d=>d)\r\n                .join('text')\r\n                .text((d,i,node)=>{\r\n                    // console.log('d12',d);\r\n                    if (i===6) return getTime(d.data);\r\n                    else return null\r\n                })\r\n                .attr('dy',\".2em\")\r\n                .attr('font-size',\"8\")\r\n\r\n\r\n            g5.filter(d=>{\r\n                return xValue(d.data)===0\r\n            }).attr('x',d=>xScale(xValue(d.data))+margin.left-12)\r\n                .attr('y',d=>yScale(d[1])+margin.top)\r\n\r\n            g5.transition()\r\n                .duration(delay)\r\n                .attr('x',d=>xScale(xValue(d.data))+margin.left-12)\r\n                .attr('y',d=>yScale(d[1])+margin.top)\r\n            // g3.selectAll('circle').data(d=>d).enter().append('circle')\r\n            //     .transition()\r\n            //     .duration(2000)\r\n            //     .attr('r',10).attr('cy',d=>yScale(d[1])+margin.top).attr('cx',d=>xScale(xValue(d.data))+margin.left);\r\n\r\n            // console.log('g3',)\r\n\r\n\r\n\r\n\r\n\r\n            //如果界面满了就不再增加数据量\r\n            for(let i=0;i<popNum;i++){\r\n                tmpData.pop()\r\n            }\r\n            let t=[];\r\n            tmpData.forEach((d,index)=>{\r\n                let m=[d[0],d[1]];\r\n                m.data=d.data;\r\n                m.key=d.key;\r\n                m.n=index;\r\n                m.count=d.count\r\n                t.push(m)\r\n            });\r\n            console.log('t.len',t.length)\r\n\r\n\r\n\r\n\r\n            // console.log('t',t);\r\n            // console.log('tmpData',tmpData);\r\n            // let s1=group.selectAll('rect')\r\n            //     .data(t,d=>d.n)\r\n            // .join(\r\n            //         enter=>enter.append('rect')\r\n            //             .attr('fill', function (d) {\r\n            //                 return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            //             })\r\n            //             .attr('x', d =>{\r\n            //                 // console.log('x',xScale(xValue(d.data))+margin.left)\r\n            //                 return xScale(xValue(d.data))+margin.left\r\n            //             } )\r\n            //             .attr('y',d => (yScale(d[1])+margin.top))\r\n            //             .attr('height',d=>(yScale(d[0])-yScale(d[1]))),\r\n            //\r\n            //         update=>update\r\n            //         //     .attr('x',d=>{\r\n            //         //     console.log(this)\r\n            //         //     if(d.count===count&&d.count>=xLength){\r\n            //         //         return xScale(xValue(d.data))+margin.left\r\n            //         //     }\r\n            //         //     else return this.x\r\n            //         // })\r\n            //     )\r\n            // //要选择的是坐标轴最后一个数据而不是最新的数据！！！而最后一个的当前数据的时间是0点\r\n            // let f=group.selectAll('rect')\r\n            //     .filter(d=>xValue(d.data)===0&&d.count>1)\r\n            //     .attr('fill', function (d) {\r\n            //         // console.log('count',d.count)\r\n            //         return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            //     })\r\n            //     .attr('x', d =>{\r\n            //         // console.log('next!!')\r\n            //         return xScale(xValue(d.data))+margin.left\r\n            //     } )\r\n            //     .attr('y',d => (yScale(d[1])+margin.top))\r\n            //     // .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n            //      .attr('width',0)\r\n            //\r\n            // let p1=s1.transition()\r\n            //     .duration(800)\r\n            //     .attr('fill', function (d) {\r\n            //         return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            //     })\r\n            //     .attr('x', d =>{\r\n            //         // console.log('x',xScale(xValue(d.data))+margin.left)\r\n            //         return xScale(xValue(d.data))+margin.left\r\n            //     } )\r\n            //     .attr('y',d => (yScale(d[1])+margin.top))\r\n            //     .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n            //     .attr('width',10)\r\n            //     .end()\r\n            // let p2=s1.enter().append('rect')\r\n            //     .attr('fill', function (d) {\r\n            //         return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            //     })\r\n            //     .attr('x', d =>{\r\n            //         // console.log('x',xScale(xValue(d.data))+margin.left)\r\n            //         return xScale(xValue(d.data))+margin.left\r\n            //     } )\r\n            //     .attr('y',d => (yScale(d[1])+margin.top))\r\n            //     .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n            //     // .attr('stroke', function (d) { return d3.interpolateSpectral(keys.indexOf(d[0].data[d.index]/8)); })\r\n            //     // .transition()\r\n            //     // .duration(2000)\r\n            //     .transition()\r\n            //     .duration(1000)\r\n            //     .attr('width',10)\r\n            //     .end();\r\n\r\n\r\n\r\n             // let p2= p.enter().append('rect')\r\n             //      .attr('fill', function (d) {\r\n             //    return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n             //    })\r\n             //    .transition()\r\n             //    .duration(2000)\r\n             //    .attr('x', d =>{\r\n             //        console.log('x',xScale(xValue(d.data))+margin.left)\r\n             //        return xScale(xValue(d.data))+margin.left\r\n             //    } )\r\n             //    .attr('y',d => (yScale(d[1])+margin.top))\r\n             //    .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n             //    // .attr('stroke', function (d) { return d3.interpolateSpectral(keys.indexOf(d[0].data[d.index]/8)); })\r\n             //    // .transition()\r\n             //    // .duration(2000)\r\n             //    .attr('width',10)\r\n             //     .end()\r\n            p1.then(()=>{\r\n                if(count<(rectData.length-1)){\r\n                    // let p2=group.transition()\r\n                    //     .duration(1000)\r\n                    //     .attr(\"transform\", `translate(${xScale(1)-xScale(0)},0)`)\r\n                    //     .end()\r\n                    // p2.then(()=>{\r\n                        count++;\r\n                        // tmpData=tmpData.slice(0,2);\r\n\r\n                    // console.log('tmpData1',tmpData);\r\n                    // console.log('t1',t)\r\n                        update()\r\n                        // }\r\n                    // )\r\n\r\n                }\r\n                else{\r\n                    // callback()\r\n                    // count=0;\r\n                }\r\n            })\r\n        }\r\n\r\n        update();\r\n\r\n        // stacked.map((x,index)=>{\r\n        //     // if(index!==0){\r\n        //     //     return\r\n        //     // }\r\n        //     svg.selectAll('rect')\r\n        //         .data(x)\r\n        //\r\n        // })\r\n        // let p=\r\n        //     .end();\r\n\r\n        // p.then(r=>{\r\n        //     callback()\r\n        // })\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\Marks.js",["294"],"import React from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\n\r\nexport const Marks = ({\r\n                          data,\r\n                          xScale,\r\n                          xValue,\r\n                          yScale,\r\n                          yValue,\r\n                          colorScale,\r\n                          colorValue,\r\n                          tooltipFormat,\r\n                          circleRadius,\r\n                          year,\r\n                          callback,\r\n                          margin\r\n                      }) =>{\r\n    function dataAt(year){\r\n        console.log('data:',data);\r\n        let results=[];\r\n        let pro=Object.getOwnPropertyNames(data[year]);\r\n        pro.forEach(d=>{\r\n            results.push({\r\n                city:d,\r\n                data:data[year][d],\r\n            })\r\n        })\r\n        return results\r\n    }\r\n\r\n    if(year&&data){\r\n        let currentData=dataAt(year+'/'+(year-2000+1));\r\n        let svg=d3.select('svg');\r\n        let c1=svg.selectAll(\"circle\")\r\n            .data(currentData,d=>d['city'])\r\n        console.log('enter',c1)\r\n        let c=c1\r\n            .join('circle')\r\n            .attr(\"stroke\", \"black\")\r\n\r\n            .transition()\r\n            // .on('end',function repeat(){\r\n            //     console.log('end')\r\n            // })\r\n            .duration(1000)\r\n            .attr(\"r\", d =>{\r\n                if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\r\n                else return Math.random()*10\r\n            })\r\n            .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\r\n                // console.log(d.data['happy'])\r\n                return xScale(d.data['happy'])+margin.left\r\n            }})\r\n            .attr(\"cy\", d => {if(d.data['worth']){\r\n                return yScale(d.data['worth'])+margin.top\r\n            }\r\n            })\r\n            .attr(\"fill\", d =>{\r\n                // console.log('d',d);\r\n                //  console.log('Area',d.data.Area)\r\n                return colorScale(d.data.Area)\r\n            } )\r\n            .end();\r\n        c.then(result=>{\r\n            // if(year<2016){\r\n            //     setYear(year+1)\r\n            //     // updateCircle()\r\n            // }\r\n            // else {\r\n            //     setYear(2011)\r\n            //     // console.log('year:',year)\r\n            //     // year=2011;\r\n            //     // updateCircle()\r\n            // }\r\n            callback();\r\n            console.log('done')\r\n        })\r\n    }\r\n    return null\r\n}\r\n    // data.map(d => (\r\n    //     <circle\r\n    //         className=\"mark\"\r\n    //         cx={xScale(xValue(d))}\r\n    //         cy={yScale(yValue(d))}\r\n    //         fill={colorScale(colorValue(d))}\r\n    //         r={circleRadius}\r\n    //     >\r\n    //         <title>{tooltipFormat(xValue(d))}</title>\r\n    //     </circle>\r\n    // ));\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\city\\useData.js",["295","296","297","298","299"],"import React, { useState, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst InnerList=['Camden',\r\n    'Greenwich',\r\n    'Hackney',\r\n    'Hammersmith and Fulham',\r\n    'Islington',\r\n    'Kensington and Chelsea',\r\n    'Lambeth',\r\n    'Lewisham',\r\n    'Southwark',\r\n    'Tower Hamlets',\r\n    'Wandsworth',\r\n    'Westminster']\r\n\r\nexport const useData = () => {\r\n    const [data, setData] = useState(null);\r\n    useEffect(() => {\r\n        console.log('1');\r\n        d3.csv('./happy.csv').then(d=>{\r\n            let data={};\r\n            d.map((l,index)=>{\r\n                //l 结构：\r\n                // Code: \"E09000001\"\r\n                // Area: \"City of London\"\r\n                // 2011/12: \"x\"\r\n                // 2012/13: \"x\"\r\n                // 2013/14: \"x\"\r\n                // 2014/15: \"x\"\r\n                // 2015/16: \"x\"\r\n                // 2016/17: \"x\"\r\n                let pro=Object.getOwnPropertyNames(l);\r\n                // console.log(l);\r\n                pro.map((n,index)=>{\r\n                    if(index>1){\r\n                        if(data[n]===undefined){\r\n                            data[n]={}\r\n                        }\r\n                        if(data[n][l['Area']]===undefined){\r\n                            data[n][l['Area']]={};\r\n                        }\r\n                        data[n][l['Area']].happy=l[n];\r\n                        if(InnerList.indexOf(l['Area'].toString())>=0){\r\n                            console.log('innner')\r\n                            data[n][l['Area']].Area='InnerLondon'\r\n                        }\r\n                        else data[n][l['Area']].Area='OuterLondon'\r\n                    }\r\n\r\n                })\r\n                // l.map((t,i)=>{\r\n                //     if(i>1){\r\n                //         if(data[i]===undefined){\r\n                //             data[i]=[]\r\n                //         }\r\n                //         // data[i].happy=\r\n                //         console.log(Object.getOwnPropertyNames(t))\r\n                //     }\r\n                //\r\n                // })\r\n            })\r\n            // hpData=d;\r\n            // console.log('data:',data);\r\n            d3.csv('./worthwhile.csv').then(d=>{\r\n                d.map((l,index)=>{\r\n                    let pro=Object.getOwnPropertyNames(l);\r\n                    pro.map((n,index)=>{\r\n                        if(index>1){\r\n                            if(data[n]===undefined){\r\n                                data[n]={}\r\n                            }\r\n                            if(data[n][l['Area']]===undefined){\r\n                                data[n][l['Area']]={};\r\n                            }\r\n                            data[n][l['Area']].worth=l[n];\r\n                        }\r\n                    })\r\n                })\r\n                setData(data)\r\n            });\r\n        })\r\n    },[]);//这里加这个[],可以让这个useEffect只执行一次\r\n\r\n    return data;\r\n};\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\lineChart\\ColorLegend.js",[],"D:\\Desktop\\ITS\\deckgl\\src\\components\\sliderCovid.js",["300","301","302","303"],"/* global requestAnimationFrame, cancelAnimationFrame */\r\nimport React, {PureComponent} from 'react';\r\nimport {Client as Styletron} from 'styletron-engine-atomic';\r\nimport {Provider as StyletronProvider} from 'styletron-react';\r\nimport {LightTheme, BaseProvider, styled} from 'baseui';\r\nimport {Slider} from 'baseui/slider';\r\nimport {Button, SHAPE, SIZE} from 'baseui/button';\r\nimport Start from 'baseui/icon/chevron-right';\r\nimport Stop from 'baseui/icon/delete';\r\n\r\nconst engine = new Styletron();\r\n\r\nconst ButtonContainer=styled('div',{\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 2,\r\n    top: '10px',\r\n    left:'10px'\r\n});\r\n\r\nconst Container = styled('div', {\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 1,\r\n    bottom: '20px',\r\n    width: '100%'\r\n});\r\n\r\nconst ThumbValue = styled('div', {\r\n    color: '#000000',\r\n    position: 'absolute',\r\n    top: '-2em'\r\n});\r\n\r\nconst TickBar = styled('div', {\r\n    width: '480px',\r\n    height: '20px',\r\n    maxWidth: '80vw'\r\n});\r\n\r\nconst ANIMATION_SPEED = 1;\r\nlet count=0;\r\n\r\nexport default class sliderCovid extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPlaying: false\r\n        };\r\n\r\n        this._renderThumbValue = this._renderThumbValue.bind(this);\r\n        this._animate = this._animate.bind(this);\r\n        this._toggle = this._toggle.bind(this);\r\n        this._animationFrame = null;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this._animationFrame);\r\n    }\r\n\r\n    _toggle() {\r\n        cancelAnimationFrame(this._animationFrame);\r\n        const {isPlaying} = this.state;\r\n        if (!isPlaying) {\r\n            this._animate();\r\n        }\r\n        this.setState({isPlaying: !isPlaying});\r\n    }\r\n\r\n    _animate() {\r\n        count++;\r\n        // console.log(count);\r\n        if(count===ANIMATION_SPEED){\r\n            const {max,value} = this.props;\r\n            let newCount=((value[1]+1)>max)?0:value[1]+1;\r\n\r\n            let date=new Date('2020-01-22');\r\n            date.setDate(date.getDate()+value[1]);\r\n            console.log('mounth:',date.getMonth());\r\n\r\n            // let month=date.getUTCMonth()+1;\r\n            // if(month<10){\r\n            //     month='0'+month\r\n            // }\r\n            // else{\r\n            //     month=month.toString()\r\n            // }\r\n            // let tmpstr=date.getFullYear()+'-'+date.getUTCMonth()+1+'-'+date.getDate();\r\n            let tmpstr=`${date.getFullYear()}-${(date.getMonth()+1)<10?'0'+(date.getMonth()+1):date.getMonth()+1}-${date.getDate()<10?'0'+date.getDate():date.getDate()}`;\r\n            console.log('tmpstr:',tmpstr);\r\n            this.props.onChange({\r\n                date:tmpstr,\r\n                value:[0,newCount]\r\n            });\r\n            count=0\r\n        }\r\n        this._animationFrame = requestAnimationFrame(this._animate);\r\n    }\r\n\r\n    _renderThumbValue({$thumbIndex, $value}) {\r\n        //console.log('$thumbIndex:',$thumbIndex);\r\n        if($thumbIndex==1){\r\n            const value = $value[$thumbIndex];\r\n            // console.log('thumb:',value)\r\n            return <ThumbValue Color={[0,0,0,255]}>{this.props.formatLabel(value)}</ThumbValue>;\r\n        }\r\n        else{\r\n            return <ThumbValue></ThumbValue>\r\n        }\r\n\r\n        // return <ThumbValue>{0}</ThumbValue>;\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const {value, min, max} = this.props;\r\n        const isButtonEnabled = value[0] > min || value[1] < max;\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return (\r\n            <StyletronProvider value={engine}>\r\n                <BaseProvider theme={LightTheme}>\r\n                    <Container>\r\n                        <Button\r\n                            shape={SHAPE.round}\r\n                            size={SIZE.compact}\r\n                            disabled={!isButtonEnabled}\r\n                            onClick={this._toggle}\r\n                        >\r\n                            {this.state.isPlaying ? <Stop title=\"Stop\" /> : <Start title=\"Animate\" />}\r\n                        </Button>\r\n                        <Slider\r\n                            {...this.props}\r\n                            overrides={{\r\n                                ThumbValue: this._renderThumbValue,\r\n                                TickBar: () => <TickBar />\r\n                            }}\r\n                        />\r\n                    </Container>\r\n                    {/*<ButtonContainer>*/}\r\n                    {/*    <Button*/}\r\n                    {/*        shape={SHAPE.round}*/}\r\n                    {/*        size={SIZE.compact}*/}\r\n                    {/*        disabled={!isButtonEnabled}*/}\r\n                    {/*    >*/}\r\n                    {/*    </Button>*/}\r\n                    {/*</ButtonContainer>*/}\r\n                </BaseProvider>\r\n            </StyletronProvider>\r\n        );\r\n    }\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\test\\selectionlayer.js",["304","305","306"],"/* global document */\r\nimport React, { Component } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport MapGL from \"react-map-gl\";\r\nimport {\r\n    Editor,\r\n    EditingMode,\r\n    DrawLineStringMode,\r\n    DrawPolygonMode,\r\n} from \"react-map-gl-draw\";\r\n\r\nconst MAPBOX_TOKEN =\r\n    \"pk.eyJ1IjoidWJlcmRhdGEiLCJhIjoiY2pwY3owbGFxMDVwNTNxcXdwMms2OWtzbiJ9.1PPVl0VLUQgqrosrI2nUhg\";\r\n\r\nconst MODES = [\r\n    { id: \"drawPolyline\", text: \"Draw Polyline\", handler: DrawLineStringMode },\r\n    { id: \"drawPolygon\", text: \"Draw Polygon\", handler: DrawPolygonMode },\r\n    { id: \"editing\", text: \"Edit Feature\", handler: EditingMode },\r\n];\r\n\r\nconst DEFAULT_VIEWPORT = {\r\n    width: 800,\r\n    height: 600,\r\n    longitude: -122.45,\r\n    latitude: 37.78,\r\n    zoom: 14,\r\n};\r\n\r\nexport class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewport: DEFAULT_VIEWPORT,\r\n            modeId: null,\r\n            modeHandler: null,\r\n        };\r\n    }\r\n\r\n    _switchMode = (evt) => {\r\n        const modeId =\r\n            evt.target.value === this.state.modeId ? null : evt.target.value;\r\n        const mode = MODES.find((m) => m.id === modeId);\r\n        const modeHandler = mode ? new mode.handler() : null;\r\n        this.setState({ modeId, modeHandler });\r\n    };\r\n\r\n    _renderToolbar = () => {\r\n        return (\r\n            <div\r\n                style={{ position: \"absolute\", top: 0, right: 0, maxWidth: \"320px\" }}\r\n            >\r\n                <select onChange={this._switchMode}>\r\n                    <option value=\"\">--Please choose a draw mode--</option>\r\n                    {MODES.map((mode) => (\r\n                        <option key={mode.id} value={mode.id}>\r\n                            {mode.text}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    _updateViewport = (viewport) => {\r\n        this.setState({ viewport });\r\n    };\r\n\r\n    render() {\r\n        const { viewport, modeHandler } = this.state;\r\n        return (\r\n            <MapGL\r\n                {...viewport}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                mapStyle={\"mapbox://styles/mapbox/dark-v9\"}\r\n                onViewportChange={this._updateViewport}\r\n            >\r\n                <Editor\r\n                    // to make the lines/vertices easier to interact with\r\n                    clickRadius={12}\r\n                    mode={modeHandler}\r\n                    onSelect={(_) => {}}\r\n                />\r\n                {this._renderToolbar()}\r\n            </MapGL>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n",["307","308"],"D:\\Desktop\\ITS\\deckgl\\src\\components\\charts\\charts.js",["309","310"],"import { Bar } from '@antv/g2plot';\r\nimport { Line } from '@antv/g2plot';\r\nimport {Component} from 'react';\r\nimport React,{Fragment} from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet data = [\r\n];\r\n\r\n\r\nconst background={\r\n    width: \"300px\",\r\n    margin: \"30px auto\",\r\n    backgroundColor: \"#FFFFFF\",  //驼峰法\r\n    minHeight: \"50px\",\r\n    boxSizing: \"border-box\",\r\n    position: \"fixed\",\r\n    top: \"400px\"\r\n\r\n};\r\n\r\nexport default class Charts extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        data=props.data;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const line = new Line('line', {\r\n            data,\r\n            xField: 'time',\r\n            yField: 'value',\r\n        });\r\n\r\n        line.render();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <container>\r\n                <div id={'background'} style ={background}>\r\n                    <div id={'line'}/>\r\n                </div>\r\n            </container>\r\n        )\r\n    }\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\charts\\panel.js",["311","312"],"\r\nimport {Component} from 'react';\r\nimport React,{Fragment} from 'react';\r\n\r\nimport {Slider} from 'antd'\r\n\r\nconst style = {\r\n    display: 'inline-block',\r\n    height: 200,\r\n    width: 300,\r\n    marginLeft: 70,\r\n};\r\n\r\nconst marks = {\r\n    0: '0°C',\r\n    26: '26°C',\r\n    37: '37°C',\r\n    100: {\r\n        style: {\r\n            color: '#f50',\r\n        },\r\n        label: <strong>100°C</strong>,\r\n    },\r\n};\r\n\r\nexport default class Panel extends Component{\r\n    constructor(props){\r\n        super();\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <container>\r\n                <div style={style}>\r\n                    <Slider vertical defaultValue={30} />\r\n                </div>\r\n            </container>\r\n        )\r\n    }\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\sliderexample.js",["313"],"import * as React from 'react';\r\nimport {Slider} from 'baseui/slider';\r\nconst background={\r\n    width: \"30%\",\r\n    margin: \"30px auto\",\r\n    backgroundColor: \"#FFFFFF\",\r\n    // [\"#FF895D\",\"#FF6836\",\"#F3470D\",\"#D13808\",\"#A4300C\",\"#7A270E\"],\r\n    minHeight: \"0px\",\r\n    boxSizing: \"border-box\",\r\n    position: \"fixed\",\r\n    // top: \"80%\",\r\n    bottom:\"10%\",\r\n    border:\"10px\",\r\n    dashed: \"#FF6836\",\r\n    opacity:1,\r\n    zIndex:1\r\n};\r\nexport default () => {\r\n    const [value, setValue] = React.useState([60]);\r\n    return (\r\n        <div id={'background'} style ={background}>\r\n            <Slider\r\n                value={value}\r\n                onChange={({ value }) => value && setValue(value)}\r\n                onFinalChange={({ value }) => console.log(value)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\WorkFlow\\main.js",["314","315","316","317"],"D:\\Desktop\\ITS\\deckgl\\src\\components\\front_glass\\welcome.js",["318"],"D:\\Desktop\\ITS\\deckgl\\src\\components\\WorkFlow\\news.js",["319","320"],"import React, {Component} from \"react\";\r\nfunction loadStyle(code){\r\n    var style = document.createElement('style');\r\n    style.appendChild(document.createTextNode(code));\r\n    var head = document.getElementsByTagName('head')[0];\r\n    head.appendChild(style);\r\n}\r\n\r\n\r\nexport default class App extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n    debugger\r\n        var code='        html,body{margin:0;padding:0;overflow-y:hidden;}\\n' +\r\n            '        li {\\n' +\r\n            '            list-style: none;\\n' +\r\n            '            float: left;\\n' +\r\n            '            width: 100%;/*三列图片排列*/\\n' +\r\n            '            height: 50%;\\n' +\r\n            '            margin: 0 ;\\n' +\r\n            '            overflow: hidden;/*超出隐藏*/\\n' +\r\n            '            font-size: 0;\\n' +\r\n            '        }\\n' +\r\n            '        li img {\\n' +\r\n            '            width: 100%;\\n' +\r\n            '            height: 100%\\n' +\r\n            '        }\\n' +\r\n            '        li video{\\n' +\r\n            '            width: 100%;\\n' +\r\n            '            height: 100%\\n' +\r\n            '        }\\n' +\r\n            '        ul{\\n' +\r\n            '            margin:0;padding:0\\n' +\r\n            '        }'\r\n        loadStyle(code);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <ul style={{overflow:\"hidden\",clear:\"both;\"}}>\r\n            <li>\r\n                <video src=\"/content/workflow/news.mp4\" autoPlay muted=\"muted\" loop=\"loop\"></video>\r\n            </li>\r\n            <li>\r\n                <img src=\"/content/workflow/news_down.jpg\"/>\r\n            </li>\r\n        </ul>\r\n\r\n    }\r\n\r\n}\r\n","D:\\Desktop\\ITS\\deckgl\\src\\components\\front_glass\\wallpaper.js",["321","322","323","324","325","326","327"],"import React, {Component} from \"react\";\r\nfunction loadStyle(code){\r\n    var style = document.createElement('style');\r\n    style.appendChild(document.createTextNode(code));\r\n    var head = document.getElementsByTagName('head')[0];\r\n    head.appendChild(style);\r\n}\r\n\r\n\r\nexport default class App extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    componentDidMount() {\r\n        // 动态加载 css\r\n        debugger\r\n        var code='  html,body{margin:0;padding:0;overflow-y:hidden;}\\n' +\r\n            '    li {\\n' +\r\n            '        list-style: none;\\n' +\r\n            '        float: left;\\n' +\r\n            '        width: 16.666%;/*三列图片排列*/\\n' +\r\n            '        height: 100%;\\n' +\r\n            '        margin: 0;\\n' +\r\n            '        overflow: hidden;/*超出隐藏*/\\n' +\r\n            '\\t\\tfont-size: 0;\\n' +\r\n            '\\n' +\r\n            '    }\\n' +\r\n            '    li img {\\n' +\r\n            '        width: 100%;\\n' +\r\n            '        height: 100%\\n' +\r\n            '    }\\n' +\r\n            '    ul{\\n' +\r\n            '        margin:0;padding:0\\n' +\r\n            '    } '\r\n        loadStyle(code);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return <ul style={{overflow:\"hidden\",clear:\"both;\"}}>\r\n            <li><img src=\"/content/wallpaper/6.png\"/></li>\r\n            <li><img src=\"/content/wallpaper/5.png\"/></li>\r\n            <li><img src=\"/content/wallpaper/4.png\"/></li>\r\n            <li><img src=\"/content/wallpaper/3.png\"/></li>\r\n            <li><img src=\"/content/wallpaper/2.png\"/></li>\r\n            <li><img src=\"/content/wallpaper/1.png\"/></li>\r\n        </ul>\r\n\r\n    }\r\n\r\n}\r\n",{"ruleId":"328","severity":1,"message":"329","line":1,"column":15,"nodeType":"330","messageId":"331","endLine":1,"endColumn":23},{"ruleId":"328","severity":1,"message":"332","line":3,"column":43,"nodeType":"330","messageId":"331","endLine":3,"endColumn":49},{"ruleId":"328","severity":1,"message":"333","line":3,"column":50,"nodeType":"330","messageId":"331","endLine":3,"endColumn":54},{"ruleId":"328","severity":1,"message":"334","line":12,"column":8,"nodeType":"330","messageId":"331","endLine":12,"endColumn":17},{"ruleId":"335","replacedBy":"336"},{"ruleId":"337","replacedBy":"338"},{"ruleId":"328","severity":1,"message":"339","line":3,"column":27,"nodeType":"330","messageId":"331","endLine":3,"endColumn":38},{"ruleId":"328","severity":1,"message":"340","line":3,"column":40,"nodeType":"330","messageId":"331","endLine":3,"endColumn":49},{"ruleId":"328","severity":1,"message":"329","line":3,"column":50,"nodeType":"330","messageId":"331","endLine":3,"endColumn":58},{"ruleId":"328","severity":1,"message":"341","line":4,"column":8,"nodeType":"330","messageId":"331","endLine":4,"endColumn":16},{"ruleId":"328","severity":1,"message":"342","line":7,"column":9,"nodeType":"330","messageId":"331","endLine":7,"endColumn":17},{"ruleId":"343","severity":1,"message":"344","line":92,"column":25,"nodeType":"345","endLine":92,"endColumn":48},{"ruleId":"328","severity":1,"message":"346","line":2,"column":9,"nodeType":"330","messageId":"331","endLine":2,"endColumn":15},{"ruleId":"328","severity":1,"message":"347","line":13,"column":8,"nodeType":"330","messageId":"331","endLine":13,"endColumn":21},{"ruleId":"328","severity":1,"message":"348","line":55,"column":10,"nodeType":"330","messageId":"331","endLine":55,"endColumn":18},{"ruleId":"328","severity":1,"message":"349","line":103,"column":7,"nodeType":"330","messageId":"331","endLine":103,"endColumn":15},{"ruleId":"328","severity":1,"message":"339","line":2,"column":27,"nodeType":"330","messageId":"331","endLine":2,"endColumn":38},{"ruleId":"328","severity":1,"message":"340","line":2,"column":40,"nodeType":"330","messageId":"331","endLine":2,"endColumn":49},{"ruleId":"328","severity":1,"message":"329","line":2,"column":50,"nodeType":"330","messageId":"331","endLine":2,"endColumn":58},{"ruleId":"328","severity":1,"message":"341","line":3,"column":8,"nodeType":"330","messageId":"331","endLine":3,"endColumn":16},{"ruleId":"328","severity":1,"message":"342","line":6,"column":9,"nodeType":"330","messageId":"331","endLine":6,"endColumn":17},{"ruleId":"343","severity":1,"message":"344","line":88,"column":25,"nodeType":"345","endLine":88,"endColumn":48},{"ruleId":"328","severity":1,"message":"350","line":1,"column":16,"nodeType":"330","messageId":"331","endLine":1,"endColumn":25},{"ruleId":"328","severity":1,"message":"341","line":2,"column":8,"nodeType":"330","messageId":"331","endLine":2,"endColumn":16},{"ruleId":"328","severity":1,"message":"351","line":4,"column":10,"nodeType":"330","messageId":"331","endLine":4,"endColumn":16},{"ruleId":"328","severity":1,"message":"352","line":4,"column":17,"nodeType":"330","messageId":"331","endLine":4,"endColumn":21},{"ruleId":"328","severity":1,"message":"353","line":5,"column":9,"nodeType":"330","messageId":"331","endLine":5,"endColumn":21},{"ruleId":"328","severity":1,"message":"354","line":5,"column":23,"nodeType":"330","messageId":"331","endLine":5,"endColumn":33},{"ruleId":"328","severity":1,"message":"355","line":5,"column":35,"nodeType":"330","messageId":"331","endLine":5,"endColumn":41},{"ruleId":"328","severity":1,"message":"356","line":6,"column":19,"nodeType":"330","messageId":"331","endLine":6,"endColumn":28},{"ruleId":"328","severity":1,"message":"357","line":7,"column":21,"nodeType":"330","messageId":"331","endLine":7,"endColumn":38},{"ruleId":"328","severity":1,"message":"358","line":17,"column":9,"nodeType":"330","messageId":"331","endLine":17,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":39,"column":24,"nodeType":"361","messageId":"362","endLine":39,"endColumn":26},{"ruleId":"359","severity":1,"message":"360","line":54,"column":20,"nodeType":"361","messageId":"362","endLine":54,"endColumn":22},{"ruleId":"363","severity":1,"message":"364","line":185,"column":50,"nodeType":"365","messageId":"366","endLine":185,"endColumn":51},{"ruleId":"328","severity":1,"message":"367","line":253,"column":14,"nodeType":"330","messageId":"331","endLine":253,"endColumn":28},{"ruleId":"359","severity":1,"message":"360","line":255,"column":21,"nodeType":"361","messageId":"362","endLine":255,"endColumn":23},{"ruleId":"328","severity":1,"message":"339","line":1,"column":27,"nodeType":"330","messageId":"331","endLine":1,"endColumn":38},{"ruleId":"328","severity":1,"message":"340","line":1,"column":40,"nodeType":"330","messageId":"331","endLine":1,"endColumn":49},{"ruleId":"328","severity":1,"message":"341","line":2,"column":8,"nodeType":"330","messageId":"331","endLine":2,"endColumn":16},{"ruleId":"328","severity":1,"message":"368","line":3,"column":10,"nodeType":"330","messageId":"331","endLine":3,"endColumn":13},{"ruleId":"328","severity":1,"message":"369","line":3,"column":42,"nodeType":"330","messageId":"331","endLine":3,"endColumn":45},{"ruleId":"328","severity":1,"message":"370","line":3,"column":55,"nodeType":"330","messageId":"331","endLine":3,"endColumn":61},{"ruleId":"328","severity":1,"message":"371","line":24,"column":10,"nodeType":"330","messageId":"331","endLine":24,"endColumn":17},{"ruleId":"359","severity":1,"message":"360","line":28,"column":28,"nodeType":"361","messageId":"362","endLine":28,"endColumn":30},{"ruleId":"359","severity":1,"message":"360","line":31,"column":34,"nodeType":"361","messageId":"362","endLine":31,"endColumn":36},{"ruleId":"359","severity":1,"message":"360","line":56,"column":32,"nodeType":"361","messageId":"362","endLine":56,"endColumn":34},{"ruleId":"359","severity":1,"message":"360","line":58,"column":38,"nodeType":"361","messageId":"362","endLine":58,"endColumn":40},{"ruleId":"343","severity":1,"message":"344","line":235,"column":29,"nodeType":"345","endLine":235,"endColumn":52},{"ruleId":"328","severity":1,"message":"372","line":4,"column":9,"nodeType":"330","messageId":"331","endLine":4,"endColumn":19},{"ruleId":"328","severity":1,"message":"373","line":7,"column":8,"nodeType":"330","messageId":"331","endLine":7,"endColumn":10},{"ruleId":"328","severity":1,"message":"374","line":9,"column":10,"nodeType":"330","messageId":"331","endLine":9,"endColumn":15},{"ruleId":"328","severity":1,"message":"375","line":10,"column":8,"nodeType":"330","messageId":"331","endLine":10,"endColumn":9},{"ruleId":"328","severity":1,"message":"376","line":62,"column":32,"nodeType":"330","messageId":"331","endLine":62,"endColumn":44},{"ruleId":"328","severity":1,"message":"377","line":62,"column":45,"nodeType":"330","messageId":"331","endLine":62,"endColumn":54},{"ruleId":"328","severity":1,"message":"378","line":62,"column":55,"nodeType":"330","messageId":"331","endLine":62,"endColumn":71},{"ruleId":"328","severity":1,"message":"379","line":62,"column":72,"nodeType":"330","messageId":"331","endLine":62,"endColumn":80},{"ruleId":"328","severity":1,"message":"351","line":64,"column":10,"nodeType":"330","messageId":"331","endLine":64,"endColumn":16},{"ruleId":"328","severity":1,"message":"352","line":64,"column":17,"nodeType":"330","messageId":"331","endLine":64,"endColumn":21},{"ruleId":"328","severity":1,"message":"380","line":68,"column":10,"nodeType":"330","messageId":"331","endLine":68,"endColumn":24},{"ruleId":"328","severity":1,"message":"381","line":70,"column":8,"nodeType":"330","messageId":"331","endLine":70,"endColumn":14},{"ruleId":"328","severity":1,"message":"382","line":71,"column":9,"nodeType":"330","messageId":"331","endLine":71,"endColumn":21},{"ruleId":"328","severity":1,"message":"383","line":76,"column":9,"nodeType":"330","messageId":"331","endLine":76,"endColumn":12},{"ruleId":"328","severity":1,"message":"384","line":76,"column":14,"nodeType":"330","messageId":"331","endLine":76,"endColumn":17},{"ruleId":"328","severity":1,"message":"385","line":76,"column":19,"nodeType":"330","messageId":"331","endLine":76,"endColumn":23},{"ruleId":"328","severity":1,"message":"386","line":76,"column":25,"nodeType":"330","messageId":"331","endLine":76,"endColumn":31},{"ruleId":"328","severity":1,"message":"387","line":77,"column":13,"nodeType":"330","messageId":"331","endLine":77,"endColumn":17},{"ruleId":"328","severity":1,"message":"388","line":78,"column":9,"nodeType":"330","messageId":"331","endLine":78,"endColumn":13},{"ruleId":"328","severity":1,"message":"389","line":146,"column":7,"nodeType":"330","messageId":"331","endLine":146,"endColumn":22},{"ruleId":"328","severity":1,"message":"390","line":157,"column":7,"nodeType":"330","messageId":"331","endLine":157,"endColumn":23},{"ruleId":"328","severity":1,"message":"391","line":181,"column":5,"nodeType":"330","messageId":"331","endLine":181,"endColumn":15},{"ruleId":"328","severity":1,"message":"392","line":182,"column":7,"nodeType":"330","messageId":"331","endLine":182,"endColumn":19},{"ruleId":"328","severity":1,"message":"393","line":219,"column":7,"nodeType":"330","messageId":"331","endLine":219,"endColumn":25},{"ruleId":"328","severity":1,"message":"394","line":272,"column":10,"nodeType":"330","messageId":"331","endLine":272,"endColumn":24},{"ruleId":"359","severity":1,"message":"360","line":276,"column":29,"nodeType":"361","messageId":"362","endLine":276,"endColumn":31},{"ruleId":"363","severity":1,"message":"364","line":279,"column":185,"nodeType":"365","messageId":"366","endLine":279,"endColumn":186},{"ruleId":"328","severity":1,"message":"395","line":311,"column":10,"nodeType":"330","messageId":"331","endLine":311,"endColumn":25},{"ruleId":"328","severity":1,"message":"396","line":318,"column":5,"nodeType":"330","messageId":"331","endLine":318,"endColumn":17},{"ruleId":"363","severity":1,"message":"364","line":320,"column":221,"nodeType":"365","messageId":"366","endLine":320,"endColumn":222},{"ruleId":"328","severity":1,"message":"397","line":660,"column":10,"nodeType":"330","messageId":"331","endLine":660,"endColumn":18},{"ruleId":"398","severity":1,"message":"399","line":672,"column":32,"nodeType":"365","messageId":"400","endLine":672,"endColumn":34},{"ruleId":"398","severity":1,"message":"399","line":672,"column":48,"nodeType":"365","messageId":"400","endLine":672,"endColumn":50},{"ruleId":"398","severity":1,"message":"401","line":684,"column":46,"nodeType":"365","messageId":"400","endLine":684,"endColumn":48},{"ruleId":"359","severity":1,"message":"360","line":845,"column":29,"nodeType":"361","messageId":"362","endLine":845,"endColumn":31},{"ruleId":"328","severity":1,"message":"402","line":853,"column":10,"nodeType":"330","messageId":"331","endLine":853,"endColumn":18},{"ruleId":"328","severity":1,"message":"403","line":860,"column":5,"nodeType":"330","messageId":"331","endLine":860,"endColumn":9},{"ruleId":"328","severity":1,"message":"404","line":861,"column":10,"nodeType":"330","messageId":"331","endLine":861,"endColumn":15},{"ruleId":"328","severity":1,"message":"405","line":901,"column":10,"nodeType":"330","messageId":"331","endLine":901,"endColumn":15},{"ruleId":"359","severity":1,"message":"360","line":998,"column":30,"nodeType":"361","messageId":"362","endLine":998,"endColumn":32},{"ruleId":"328","severity":1,"message":"406","line":1051,"column":10,"nodeType":"330","messageId":"331","endLine":1051,"endColumn":19},{"ruleId":"328","severity":1,"message":"407","line":1065,"column":10,"nodeType":"330","messageId":"331","endLine":1065,"endColumn":21},{"ruleId":"359","severity":1,"message":"360","line":1115,"column":28,"nodeType":"361","messageId":"362","endLine":1115,"endColumn":30},{"ruleId":"359","severity":1,"message":"360","line":1126,"column":90,"nodeType":"361","messageId":"362","endLine":1126,"endColumn":92},{"ruleId":"359","severity":1,"message":"360","line":1148,"column":28,"nodeType":"361","messageId":"362","endLine":1148,"endColumn":30},{"ruleId":"359","severity":1,"message":"360","line":1159,"column":86,"nodeType":"361","messageId":"362","endLine":1159,"endColumn":88},{"ruleId":"328","severity":1,"message":"408","line":1177,"column":10,"nodeType":"330","messageId":"331","endLine":1177,"endColumn":22},{"ruleId":"359","severity":1,"message":"360","line":1179,"column":16,"nodeType":"361","messageId":"362","endLine":1179,"endColumn":18},{"ruleId":"328","severity":1,"message":"409","line":1199,"column":17,"nodeType":"330","messageId":"331","endLine":1199,"endColumn":18},{"ruleId":"359","severity":1,"message":"360","line":1200,"column":28,"nodeType":"361","messageId":"362","endLine":1200,"endColumn":30},{"ruleId":"328","severity":1,"message":"410","line":1234,"column":10,"nodeType":"330","messageId":"331","endLine":1234,"endColumn":24},{"ruleId":"328","severity":1,"message":"411","line":1249,"column":10,"nodeType":"330","messageId":"331","endLine":1249,"endColumn":21},{"ruleId":"328","severity":1,"message":"412","line":1268,"column":5,"nodeType":"330","messageId":"331","endLine":1268,"endColumn":12},{"ruleId":"328","severity":1,"message":"413","line":1275,"column":7,"nodeType":"330","messageId":"331","endLine":1275,"endColumn":29},{"ruleId":"328","severity":1,"message":"414","line":1280,"column":5,"nodeType":"330","messageId":"331","endLine":1280,"endColumn":21},{"ruleId":"363","severity":1,"message":"364","line":1331,"column":183,"nodeType":"365","messageId":"366","endLine":1331,"endColumn":184},{"ruleId":"363","severity":1,"message":"364","line":1344,"column":185,"nodeType":"365","messageId":"366","endLine":1344,"endColumn":186},{"ruleId":"415","severity":1,"message":"416","line":1419,"column":11,"nodeType":"417","messageId":"400","endLine":1419,"endColumn":15,"fix":"418"},{"ruleId":"398","severity":1,"message":"399","line":1711,"column":38,"nodeType":"365","messageId":"400","endLine":1711,"endColumn":40},{"ruleId":"398","severity":1,"message":"399","line":1711,"column":52,"nodeType":"365","messageId":"400","endLine":1711,"endColumn":54},{"ruleId":"328","severity":1,"message":"419","line":1928,"column":13,"nodeType":"330","messageId":"331","endLine":1928,"endColumn":24},{"ruleId":"328","severity":1,"message":"420","line":1929,"column":13,"nodeType":"330","messageId":"331","endLine":1929,"endColumn":18},{"ruleId":"328","severity":1,"message":"421","line":2637,"column":25,"nodeType":"330","messageId":"331","endLine":2637,"endColumn":39},{"ruleId":"328","severity":1,"message":"422","line":3089,"column":29,"nodeType":"330","messageId":"331","endLine":3089,"endColumn":34},{"ruleId":"328","severity":1,"message":"423","line":2,"column":16,"nodeType":"330","messageId":"331","endLine":2,"endColumn":24},{"ruleId":"328","severity":1,"message":"339","line":2,"column":26,"nodeType":"330","messageId":"331","endLine":2,"endColumn":37},{"ruleId":"328","severity":1,"message":"340","line":2,"column":39,"nodeType":"330","messageId":"331","endLine":2,"endColumn":48},{"ruleId":"328","severity":1,"message":"329","line":2,"column":50,"nodeType":"330","messageId":"331","endLine":2,"endColumn":58},{"ruleId":"328","severity":1,"message":"424","line":19,"column":7,"nodeType":"330","messageId":"331","endLine":19,"endColumn":16},{"ruleId":"328","severity":1,"message":"425","line":22,"column":7,"nodeType":"330","messageId":"331","endLine":22,"endColumn":13},{"ruleId":"328","severity":1,"message":"426","line":48,"column":9,"nodeType":"330","messageId":"331","endLine":48,"endColumn":15},{"ruleId":"328","severity":1,"message":"427","line":49,"column":9,"nodeType":"330","messageId":"331","endLine":49,"endColumn":17},{"ruleId":"359","severity":1,"message":"360","line":55,"column":28,"nodeType":"361","messageId":"362","endLine":55,"endColumn":30},{"ruleId":"359","severity":1,"message":"360","line":87,"column":42,"nodeType":"361","messageId":"362","endLine":87,"endColumn":44},{"ruleId":"328","severity":1,"message":"428","line":97,"column":33,"nodeType":"330","messageId":"331","endLine":97,"endColumn":34},{"ruleId":"328","severity":1,"message":"429","line":136,"column":5,"nodeType":"330","messageId":"331","endLine":136,"endColumn":9},{"ruleId":"359","severity":1,"message":"360","line":163,"column":21,"nodeType":"361","messageId":"362","endLine":163,"endColumn":23},{"ruleId":"359","severity":1,"message":"360","line":165,"column":29,"nodeType":"361","messageId":"362","endLine":165,"endColumn":31},{"ruleId":"328","severity":1,"message":"430","line":202,"column":13,"nodeType":"330","messageId":"331","endLine":202,"endColumn":21},{"ruleId":"359","severity":1,"message":"360","line":279,"column":26,"nodeType":"361","messageId":"362","endLine":279,"endColumn":28},{"ruleId":"359","severity":1,"message":"360","line":280,"column":29,"nodeType":"361","messageId":"362","endLine":280,"endColumn":31},{"ruleId":"431","severity":1,"message":"432","line":348,"column":21,"nodeType":"433","endLine":348,"endColumn":31},{"ruleId":"343","severity":1,"message":"344","line":377,"column":30,"nodeType":"345","endLine":377,"endColumn":53},{"ruleId":"328","severity":1,"message":"346","line":2,"column":9,"nodeType":"330","messageId":"331","endLine":2,"endColumn":15},{"ruleId":"328","severity":1,"message":"378","line":5,"column":9,"nodeType":"330","messageId":"331","endLine":5,"endColumn":25},{"ruleId":"328","severity":1,"message":"434","line":60,"column":7,"nodeType":"330","messageId":"331","endLine":60,"endColumn":17},{"ruleId":"328","severity":1,"message":"435","line":62,"column":7,"nodeType":"330","messageId":"331","endLine":62,"endColumn":17},{"ruleId":"328","severity":1,"message":"436","line":1,"column":8,"nodeType":"330","messageId":"331","endLine":1,"endColumn":13},{"ruleId":"437","severity":1,"message":"438","line":1,"column":11,"nodeType":"439","messageId":"440","endLine":1,"endColumn":32},{"ruleId":"437","severity":1,"message":"441","line":1,"column":34,"nodeType":"439","messageId":"440","endLine":1,"endColumn":54},{"ruleId":"328","severity":1,"message":"357","line":4,"column":21,"nodeType":"330","messageId":"331","endLine":4,"endColumn":38},{"ruleId":"328","severity":1,"message":"354","line":5,"column":9,"nodeType":"330","messageId":"331","endLine":5,"endColumn":19},{"ruleId":"328","severity":1,"message":"353","line":5,"column":21,"nodeType":"330","messageId":"331","endLine":5,"endColumn":33},{"ruleId":"328","severity":1,"message":"351","line":10,"column":10,"nodeType":"330","messageId":"331","endLine":10,"endColumn":16},{"ruleId":"328","severity":1,"message":"442","line":12,"column":7,"nodeType":"330","messageId":"331","endLine":12,"endColumn":13},{"ruleId":"328","severity":1,"message":"389","line":14,"column":7,"nodeType":"330","messageId":"331","endLine":14,"endColumn":22},{"ruleId":"398","severity":1,"message":"401","line":99,"column":23,"nodeType":"365","messageId":"400","endLine":99,"endColumn":25},{"ruleId":"398","severity":1,"message":"401","line":101,"column":21,"nodeType":"365","messageId":"400","endLine":101,"endColumn":23},{"ruleId":"328","severity":1,"message":"436","line":1,"column":8,"nodeType":"330","messageId":"331","endLine":1,"endColumn":13},{"ruleId":"328","severity":1,"message":"443","line":38,"column":9,"nodeType":"330","messageId":"331","endLine":38,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":114,"column":22,"nodeType":"361","messageId":"362","endLine":114,"endColumn":24},{"ruleId":"359","severity":1,"message":"360","line":115,"column":28,"nodeType":"361","messageId":"362","endLine":115,"endColumn":30},{"ruleId":"328","severity":1,"message":"444","line":127,"column":15,"nodeType":"330","messageId":"331","endLine":127,"endColumn":20},{"ruleId":"328","severity":1,"message":"445","line":160,"column":17,"nodeType":"330","messageId":"331","endLine":160,"endColumn":18},{"ruleId":"328","severity":1,"message":"436","line":1,"column":8,"nodeType":"330","messageId":"331","endLine":1,"endColumn":13},{"ruleId":"328","severity":1,"message":"436","line":1,"column":8,"nodeType":"330","messageId":"331","endLine":1,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":23,"column":28,"nodeType":"361","messageId":"362","endLine":23,"endColumn":30},{"ruleId":"359","severity":1,"message":"360","line":35,"column":34,"nodeType":"361","messageId":"362","endLine":35,"endColumn":36},{"ruleId":"359","severity":1,"message":"360","line":66,"column":32,"nodeType":"361","messageId":"362","endLine":66,"endColumn":34},{"ruleId":"359","severity":1,"message":"360","line":68,"column":38,"nodeType":"361","messageId":"362","endLine":68,"endColumn":40},{"ruleId":"437","severity":1,"message":"438","line":1,"column":11,"nodeType":"439","messageId":"440","endLine":1,"endColumn":32},{"ruleId":"437","severity":1,"message":"441","line":1,"column":34,"nodeType":"439","messageId":"440","endLine":1,"endColumn":54},{"ruleId":"328","severity":1,"message":"446","line":13,"column":7,"nodeType":"330","messageId":"331","endLine":13,"endColumn":22},{"ruleId":"398","severity":1,"message":"401","line":106,"column":23,"nodeType":"365","messageId":"400","endLine":106,"endColumn":25},{"ruleId":"437","severity":1,"message":"447","line":1,"column":11,"nodeType":"439","messageId":"440","endLine":1,"endColumn":19},{"ruleId":"328","severity":1,"message":"448","line":1,"column":11,"nodeType":"449","messageId":"331","endLine":1,"endColumn":19},{"ruleId":"328","severity":1,"message":"450","line":3,"column":8,"nodeType":"330","messageId":"331","endLine":3,"endColumn":16},{"ruleId":"335","replacedBy":"451"},{"ruleId":"337","replacedBy":"452"},{"ruleId":"328","severity":1,"message":"383","line":1,"column":10,"nodeType":"330","messageId":"331","endLine":1,"endColumn":13},{"ruleId":"328","severity":1,"message":"329","line":4,"column":15,"nodeType":"330","messageId":"331","endLine":4,"endColumn":23},{"ruleId":"328","severity":1,"message":"329","line":3,"column":15,"nodeType":"330","messageId":"331","endLine":3,"endColumn":23},{"ruleId":"328","severity":1,"message":"453","line":14,"column":7,"nodeType":"330","messageId":"331","endLine":14,"endColumn":12},{"ruleId":"454","severity":1,"message":"455","line":18,"column":1,"nodeType":"456","endLine":29,"endColumn":3},{"ruleId":"328","severity":1,"message":"457","line":4,"column":7,"nodeType":"330","messageId":"331","endLine":4,"endColumn":12},{"ruleId":"328","severity":1,"message":"458","line":5,"column":7,"nodeType":"330","messageId":"331","endLine":5,"endColumn":13},{"ruleId":"328","severity":1,"message":"459","line":8,"column":7,"nodeType":"330","messageId":"331","endLine":8,"endColumn":13},{"ruleId":"460","severity":1,"message":"461","line":12,"column":5,"nodeType":"462","messageId":"463","endLine":14,"endColumn":6},{"ruleId":"460","severity":1,"message":"461","line":9,"column":5,"nodeType":"462","messageId":"463","endLine":11,"endColumn":6},{"ruleId":"460","severity":1,"message":"461","line":12,"column":5,"nodeType":"462","messageId":"463","endLine":14,"endColumn":6},{"ruleId":"464","severity":1,"message":"465","line":49,"column":17,"nodeType":"466","endLine":49,"endColumn":61},{"ruleId":"460","severity":1,"message":"461","line":12,"column":5,"nodeType":"462","messageId":"463","endLine":14,"endColumn":6},{"ruleId":"464","severity":1,"message":"465","line":43,"column":17,"nodeType":"466","endLine":43,"endColumn":54},{"ruleId":"464","severity":1,"message":"465","line":44,"column":17,"nodeType":"466","endLine":44,"endColumn":54},{"ruleId":"464","severity":1,"message":"465","line":45,"column":17,"nodeType":"466","endLine":45,"endColumn":54},{"ruleId":"464","severity":1,"message":"465","line":46,"column":17,"nodeType":"466","endLine":46,"endColumn":54},{"ruleId":"464","severity":1,"message":"465","line":47,"column":17,"nodeType":"466","endLine":47,"endColumn":54},{"ruleId":"464","severity":1,"message":"465","line":48,"column":17,"nodeType":"466","endLine":48,"endColumn":54},"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Link' is defined but never used.","'LineChart' is defined but never used.","no-native-reassign",["467"],"no-negated-in-lhs",["468"],"'useCallback' is defined but never used.","'useEffect' is defined but never used.","'ReactDOM' is defined but never used.","'AxisLeft' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'render' is defined but never used.","'SliderTraffic' is defined but never used.","'download' is defined but never used.","'material' is assigned a value but never used.","'Component' is defined but never used.","'Select' is defined but never used.","'SIZE' is defined but never used.","'BaseProvider' is defined but never used.","'LightTheme' is defined but never used.","'styled' is defined but never used.","'Styletron' is defined but never used.","'StyletronProvider' is defined but never used.","'text' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'adjustAllvideo' is defined but never used.","'csv' is defined but never used.","'max' is defined but never used.","'extent' is defined but never used.","'getData' is defined but never used.","'TripsLayer' is defined but never used.","'F2' is defined but never used.","'Radar' is defined but never used.","'_' is defined but never used.","'PolygonLayer' is defined but never used.","'IconLayer' is defined but never used.","'ScatterplotLayer' is defined but never used.","'ArcLayer' is defined but never used.","'SelectionLayer' is defined but never used.","'Charts' is defined but never used.","'HexagonLayer' is defined but never used.","'Bar' is defined but never used.","'Pie' is defined but never used.","'Area' is defined but never used.","'Column' is defined but never used.","'Line' is defined but never used.","'keys' is defined but never used.","'SelectContainer' is assigned a value but never used.","'SelectContainer2' is assigned a value but never used.","'colorTable' is assigned a value but never used.","'ICON_MAPPING' is assigned a value but never used.","'INITIAL_VIEW_STATE' is assigned a value but never used.","'getRouteByTime' is defined but never used.","'gerRouteByPoint' is defined but never used.","'getRoutedata' is assigned a value but never used.","'getRoute' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","Expected '===' and instead saw '=='.","'getBound' is defined but never used.","'root' is assigned a value but never used.","'Queue' is defined but never used.","'split' is defined but never used.","'getposmap' is defined but never used.","'getneighbor' is defined but never used.","'getBlockData' is defined but never used.","'m' is assigned a value but never used.","'setPredictData' is defined but never used.","'setRealData' is defined but never used.","'tmpIcon' is assigned a value but never used.","'selectedFeatureIndexes' is assigned a value but never used.","'heatmap_interval' is assigned a value but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression",{"range":"469","text":"470"},"'trailLength' is assigned a value but never used.","'theme' is assigned a value but never used.","'newBeijingdata' is assigned a value but never used.","'bound' is assigned a value but never used.","'useState' is defined but never used.","'totalTime' is assigned a value but never used.","'yScale' is assigned a value but never used.","'sorted' is assigned a value but never used.","'dataFlow' is assigned a value but never used.","'t' is assigned a value but never used.","'last' is assigned a value but never used.","'testData' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'MS_PER_DAY' is assigned a value but never used.","'dataFilter' is assigned a value but never used.","'React' is defined but never used.","no-redeclare","'requestAnimationFrame' is already defined as a built-in global variable.","Block","redeclaredAsBuiltin","'cancelAnimationFrame' is already defined as a built-in global variable.","'engine' is assigned a value but never used.","'area' is assigned a value but never used.","'group' is assigned a value but never used.","'g' is assigned a value but never used.","'ButtonContainer' is assigned a value but never used.","'document' is already defined as a built-in global variable.","'document' is defined but never used.","Program","'ReactDom' is defined but never used.",["467"],["468"],"'marks' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'width' is assigned a value but never used.","'height' is assigned a value but never used.","'circle' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",[51789,51800],""]