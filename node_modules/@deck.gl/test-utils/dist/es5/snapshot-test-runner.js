"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _testRunner = _interopRequireDefault(require("./test-runner"));

var _dom = require("./utils/dom");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DEFAULT_TEST_OPTIONS = {
  imageDiffOptions: {}
};
var DEFAULT_TEST_CASE = {
  name: 'Unnamed snapshot test',
  props: {},
  onAfterRender: function onAfterRender(_ref) {
    var deck = _ref.deck,
        layers = _ref.layers,
        done = _ref.done;

    if (layers.every(function (layer) {
      return layer.isLoaded;
    })) {
      done();
    }
  },
  goldenImage: ''
};

var SnapshotTestRunner = function (_TestRunner) {
  (0, _inherits2["default"])(SnapshotTestRunner, _TestRunner);

  var _super = _createSuper(SnapshotTestRunner);

  function SnapshotTestRunner(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SnapshotTestRunner);
    _this = _super.call(this, props);
    _this.isDiffing = false;
    Object.assign(_this.testOptions, DEFAULT_TEST_OPTIONS);
    return _this;
  }

  (0, _createClass2["default"])(SnapshotTestRunner, [{
    key: "initTestCase",
    value: function initTestCase(testCase) {
      (0, _get2["default"])((0, _getPrototypeOf2["default"])(SnapshotTestRunner.prototype), "initTestCase", this).call(this, testCase);

      if (!testCase.goldenImage) {
        throw new Error("Test case ".concat(testCase.name, " does not have golden image"));
      }
    }
  }, {
    key: "runTestCase",
    value: function runTestCase(testCase, onDone) {
      var deck = this.deck;
      deck.setProps(Object.assign({}, this.props, testCase, {
        onAfterRender: function onAfterRender() {
          testCase.onAfterRender({
            deck: deck,
            layers: deck.props.layers,
            done: onDone
          });
        }
      }));
    }
  }, {
    key: "shouldRender",
    value: function shouldRender() {
      return !this.isDiffing;
    }
  }, {
    key: "assert",
    value: function assert(testCase) {
      var _this2 = this;

      if (this.isDiffing) {
        return;
      }

      this.isDiffing = true;
      var diffOptions = Object.assign({}, this.testOptions.imageDiffOptions, testCase.imageDiffOptions, {
        goldenImage: testCase.goldenImage,
        region: (0, _dom.getBoundingBoxInPage)(this.deck.canvas)
      });
      window.browserTestDriver_captureAndDiffScreen(diffOptions).then(function (result) {
        if (result.success) {
          _this2._pass(result);
        } else {
          _this2._fail(result);
        }

        _this2.isDiffing = false;

        _this2._next();
      });
    }
  }, {
    key: "defaultTestCase",
    get: function get() {
      return DEFAULT_TEST_CASE;
    }
  }]);
  return SnapshotTestRunner;
}(_testRunner["default"]);

exports["default"] = SnapshotTestRunner;
//# sourceMappingURL=snapshot-test-runner.js.map