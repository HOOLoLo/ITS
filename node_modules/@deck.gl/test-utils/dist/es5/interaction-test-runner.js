"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _testRunner = _interopRequireDefault(require("./test-runner"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DEFAULT_TEST_CASE = {
  name: 'Unnamed interaction test',
  events: [],
  onBeforeEvents: function onBeforeEvents(_ref) {
    var deck = _ref.deck;
  },
  onAfterEvents: function onAfterEvents(_ref2) {
    var deck = _ref2.deck,
        layers = _ref2.layers,
        context = _ref2.context;
  }
};

function sleep(timeout) {
  return new Promise(function (resolve) {
    return window.setTimeout(resolve, timeout);
  });
}

var InteractionTestRunner = function (_TestRunner) {
  (0, _inherits2["default"])(InteractionTestRunner, _TestRunner);

  var _super = _createSuper(InteractionTestRunner);

  function InteractionTestRunner() {
    (0, _classCallCheck2["default"])(this, InteractionTestRunner);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(InteractionTestRunner, [{
    key: "runTestCase",
    value: function runTestCase(testCase, onDone) {
      testCase.context = testCase.onBeforeEvents({
        deck: this.deck
      });
      var promise = Promise.resolve();

      var _iterator = _createForOfIteratorHelper(testCase.events),
          _step;

      try {
        var _loop = function _loop() {
          var event = _step.value;

          if (event.wait) {
            promise = promise.then(function () {
              return sleep(event.wait);
            });
          } else {
            promise = promise.then(function () {
              return window.browserTestDriver_emulateInput(event);
            });
          }
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return promise.then(onDone);
    }
  }, {
    key: "assert",
    value: function assert(testCase) {
      testCase.onAfterEvents({
        deck: this.deck,
        layers: this.deck.layerManager.getLayers(),
        context: testCase.context
      });

      this._next();
    }
  }, {
    key: "defaultTestCase",
    get: function get() {
      return DEFAULT_TEST_CASE;
    }
  }]);
  return InteractionTestRunner;
}(_testRunner["default"]);

exports["default"] = InteractionTestRunner;
//# sourceMappingURL=interaction-test-runner.js.map