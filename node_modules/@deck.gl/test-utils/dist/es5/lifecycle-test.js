"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testInitializeLayer = testInitializeLayer;
exports.testLayer = testLayer;
exports.testLayerAsync = testLayerAsync;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _core = require("@deck.gl/core");

var _testUtils = require("@probe.gl/test-utils");

var _setupGl = _interopRequireDefault(require("./utils/setup-gl"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var testViewport = new _core.MapView().makeViewport({
  width: 100,
  height: 100,
  viewState: {
    longitude: 0,
    latitude: 0,
    zoom: 1
  }
});

function defaultOnError(error, title) {
  if (error) {
    throw error;
  }
}

function testInitializeLayer(_ref) {
  var layer = _ref.layer,
      _ref$viewport = _ref.viewport,
      viewport = _ref$viewport === void 0 ? testViewport : _ref$viewport,
      _ref$onError = _ref.onError,
      _onError = _ref$onError === void 0 ? defaultOnError : _ref$onError;

  var layerManager = new _core.LayerManager(_setupGl["default"], {
    viewport: viewport
  });
  layerManager.setProps({
    onError: function onError(error) {
      return _onError(error, "initializing ".concat(layer.id));
    }
  });
  layerManager.setLayers([layer]);
  layerManager.finalize();
  return null;
}

function testLayer(opts) {
  var Layer = opts.Layer,
      _opts$testCases = opts.testCases,
      testCases = _opts$testCases === void 0 ? [] : _opts$testCases,
      _opts$spies = opts.spies,
      spies = _opts$spies === void 0 ? [] : _opts$spies,
      _opts$onError = opts.onError,
      onError = _opts$onError === void 0 ? defaultOnError : _opts$onError;
  var resources = setupLayerTests("testing ".concat(Layer.layerName), opts);
  var layer = new Layer();

  var _iterator = _createForOfIteratorHelper(testCases),
      _step;

  try {
    var _loop = function _loop() {
      var testCase = _step.value;
      var oldState = Object.assign({}, layer.state);

      var _runLayerTestUpdate = runLayerTestUpdate(testCase, resources, layer, spies),
          newLayer = _runLayerTestUpdate.layer,
          spyMap = _runLayerTestUpdate.spyMap;

      runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap);
      Object.keys(spyMap).forEach(function (k) {
        return spyMap[k].reset();
      });
      layer = newLayer;
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var error = cleanupAfterLayerTests(resources);

  if (error) {
    onError(error, "".concat(Layer.layerName, " should delete all resources"));
  }
}

function testLayerAsync(_x) {
  return _testLayerAsync.apply(this, arguments);
}

function _testLayerAsync() {
  _testLayerAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(opts) {
    var Layer, _opts$testCases2, testCases, _opts$spies2, spies, _opts$onError2, onError, resources, layer, _iterator3, _step3, _loop2, error;

    return _regenerator["default"].wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            Layer = opts.Layer, _opts$testCases2 = opts.testCases, testCases = _opts$testCases2 === void 0 ? [] : _opts$testCases2, _opts$spies2 = opts.spies, spies = _opts$spies2 === void 0 ? [] : _opts$spies2, _opts$onError2 = opts.onError, onError = _opts$onError2 === void 0 ? defaultOnError : _opts$onError2;
            resources = setupLayerTests("testing ".concat(Layer.layerName), opts);
            layer = new Layer();
            _iterator3 = _createForOfIteratorHelper(testCases);
            _context2.prev = 4;
            _loop2 = _regenerator["default"].mark(function _loop2() {
              var testCase, oldState, _runLayerTestUpdate2, newLayer, spyMap;

              return _regenerator["default"].wrap(function _loop2$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      testCase = _step3.value;
                      oldState = Object.assign({}, layer.state);
                      _runLayerTestUpdate2 = runLayerTestUpdate(testCase, resources, layer, spies), newLayer = _runLayerTestUpdate2.layer, spyMap = _runLayerTestUpdate2.spyMap;
                      runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap);

                    case 4:
                      if (newLayer.isLoaded) {
                        _context.next = 10;
                        break;
                      }

                      _context.next = 7;
                      return update(resources);

                    case 7:
                      runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap);
                      _context.next = 4;
                      break;

                    case 10:
                      Object.keys(spyMap).forEach(function (k) {
                        return spyMap[k].reset();
                      });
                      layer = newLayer;

                    case 12:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _loop2);
            });

            _iterator3.s();

          case 7:
            if ((_step3 = _iterator3.n()).done) {
              _context2.next = 11;
              break;
            }

            return _context2.delegateYield(_loop2(), "t0", 9);

          case 9:
            _context2.next = 7;
            break;

          case 11:
            _context2.next = 16;
            break;

          case 13:
            _context2.prev = 13;
            _context2.t1 = _context2["catch"](4);

            _iterator3.e(_context2.t1);

          case 16:
            _context2.prev = 16;

            _iterator3.f();

            return _context2.finish(16);

          case 19:
            error = cleanupAfterLayerTests(resources);

            if (error) {
              onError(error, "".concat(Layer.layerName, " should delete all resources"));
            }

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, null, [[4, 13, 16, 19]]);
  }));
  return _testLayerAsync.apply(this, arguments);
}

function setupLayerTests(testTitle, _ref2) {
  var _ref2$viewport = _ref2.viewport,
      viewport = _ref2$viewport === void 0 ? testViewport : _ref2$viewport,
      _ref2$timeline = _ref2.timeline,
      timeline = _ref2$timeline === void 0 ? null : _ref2$timeline,
      _ref2$onError = _ref2.onError,
      _onError2 = _ref2$onError === void 0 ? defaultOnError : _ref2$onError;

  var oldResourceCounts = getResourceCounts();
  var layerManager = new _core.LayerManager(_setupGl["default"], {
    viewport: viewport,
    timeline: timeline
  });
  var deckRenderer = new _core.DeckRenderer(_setupGl["default"]);
  layerManager.context.animationProps = {
    time: 0
  };
  var props = {
    onError: function onError(error) {
      return _onError2(error, testTitle);
    }
  };
  layerManager.setProps(props);
  deckRenderer.setProps(props);
  return {
    layerManager: layerManager,
    deckRenderer: deckRenderer,
    oldResourceCounts: oldResourceCounts
  };
}

function cleanupAfterLayerTests(_ref3) {
  var layerManager = _ref3.layerManager,
      deckRenderer = _ref3.deckRenderer,
      oldResourceCounts = _ref3.oldResourceCounts;
  layerManager.setLayers([]);
  layerManager.finalize();
  deckRenderer.finalize();
  var resourceCounts = getResourceCounts();

  for (var resourceName in resourceCounts) {
    if (resourceCounts[resourceName] !== oldResourceCounts[resourceName]) {
      return new Error("".concat(resourceCounts[resourceName] - oldResourceCounts[resourceName], " ").concat(resourceName, "s"));
    }
  }

  return null;
}

function getResourceCounts() {
  var resourceStats = luma.stats.get('Resource Counts');
  return {
    Texture2D: resourceStats.get('Texture2Ds Active').count,
    Buffer: resourceStats.get('Buffers Active').count
  };
}

function injectSpies(layer, spies) {
  var spyMap = {};

  if (spies) {
    var _iterator2 = _createForOfIteratorHelper(spies),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var functionName = _step2.value;
        spyMap[functionName] = (0, _testUtils.makeSpy)(Object.getPrototypeOf(layer), functionName);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return spyMap;
}

function runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap) {
  if (testCase.onAfterUpdate) {
    var subLayers = newLayer.isComposite ? newLayer.getSubLayers() : [];
    var subLayer = subLayers.length && subLayers[0];
    testCase.onAfterUpdate({
      testCase: testCase,
      layer: newLayer,
      oldState: oldState,
      subLayers: subLayers,
      subLayer: subLayer,
      spies: spyMap
    });
  }
}

function runLayerTestUpdate(testCase, _ref4, layer, spies) {
  var layerManager = _ref4.layerManager,
      deckRenderer = _ref4.deckRenderer;
  var props = testCase.props,
      updateProps = testCase.updateProps,
      onBeforeUpdate = testCase.onBeforeUpdate,
      _testCase$viewport = testCase.viewport,
      viewport = _testCase$viewport === void 0 ? layerManager.context.viewport : _testCase$viewport;

  if (onBeforeUpdate) {
    onBeforeUpdate({
      layer: layer,
      testCase: testCase
    });
  }

  if (props) {
    layer = new layer.constructor(props);
  } else if (updateProps) {
    layer = layer.clone(updateProps);
  }

  spies = testCase.spies || spies;
  var spyMap = injectSpies(layer, spies);
  layerManager.setLayers([layer]);
  deckRenderer.renderLayers({
    viewports: [viewport],
    layers: layerManager.getLayers(),
    onViewportActive: layerManager.activateViewport
  });
  return {
    layer: layer,
    spyMap: spyMap
  };
}

function update(_ref5) {
  var layerManager = _ref5.layerManager,
      deckRenderer = _ref5.deckRenderer;
  return new Promise(function (resolve) {
    var onAnimationFrame = function onAnimationFrame() {
      if (layerManager.needsUpdate()) {
        layerManager.updateLayers();
        deckRenderer.renderLayers({
          viewports: [layerManager.context.viewport],
          layers: layerManager.getLayers(),
          onViewportActive: layerManager.activateViewport
        });
        resolve();
        return;
      }

      setTimeout(onAnimationFrame, 50);
    };

    onAnimationFrame();
  });
}
//# sourceMappingURL=lifecycle-test.js.map