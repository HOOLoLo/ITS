{"version":3,"sources":["../../src/lifecycle-test.js"],"names":["testViewport","MapView","makeViewport","width","height","viewState","longitude","latitude","zoom","defaultOnError","error","title","testInitializeLayer","layer","viewport","onError","layerManager","LayerManager","gl","setProps","id","setLayers","finalize","testLayer","opts","Layer","testCases","spies","resources","setupLayerTests","layerName","testCase","oldState","Object","assign","state","runLayerTestUpdate","newLayer","spyMap","runLayerTestPostUpdateCheck","keys","forEach","k","reset","cleanupAfterLayerTests","testLayerAsync","isLoaded","update","testTitle","timeline","oldResourceCounts","getResourceCounts","deckRenderer","DeckRenderer","context","animationProps","time","props","resourceCounts","resourceName","Error","resourceStats","luma","stats","get","Texture2D","count","Buffer","injectSpies","functionName","getPrototypeOf","onAfterUpdate","subLayers","isComposite","getSubLayers","subLayer","length","updateProps","onBeforeUpdate","constructor","clone","renderLayers","viewports","layers","getLayers","onViewportActive","activateViewport","Promise","resolve","onAnimationFrame","needsUpdate","updateLayers","setTimeout"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerManager, MapView, DeckRenderer} from '@deck.gl/core';\n\nimport {makeSpy} from '@probe.gl/test-utils';\nimport gl from './utils/setup-gl';\n\nconst testViewport = new MapView().makeViewport({\n  width: 100,\n  height: 100,\n  viewState: {longitude: 0, latitude: 0, zoom: 1}\n});\n\nfunction defaultOnError(error, title) {\n  if (error) {\n    throw error;\n  }\n}\n\nexport function testInitializeLayer({layer, viewport = testViewport, onError = defaultOnError}) {\n  const layerManager = new LayerManager(gl, {viewport});\n  layerManager.setProps({\n    onError: error => onError(error, `initializing ${layer.id}`)\n  });\n\n  layerManager.setLayers([layer]);\n  layerManager.finalize();\n\n  return null;\n}\n\nexport function testLayer(opts) {\n  const {Layer, testCases = [], spies = [], onError = defaultOnError} = opts;\n\n  const resources = setupLayerTests(`testing ${Layer.layerName}`, opts);\n\n  let layer = new Layer();\n  // Run successive update tests\n  for (const testCase of testCases) {\n    // Save old state before update\n    const oldState = Object.assign({}, layer.state);\n\n    const {layer: newLayer, spyMap} = runLayerTestUpdate(testCase, resources, layer, spies);\n\n    runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap);\n\n    // Remove spies\n    Object.keys(spyMap).forEach(k => spyMap[k].reset());\n    layer = newLayer;\n  }\n\n  const error = cleanupAfterLayerTests(resources);\n  if (error) {\n    onError(error, `${Layer.layerName} should delete all resources`);\n  }\n}\n\nexport async function testLayerAsync(opts) {\n  const {Layer, testCases = [], spies = [], onError = defaultOnError} = opts;\n\n  const resources = setupLayerTests(`testing ${Layer.layerName}`, opts);\n\n  let layer = new Layer();\n  // Run successive update tests\n  for (const testCase of testCases) {\n    // Save old state before update\n    const oldState = Object.assign({}, layer.state);\n\n    const {layer: newLayer, spyMap} = runLayerTestUpdate(testCase, resources, layer, spies);\n\n    runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap);\n\n    while (!newLayer.isLoaded) {\n      await update(resources);\n      runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap);\n    }\n\n    // Remove spies\n    Object.keys(spyMap).forEach(k => spyMap[k].reset());\n    layer = newLayer;\n  }\n\n  const error = cleanupAfterLayerTests(resources);\n  if (error) {\n    onError(error, `${Layer.layerName} should delete all resources`);\n  }\n}\n\nfunction setupLayerTests(\n  testTitle,\n  {viewport = testViewport, timeline = null, onError = defaultOnError}\n) {\n  const oldResourceCounts = getResourceCounts();\n\n  const layerManager = new LayerManager(gl, {viewport, timeline});\n  const deckRenderer = new DeckRenderer(gl);\n\n  layerManager.context.animationProps = {\n    time: 0\n  };\n\n  const props = {\n    onError: error => onError(error, testTitle)\n  };\n  layerManager.setProps(props);\n  deckRenderer.setProps(props);\n\n  return {layerManager, deckRenderer, oldResourceCounts};\n}\n\nfunction cleanupAfterLayerTests({layerManager, deckRenderer, oldResourceCounts}) {\n  layerManager.setLayers([]);\n  layerManager.finalize();\n  deckRenderer.finalize();\n\n  const resourceCounts = getResourceCounts();\n\n  for (const resourceName in resourceCounts) {\n    if (resourceCounts[resourceName] !== oldResourceCounts[resourceName]) {\n      return new Error(\n        `${resourceCounts[resourceName] - oldResourceCounts[resourceName]} ${resourceName}s`\n      );\n    }\n  }\n  return null;\n}\n\nfunction getResourceCounts() {\n  /* global luma */\n  const resourceStats = luma.stats.get('Resource Counts');\n  return {\n    Texture2D: resourceStats.get('Texture2Ds Active').count,\n    Buffer: resourceStats.get('Buffers Active').count\n  };\n}\n\nfunction injectSpies(layer, spies) {\n  const spyMap = {};\n  if (spies) {\n    for (const functionName of spies) {\n      spyMap[functionName] = makeSpy(Object.getPrototypeOf(layer), functionName);\n    }\n  }\n  return spyMap;\n}\n\nfunction runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap) {\n  // assert on updated layer\n  if (testCase.onAfterUpdate) {\n    // layer manager should handle match subLayer and tranfer state and props\n    // here we assume subLayer matches copy over the new props from a new subLayer\n    const subLayers = newLayer.isComposite ? newLayer.getSubLayers() : [];\n    const subLayer = subLayers.length && subLayers[0];\n\n    testCase.onAfterUpdate({\n      testCase,\n      layer: newLayer,\n      oldState,\n      subLayers,\n      subLayer,\n      spies: spyMap\n    });\n  }\n}\n\nfunction runLayerTestUpdate(testCase, {layerManager, deckRenderer}, layer, spies) {\n  const {props, updateProps, onBeforeUpdate, viewport = layerManager.context.viewport} = testCase;\n\n  if (onBeforeUpdate) {\n    onBeforeUpdate({layer, testCase});\n  }\n\n  if (props) {\n    // Test case can reset the props on every iteration\n    layer = new layer.constructor(props);\n  } else if (updateProps) {\n    // Test case can override with new props on every iteration\n    layer = layer.clone(updateProps);\n  }\n\n  // Create a map of spies that the test case can inspect\n  spies = testCase.spies || spies;\n  const spyMap = injectSpies(layer, spies);\n\n  layerManager.setLayers([layer]);\n\n  // call draw layer\n  deckRenderer.renderLayers({\n    viewports: [viewport],\n    layers: layerManager.getLayers(),\n    onViewportActive: layerManager.activateViewport\n  });\n\n  return {layer, spyMap};\n}\n\n/* global setTimeout */\nfunction update({layerManager, deckRenderer}) {\n  return new Promise(resolve => {\n    const onAnimationFrame = () => {\n      if (layerManager.needsUpdate()) {\n        layerManager.updateLayers();\n\n        deckRenderer.renderLayers({\n          viewports: [layerManager.context.viewport],\n          layers: layerManager.getLayers(),\n          onViewportActive: layerManager.activateViewport\n        });\n        resolve();\n        return;\n      }\n\n      setTimeout(onAnimationFrame, 50);\n    };\n\n    onAnimationFrame();\n  });\n}\n"],"file":"lifecycle-test.js"}