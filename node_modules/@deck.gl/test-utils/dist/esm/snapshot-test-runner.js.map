{"version":3,"sources":["../../src/snapshot-test-runner.js"],"names":["TestRunner","getBoundingBoxInPage","DEFAULT_TEST_OPTIONS","imageDiffOptions","DEFAULT_TEST_CASE","name","props","onAfterRender","deck","layers","done","every","layer","isLoaded","goldenImage","SnapshotTestRunner","isDiffing","Object","assign","testOptions","testCase","Error","onDone","setProps","diffOptions","region","canvas","window","browserTestDriver_captureAndDiffScreen","then","result","success","_pass","_fail","_next"],"mappings":";;;;;;;;;;;AAqBA,OAAOA,UAAP,MAAuB,eAAvB;AACA,SAAQC,oBAAR,QAAmC,aAAnC;AAEA,IAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,gBAAgB,EAAE;AADS,CAA7B;AAIA,IAAMC,iBAAiB,GAAG;AACxBC,EAAAA,IAAI,EAAE,uBADkB;AAExBC,EAAAA,KAAK,EAAE,EAFiB;AAGxBC,EAAAA,aAAa,EAAE,6BAA0B;AAAA,QAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,QAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,QAAVC,IAAU,QAAVA,IAAU;;AACvC,QAAID,MAAM,CAACE,KAAP,CAAa,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACC,QAAV;AAAA,KAAlB,CAAJ,EAA2C;AACzCH,MAAAA,IAAI;AACL;AACF,GAPuB;AAQxBI,EAAAA,WAAW,EAAE;AARW,CAA1B;;IAWqBC,kB;;;;;AACnB,8BAAYT,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKU,SAAL,GAAiB,KAAjB;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAc,MAAKC,WAAnB,EAAgCjB,oBAAhC;AALiB;AAMlB;;;;iCAMYkB,Q,EAAU;AACrB,2FAAmBA,QAAnB;;AACA,UAAI,CAACA,QAAQ,CAACN,WAAd,EAA2B;AACzB,cAAM,IAAIO,KAAJ,qBAAuBD,QAAQ,CAACf,IAAhC,iCAAN;AACD;AACF;;;gCAEWe,Q,EAAUE,M,EAAQ;AAAA,UACrBd,IADqB,GACb,IADa,CACrBA,IADqB;AAG5BA,MAAAA,IAAI,CAACe,QAAL,CACEN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKZ,KAAvB,EAA8Bc,QAA9B,EAAwC;AACtCb,QAAAA,aAAa,EAAE,yBAAM;AACnBa,UAAAA,QAAQ,CAACb,aAAT,CAAuB;AACrBC,YAAAA,IAAI,EAAJA,IADqB;AAErBC,YAAAA,MAAM,EAAED,IAAI,CAACF,KAAL,CAAWG,MAFE;AAGrBC,YAAAA,IAAI,EAAEY;AAHe,WAAvB;AAKD;AAPqC,OAAxC,CADF;AAWD;;;mCAEc;AAEb,aAAO,CAAC,KAAKN,SAAb;AACD;;;2BAEMI,Q,EAAU;AAAA;;AACf,UAAI,KAAKJ,SAAT,EAAoB;AAElB;AACD;;AACD,WAAKA,SAAL,GAAiB,IAAjB;AAEA,UAAMQ,WAAW,GAAGP,MAAM,CAACC,MAAP,CAClB,EADkB,EAElB,KAAKC,WAAL,CAAiBhB,gBAFC,EAGlBiB,QAAQ,CAACjB,gBAHS,EAIlB;AACEW,QAAAA,WAAW,EAAEM,QAAQ,CAACN,WADxB;AAEEW,QAAAA,MAAM,EAAExB,oBAAoB,CAAC,KAAKO,IAAL,CAAUkB,MAAX;AAF9B,OAJkB,CAApB;AAUAC,MAAAA,MAAM,CAACC,sCAAP,CAA8CJ,WAA9C,EAA2DK,IAA3D,CAAgE,UAAAC,MAAM,EAAI;AAExE,YAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB,UAAA,MAAI,CAACC,KAAL,CAAWF,MAAX;AACD,SAFD,MAEO;AACL,UAAA,MAAI,CAACG,KAAL,CAAWH,MAAX;AACD;;AAED,QAAA,MAAI,CAACd,SAAL,GAAiB,KAAjB;;AACA,QAAA,MAAI,CAACkB,KAAL;AACD,OAVD;AAWD;;;wBA5DqB;AACpB,aAAO9B,iBAAP;AACD;;;;EAX6CJ,U;;SAA3Be,kB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window */\nimport TestRunner from './test-runner';\nimport {getBoundingBoxInPage} from './utils/dom';\n\nconst DEFAULT_TEST_OPTIONS = {\n  imageDiffOptions: {}\n};\n\nconst DEFAULT_TEST_CASE = {\n  name: 'Unnamed snapshot test',\n  props: {},\n  onAfterRender: ({deck, layers, done}) => {\n    if (layers.every(layer => layer.isLoaded)) {\n      done(); // eslint-disable-line\n    }\n  },\n  goldenImage: ''\n};\n\nexport default class SnapshotTestRunner extends TestRunner {\n  constructor(props) {\n    super(props);\n\n    this.isDiffing = false;\n\n    Object.assign(this.testOptions, DEFAULT_TEST_OPTIONS);\n  }\n\n  get defaultTestCase() {\n    return DEFAULT_TEST_CASE;\n  }\n\n  initTestCase(testCase) {\n    super.initTestCase(testCase);\n    if (!testCase.goldenImage) {\n      throw new Error(`Test case ${testCase.name} does not have golden image`);\n    }\n  }\n\n  runTestCase(testCase, onDone) {\n    const {deck} = this;\n\n    deck.setProps(\n      Object.assign({}, this.props, testCase, {\n        onAfterRender: () => {\n          testCase.onAfterRender({\n            deck,\n            layers: deck.props.layers,\n            done: onDone\n          });\n        }\n      })\n    );\n  }\n\n  shouldRender() {\n    // wait for the current diffing to finish\n    return !this.isDiffing;\n  }\n\n  assert(testCase) {\n    if (this.isDiffing) {\n      // already performing diffing\n      return;\n    }\n    this.isDiffing = true;\n\n    const diffOptions = Object.assign(\n      {},\n      this.testOptions.imageDiffOptions,\n      testCase.imageDiffOptions,\n      {\n        goldenImage: testCase.goldenImage,\n        region: getBoundingBoxInPage(this.deck.canvas)\n      }\n    );\n    // Take screenshot and compare\n    window.browserTestDriver_captureAndDiffScreen(diffOptions).then(result => {\n      // invoke user callback\n      if (result.success) {\n        this._pass(result);\n      } else {\n        this._fail(result);\n      }\n\n      this.isDiffing = false;\n      this._next();\n    });\n  }\n}\n"],"file":"snapshot-test-runner.js"}