import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { Deck, MapView } from '@deck.gl/core';
var GL_VENDOR = 0x1f00;
var DEFAULT_DECK_PROPS = Object.assign({}, Deck.defaultProps, {
  id: 'deckgl-render-test',
  width: 800,
  height: 450,
  style: {
    position: 'absolute',
    left: '0px',
    top: '0px'
  },
  views: [new MapView()],
  useDevicePixels: false,
  debug: true
});
var DEFAULT_TEST_OPTIONS = {
  onTestStart: function onTestStart(testCase) {
    return console.log("# ".concat(testCase.name));
  },
  onTestPass: function onTestPass(testCase) {
    return console.log("ok ".concat(testCase.name, " passed"));
  },
  onTestFail: function onTestFail(testCase) {
    return console.log("not ok ".concat(testCase.name, " failed"));
  },
  timeout: 2000
};
var DEFAULT_TEST_CASE = {
  name: 'Unnamed test'
};

var TestRunner = function () {
  function TestRunner() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TestRunner);

    this.props = Object.assign({}, DEFAULT_DECK_PROPS, props);
    this.isRunning = false;
    this._testCases = [];
    this._testCaseData = null;
    this.isHeadless = Boolean(window.browserTestDriver_isHeadless);
    this.testOptions = Object.assign({}, DEFAULT_TEST_OPTIONS);
  }

  _createClass(TestRunner, [{
    key: "add",
    value: function add(testCases) {
      if (!Array.isArray(testCases)) {
        testCases = [testCases];
      }

      var _iterator = _createForOfIteratorHelper(testCases),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var testCase = _step.value;

          this._testCases.push(testCase);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return this;
    }
  }, {
    key: "run",
    value: function run() {
      var _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      Object.assign(this.testOptions, options);
      return new Promise(function (resolve, reject) {
        _this.deck = new Deck(Object.assign({}, _this.props, {
          onWebGLInitialized: _this._onWebGLInitialized.bind(_this),
          onLoad: resolve
        }));
        _this.isRunning = true;
        _this._currentTestCase = null;
      }).then(function () {
        var promise = Promise.resolve();

        _this._testCases.forEach(function (testCase) {
          promise = promise.then(function () {
            return _this._runTest(testCase);
          });
        });

        return promise;
      })["catch"](function (error) {
        _this._fail({
          error: error.message
        });
      })["finally"](function () {
        _this.deck.finalize();

        _this.deck = null;
      });
    }
  }, {
    key: "initTestCase",
    value: function initTestCase(testCase) {
      for (var key in this.defaultTestCase) {
        if (!(key in testCase)) {
          testCase[key] = this.defaultTestCase[key];
        }
      }

      this.testOptions.onTestStart(testCase);
    }
  }, {
    key: "assert",
    value: function assert(testCase) {
      this.onTestPass(testCase);

      this._next();
    }
  }, {
    key: "_pass",
    value: function _pass(result) {
      this.testOptions.onTestPass(this._currentTestCase, result);
    }
  }, {
    key: "_fail",
    value: function _fail(result) {
      this.testOptions.onTestFail(this._currentTestCase, result);
    }
  }, {
    key: "_onWebGLInitialized",
    value: function _onWebGLInitialized(gl) {
      var vendorMasked = gl.getParameter(GL_VENDOR);
      var ext = gl.getExtension('WEBGL_debug_renderer_info');
      var vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL_VENDOR);
      this.gpuVendor = vendorUnmasked || vendorMasked;
    }
  }, {
    key: "_runTest",
    value: function _runTest(testCase) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _this2._currentTestCase = testCase;
        _this2._next = resolve;

        _this2.initTestCase(testCase);

        var isDone = false;
        var timeoutId = null;

        var done = function done() {
          if (!isDone) {
            isDone = true;
            window.clearTimeout(timeoutId);

            _this2.assert(testCase);
          }
        };

        timeoutId = window.setTimeout(done, testCase.timeout || _this2.testOptions.timeout);

        _this2.runTestCase(testCase, done);
      });
    }
  }, {
    key: "defaultTestCase",
    get: function get() {
      return DEFAULT_TEST_CASE;
    }
  }]);

  return TestRunner;
}();

export { TestRunner as default };
//# sourceMappingURL=test-runner.js.map