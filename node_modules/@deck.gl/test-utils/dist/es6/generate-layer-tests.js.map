{"version":3,"sources":["../../src/generate-layer-tests.js"],"names":["_count","count","noop","defaultAssert","condition","comment","Error","generateLayerTests","Layer","sampleProps","assert","onBeforeUpdate","onAfterUpdate","runDefaultAsserts","layerName","wrapTestCaseTitle","title","testCases","props","updateProps","data","error","message","_propTypes","propTypes","_mergedDefaultProps","defaultProps","push","makeAltDataTestCases","propName","newTestCase","makeAltPropTestCase","forEach","testCase","beforeFunc","afterFunc","params","layer","isComposite","subLayers","length","getModels","newProps","propDef","type","String","max","min","callCount","updateTriggers","originalData","Array","isArray","partialUpdateProps","slice","_dataDiff","startRow","endRow","genIterableProps","Set","nonIterableProps","_","info","index"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {_count as count} from '@deck.gl/core';\n\nfunction noop() {}\n\nfunction defaultAssert(condition, comment) {\n  if (!condition) {\n    throw new Error(comment);\n  }\n}\n\n// Automatically generate testLayer test cases\nexport function generateLayerTests({\n  Layer,\n  sampleProps = {},\n  assert = defaultAssert,\n  onBeforeUpdate = noop,\n  onAfterUpdate = noop,\n  runDefaultAsserts = true\n}) {\n  assert(Layer.layerName, 'Layer should have display name');\n\n  function wrapTestCaseTitle(title) {\n    return `${Layer.layerName}#${title}`;\n  }\n\n  const testCases = [\n    {\n      title: 'Empty props',\n      props: {}\n    },\n    {\n      title: 'Null data',\n      updateProps: {data: null}\n    },\n    {\n      title: 'Sample data',\n      updateProps: sampleProps\n    }\n  ];\n\n  try {\n    // Calling constructor for the first time resolves default props\n    // eslint-disable-next-line\n    new Layer({});\n  } catch (error) {\n    assert(false, `Construct ${Layer.layerName} throws: ${error.message}`);\n  }\n\n  const {_propTypes: propTypes, _mergedDefaultProps: defaultProps} = Layer;\n\n  // Test alternative data formats\n  testCases.push(...makeAltDataTestCases(sampleProps, propTypes));\n\n  for (const propName in Layer.defaultProps) {\n    if (!(propName in sampleProps)) {\n      // Do not override user provided props - they may be layer-specific\n      const newTestCase =\n        makeAltPropTestCase({propName, propTypes, defaultProps, sampleProps, assert}) || [];\n      testCases.push(...newTestCase);\n    }\n  }\n\n  testCases.forEach(testCase => {\n    testCase.title = wrapTestCaseTitle(testCase.title);\n    const beforeFunc = testCase.onBeforeUpdate || noop;\n    const afterFunc = testCase.onAfterUpdate || noop;\n    testCase.onBeforeUpdate = params => {\n      // Generated callback\n      beforeFunc(params);\n      // User callback\n      onBeforeUpdate(params);\n    };\n    testCase.onAfterUpdate = params => {\n      // Generated callback\n      afterFunc(params);\n      // User callback\n      onAfterUpdate(params);\n\n      // Default assert\n      if (runDefaultAsserts) {\n        if (params.layer.isComposite) {\n          const {data} = params.layer.props;\n          if (data && typeof data === 'object' && count(data)) {\n            assert(params.subLayers.length, 'Layer should have sublayers');\n          }\n        } else {\n          assert(params.layer.getModels().length, 'Layer should have models');\n        }\n      }\n    };\n  });\n\n  return testCases;\n}\n\nfunction makeAltPropTestCase({propName, propTypes, defaultProps, sampleProps, assert}) {\n  const newProps = {...sampleProps};\n  const propDef = propTypes[propName];\n\n  if (!propDef) {\n    return null;\n  }\n\n  switch (propDef.type) {\n    case 'boolean':\n      newProps[propName] = !defaultProps[propName];\n      return [\n        {\n          title: `${propName}: ${String(newProps[propName])}`,\n          props: newProps\n        }\n      ];\n\n    case 'number':\n      if ('max' in propDef) {\n        newProps[propName] = propDef.max;\n      } else if ('min' in propDef) {\n        newProps[propName] = propDef.min;\n      } else {\n        newProps[propName] = defaultProps[propName] + 1;\n      }\n      return [\n        {\n          title: `${propName}: ${String(newProps[propName])}`,\n          props: newProps\n        }\n      ];\n\n    case 'accessor': {\n      if (typeof defaultProps[propName] === 'function') {\n        return null;\n      }\n      let callCount = 0;\n      newProps[propName] = () => {\n        callCount++;\n        return defaultProps[propName];\n      };\n      newProps.updateTriggers = {\n        [propName]: 'function'\n      };\n      const onBeforeUpdate = () => (callCount = 0);\n      const onAfterUpdate = () => assert(callCount > 0, 'accessor function is called');\n\n      return [\n        {\n          title: `${propName}: () => ${defaultProps[propName]}`,\n          props: newProps,\n          onBeforeUpdate,\n          onAfterUpdate\n        },\n        {\n          title: `${propName}: updateTrigger`,\n          updateProps: {\n            updateTriggers: {\n              [propName]: 'function+trigger'\n            }\n          },\n          onBeforeUpdate,\n          onAfterUpdate\n        }\n      ];\n    }\n\n    default:\n      return null;\n  }\n}\n\nfunction makeAltDataTestCases(props, propTypes) {\n  const originalData = props.data;\n  if (!Array.isArray(originalData)) {\n    return [];\n  }\n  // partial update\n  const partialUpdateProps = {\n    data: originalData.slice(),\n    _dataDiff: () => [{startRow: 0, endRow: 2}]\n  };\n  // data should support any iterable\n  const genIterableProps = {\n    data: new Set(originalData),\n    _dataDiff: null\n  };\n  // data in non-iterable form\n  const nonIterableProps = {\n    data: {\n      length: originalData.length\n    }\n  };\n  for (const propName in props) {\n    if (propTypes[propName].type === 'accessor') {\n      nonIterableProps[propName] = (_, info) => props[propName](originalData[info.index], info);\n    }\n  }\n\n  return [\n    {\n      title: 'Partial update',\n      updateProps: partialUpdateProps\n    },\n    {\n      title: 'Generic iterable data',\n      updateProps: genIterableProps\n    },\n    {\n      title: 'non-iterable data',\n      updateProps: nonIterableProps\n    }\n  ];\n}\n"],"file":"generate-layer-tests.js"}