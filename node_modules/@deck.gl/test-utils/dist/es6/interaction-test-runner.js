import TestRunner from './test-runner';
const DEFAULT_TEST_CASE = {
  name: 'Unnamed interaction test',
  events: [],
  onBeforeEvents: ({
    deck
  }) => {},
  onAfterEvents: ({
    deck,
    layers,
    context
  }) => {}
};

function sleep(timeout) {
  return new Promise(resolve => window.setTimeout(resolve, timeout));
}

export default class InteractionTestRunner extends TestRunner {
  get defaultTestCase() {
    return DEFAULT_TEST_CASE;
  }

  runTestCase(testCase, onDone) {
    testCase.context = testCase.onBeforeEvents({
      deck: this.deck
    });
    let promise = Promise.resolve();

    for (const event of testCase.events) {
      if (event.wait) {
        promise = promise.then(() => sleep(event.wait));
      } else {
        promise = promise.then(() => window.browserTestDriver_emulateInput(event));
      }
    }

    return promise.then(onDone);
  }

  assert(testCase) {
    testCase.onAfterEvents({
      deck: this.deck,
      layers: this.deck.layerManager.getLayers(),
      context: testCase.context
    });

    this._next();
  }

}
//# sourceMappingURL=interaction-test-runner.js.map