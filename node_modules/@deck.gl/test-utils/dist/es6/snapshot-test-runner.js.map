{"version":3,"sources":["../../src/snapshot-test-runner.js"],"names":["TestRunner","getBoundingBoxInPage","DEFAULT_TEST_OPTIONS","imageDiffOptions","DEFAULT_TEST_CASE","name","props","onAfterRender","deck","layers","done","every","layer","isLoaded","goldenImage","SnapshotTestRunner","constructor","isDiffing","Object","assign","testOptions","defaultTestCase","initTestCase","testCase","Error","runTestCase","onDone","setProps","shouldRender","assert","diffOptions","region","canvas","window","browserTestDriver_captureAndDiffScreen","then","result","success","_pass","_fail","_next"],"mappings":"AAqBA,OAAOA,UAAP,MAAuB,eAAvB;AACA,SAAQC,oBAAR,QAAmC,aAAnC;AAEA,MAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,gBAAgB,EAAE;AADS,CAA7B;AAIA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,IAAI,EAAE,uBADkB;AAExBC,EAAAA,KAAK,EAAE,EAFiB;AAGxBC,EAAAA,aAAa,EAAE,CAAC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,MAAP;AAAeC,IAAAA;AAAf,GAAD,KAA0B;AACvC,QAAID,MAAM,CAACE,KAAP,CAAaC,KAAK,IAAIA,KAAK,CAACC,QAA5B,CAAJ,EAA2C;AACzCH,MAAAA,IAAI;AACL;AACF,GAPuB;AAQxBI,EAAAA,WAAW,EAAE;AARW,CAA1B;AAWA,eAAe,MAAMC,kBAAN,SAAiCf,UAAjC,CAA4C;AACzDgB,EAAAA,WAAW,CAACV,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKW,SAAL,GAAiB,KAAjB;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKC,WAAnB,EAAgClB,oBAAhC;AACD;;AAED,MAAImB,eAAJ,GAAsB;AACpB,WAAOjB,iBAAP;AACD;;AAEDkB,EAAAA,YAAY,CAACC,QAAD,EAAW;AACrB,UAAMD,YAAN,CAAmBC,QAAnB;;AACA,QAAI,CAACA,QAAQ,CAACT,WAAd,EAA2B;AACzB,YAAM,IAAIU,KAAJ,qBAAuBD,QAAQ,CAAClB,IAAhC,iCAAN;AACD;AACF;;AAEDoB,EAAAA,WAAW,CAACF,QAAD,EAAWG,MAAX,EAAmB;AAC5B,UAAM;AAAClB,MAAAA;AAAD,QAAS,IAAf;AAEAA,IAAAA,IAAI,CAACmB,QAAL,CACET,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKb,KAAvB,EAA8BiB,QAA9B,EAAwC;AACtChB,MAAAA,aAAa,EAAE,MAAM;AACnBgB,QAAAA,QAAQ,CAAChB,aAAT,CAAuB;AACrBC,UAAAA,IADqB;AAErBC,UAAAA,MAAM,EAAED,IAAI,CAACF,KAAL,CAAWG,MAFE;AAGrBC,UAAAA,IAAI,EAAEgB;AAHe,SAAvB;AAKD;AAPqC,KAAxC,CADF;AAWD;;AAEDE,EAAAA,YAAY,GAAG;AAEb,WAAO,CAAC,KAAKX,SAAb;AACD;;AAEDY,EAAAA,MAAM,CAACN,QAAD,EAAW;AACf,QAAI,KAAKN,SAAT,EAAoB;AAElB;AACD;;AACD,SAAKA,SAAL,GAAiB,IAAjB;AAEA,UAAMa,WAAW,GAAGZ,MAAM,CAACC,MAAP,CAClB,EADkB,EAElB,KAAKC,WAAL,CAAiBjB,gBAFC,EAGlBoB,QAAQ,CAACpB,gBAHS,EAIlB;AACEW,MAAAA,WAAW,EAAES,QAAQ,CAACT,WADxB;AAEEiB,MAAAA,MAAM,EAAE9B,oBAAoB,CAAC,KAAKO,IAAL,CAAUwB,MAAX;AAF9B,KAJkB,CAApB;AAUAC,IAAAA,MAAM,CAACC,sCAAP,CAA8CJ,WAA9C,EAA2DK,IAA3D,CAAgEC,MAAM,IAAI;AAExE,UAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB,aAAKC,KAAL,CAAWF,MAAX;AACD,OAFD,MAEO;AACL,aAAKG,KAAL,CAAWH,MAAX;AACD;;AAED,WAAKnB,SAAL,GAAiB,KAAjB;;AACA,WAAKuB,KAAL;AACD,KAVD;AAWD;;AArEwD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window */\nimport TestRunner from './test-runner';\nimport {getBoundingBoxInPage} from './utils/dom';\n\nconst DEFAULT_TEST_OPTIONS = {\n  imageDiffOptions: {}\n};\n\nconst DEFAULT_TEST_CASE = {\n  name: 'Unnamed snapshot test',\n  props: {},\n  onAfterRender: ({deck, layers, done}) => {\n    if (layers.every(layer => layer.isLoaded)) {\n      done(); // eslint-disable-line\n    }\n  },\n  goldenImage: ''\n};\n\nexport default class SnapshotTestRunner extends TestRunner {\n  constructor(props) {\n    super(props);\n\n    this.isDiffing = false;\n\n    Object.assign(this.testOptions, DEFAULT_TEST_OPTIONS);\n  }\n\n  get defaultTestCase() {\n    return DEFAULT_TEST_CASE;\n  }\n\n  initTestCase(testCase) {\n    super.initTestCase(testCase);\n    if (!testCase.goldenImage) {\n      throw new Error(`Test case ${testCase.name} does not have golden image`);\n    }\n  }\n\n  runTestCase(testCase, onDone) {\n    const {deck} = this;\n\n    deck.setProps(\n      Object.assign({}, this.props, testCase, {\n        onAfterRender: () => {\n          testCase.onAfterRender({\n            deck,\n            layers: deck.props.layers,\n            done: onDone\n          });\n        }\n      })\n    );\n  }\n\n  shouldRender() {\n    // wait for the current diffing to finish\n    return !this.isDiffing;\n  }\n\n  assert(testCase) {\n    if (this.isDiffing) {\n      // already performing diffing\n      return;\n    }\n    this.isDiffing = true;\n\n    const diffOptions = Object.assign(\n      {},\n      this.testOptions.imageDiffOptions,\n      testCase.imageDiffOptions,\n      {\n        goldenImage: testCase.goldenImage,\n        region: getBoundingBoxInPage(this.deck.canvas)\n      }\n    );\n    // Take screenshot and compare\n    window.browserTestDriver_captureAndDiffScreen(diffOptions).then(result => {\n      // invoke user callback\n      if (result.success) {\n        this._pass(result);\n      } else {\n        this._fail(result);\n      }\n\n      this.isDiffing = false;\n      this._next();\n    });\n  }\n}\n"],"file":"snapshot-test-runner.js"}