{"version":3,"sources":["../../src/lifecycle-test.js"],"names":["LayerManager","MapView","DeckRenderer","makeSpy","gl","testViewport","makeViewport","width","height","viewState","longitude","latitude","zoom","defaultOnError","error","title","testInitializeLayer","layer","viewport","onError","layerManager","setProps","id","setLayers","finalize","testLayer","opts","Layer","testCases","spies","resources","setupLayerTests","layerName","testCase","oldState","Object","assign","state","newLayer","spyMap","runLayerTestUpdate","runLayerTestPostUpdateCheck","keys","forEach","k","reset","cleanupAfterLayerTests","testLayerAsync","isLoaded","update","testTitle","timeline","oldResourceCounts","getResourceCounts","deckRenderer","context","animationProps","time","props","resourceCounts","resourceName","Error","resourceStats","luma","stats","get","Texture2D","count","Buffer","injectSpies","functionName","getPrototypeOf","onAfterUpdate","subLayers","isComposite","getSubLayers","subLayer","length","updateProps","onBeforeUpdate","constructor","clone","renderLayers","viewports","layers","getLayers","onViewportActive","activateViewport","Promise","resolve","onAnimationFrame","needsUpdate","updateLayers","setTimeout"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerManager, MapView, DeckRenderer} from '@deck.gl/core';\n\nimport {makeSpy} from '@probe.gl/test-utils';\nimport gl from './utils/setup-gl';\n\nconst testViewport = new MapView().makeViewport({\n  width: 100,\n  height: 100,\n  viewState: {longitude: 0, latitude: 0, zoom: 1}\n});\n\nfunction defaultOnError(error, title) {\n  if (error) {\n    throw error;\n  }\n}\n\nexport function testInitializeLayer({layer, viewport = testViewport, onError = defaultOnError}) {\n  const layerManager = new LayerManager(gl, {viewport});\n  layerManager.setProps({\n    onError: error => onError(error, `initializing ${layer.id}`)\n  });\n\n  layerManager.setLayers([layer]);\n  layerManager.finalize();\n\n  return null;\n}\n\nexport function testLayer(opts) {\n  const {Layer, testCases = [], spies = [], onError = defaultOnError} = opts;\n\n  const resources = setupLayerTests(`testing ${Layer.layerName}`, opts);\n\n  let layer = new Layer();\n  // Run successive update tests\n  for (const testCase of testCases) {\n    // Save old state before update\n    const oldState = Object.assign({}, layer.state);\n\n    const {layer: newLayer, spyMap} = runLayerTestUpdate(testCase, resources, layer, spies);\n\n    runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap);\n\n    // Remove spies\n    Object.keys(spyMap).forEach(k => spyMap[k].reset());\n    layer = newLayer;\n  }\n\n  const error = cleanupAfterLayerTests(resources);\n  if (error) {\n    onError(error, `${Layer.layerName} should delete all resources`);\n  }\n}\n\nexport async function testLayerAsync(opts) {\n  const {Layer, testCases = [], spies = [], onError = defaultOnError} = opts;\n\n  const resources = setupLayerTests(`testing ${Layer.layerName}`, opts);\n\n  let layer = new Layer();\n  // Run successive update tests\n  for (const testCase of testCases) {\n    // Save old state before update\n    const oldState = Object.assign({}, layer.state);\n\n    const {layer: newLayer, spyMap} = runLayerTestUpdate(testCase, resources, layer, spies);\n\n    runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap);\n\n    while (!newLayer.isLoaded) {\n      await update(resources);\n      runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap);\n    }\n\n    // Remove spies\n    Object.keys(spyMap).forEach(k => spyMap[k].reset());\n    layer = newLayer;\n  }\n\n  const error = cleanupAfterLayerTests(resources);\n  if (error) {\n    onError(error, `${Layer.layerName} should delete all resources`);\n  }\n}\n\nfunction setupLayerTests(\n  testTitle,\n  {viewport = testViewport, timeline = null, onError = defaultOnError}\n) {\n  const oldResourceCounts = getResourceCounts();\n\n  const layerManager = new LayerManager(gl, {viewport, timeline});\n  const deckRenderer = new DeckRenderer(gl);\n\n  layerManager.context.animationProps = {\n    time: 0\n  };\n\n  const props = {\n    onError: error => onError(error, testTitle)\n  };\n  layerManager.setProps(props);\n  deckRenderer.setProps(props);\n\n  return {layerManager, deckRenderer, oldResourceCounts};\n}\n\nfunction cleanupAfterLayerTests({layerManager, deckRenderer, oldResourceCounts}) {\n  layerManager.setLayers([]);\n  layerManager.finalize();\n  deckRenderer.finalize();\n\n  const resourceCounts = getResourceCounts();\n\n  for (const resourceName in resourceCounts) {\n    if (resourceCounts[resourceName] !== oldResourceCounts[resourceName]) {\n      return new Error(\n        `${resourceCounts[resourceName] - oldResourceCounts[resourceName]} ${resourceName}s`\n      );\n    }\n  }\n  return null;\n}\n\nfunction getResourceCounts() {\n  /* global luma */\n  const resourceStats = luma.stats.get('Resource Counts');\n  return {\n    Texture2D: resourceStats.get('Texture2Ds Active').count,\n    Buffer: resourceStats.get('Buffers Active').count\n  };\n}\n\nfunction injectSpies(layer, spies) {\n  const spyMap = {};\n  if (spies) {\n    for (const functionName of spies) {\n      spyMap[functionName] = makeSpy(Object.getPrototypeOf(layer), functionName);\n    }\n  }\n  return spyMap;\n}\n\nfunction runLayerTestPostUpdateCheck(testCase, newLayer, oldState, spyMap) {\n  // assert on updated layer\n  if (testCase.onAfterUpdate) {\n    // layer manager should handle match subLayer and tranfer state and props\n    // here we assume subLayer matches copy over the new props from a new subLayer\n    const subLayers = newLayer.isComposite ? newLayer.getSubLayers() : [];\n    const subLayer = subLayers.length && subLayers[0];\n\n    testCase.onAfterUpdate({\n      testCase,\n      layer: newLayer,\n      oldState,\n      subLayers,\n      subLayer,\n      spies: spyMap\n    });\n  }\n}\n\nfunction runLayerTestUpdate(testCase, {layerManager, deckRenderer}, layer, spies) {\n  const {props, updateProps, onBeforeUpdate, viewport = layerManager.context.viewport} = testCase;\n\n  if (onBeforeUpdate) {\n    onBeforeUpdate({layer, testCase});\n  }\n\n  if (props) {\n    // Test case can reset the props on every iteration\n    layer = new layer.constructor(props);\n  } else if (updateProps) {\n    // Test case can override with new props on every iteration\n    layer = layer.clone(updateProps);\n  }\n\n  // Create a map of spies that the test case can inspect\n  spies = testCase.spies || spies;\n  const spyMap = injectSpies(layer, spies);\n\n  layerManager.setLayers([layer]);\n\n  // call draw layer\n  deckRenderer.renderLayers({\n    viewports: [viewport],\n    layers: layerManager.getLayers(),\n    onViewportActive: layerManager.activateViewport\n  });\n\n  return {layer, spyMap};\n}\n\n/* global setTimeout */\nfunction update({layerManager, deckRenderer}) {\n  return new Promise(resolve => {\n    const onAnimationFrame = () => {\n      if (layerManager.needsUpdate()) {\n        layerManager.updateLayers();\n\n        deckRenderer.renderLayers({\n          viewports: [layerManager.context.viewport],\n          layers: layerManager.getLayers(),\n          onViewportActive: layerManager.activateViewport\n        });\n        resolve();\n        return;\n      }\n\n      setTimeout(onAnimationFrame, 50);\n    };\n\n    onAnimationFrame();\n  });\n}\n"],"file":"lifecycle-test.js"}